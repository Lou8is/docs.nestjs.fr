"use strict";(self.webpackChunkdocs_nestjs_com=self.webpackChunkdocs_nestjs_com||[]).push([[882],{882:(k,f,c)=>{c.r(f),c.d(f,{FundamentalsModule:()=>w});var i=c(1180),h=c(6895),Z=c(6641),E=c(4466),d=c(4834),e=c(1571),p=c(4521);let v=(()=>{class n extends d.y{}return(0,i.Z)(n,"\u0275fac",function(){let t;return function(s){return(t||(t=e.n5z(n)))(s||n)}}()),(0,i.Z)(n,"\u0275cmp",e.Xpm({type:n,selectors:[["app-async-components"]],features:[e.qOj],decls:51,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/Lou8is/docs.nestjs.fr/edit/main/content/fundamentals/async-components.md","aria-label","Proposer des modifications","title","Proposer des modifications"],[1,"fas","fa-edit"],["id","fournisseurs-asynchrones"],[1,"language-typescript"],[1,"info"],["routerLink","/fundamentals/custom-providers"],["appAnchor","","id","injection"],["appAnchor","","id","exemple"],["routerLink","/recipes/sql-typeorm"]],template:function(o,s){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Fournisseurs asynchrones"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Parfois, le d\xe9marrage de l'application doit \xeatre retard\xe9 jusqu'\xe0 ce qu'une ou plusieurs "),e.TgZ(9,"strong"),e._uU(10,"t\xe2ches asynchrones"),e.qZA(),e._uU(11," soient termin\xe9es. Par exemple, il se peut que vous ne souhaitiez pas commencer \xe0 accepter des requ\xeates tant que la connexion avec la base de donn\xe9es n'a pas \xe9t\xe9 \xe9tablie. Vous pouvez y parvenir en utilisant des fournisseurs asynchrones."),e.qZA(),e.TgZ(12,"p"),e._uU(13,"La syntaxe pour cela est d'utiliser "),e.TgZ(14,"code"),e._uU(15,"async/await"),e.qZA(),e._uU(16," avec la syntaxe "),e.TgZ(17,"code"),e._uU(18,"useFactory"),e.qZA(),e._uU(19,". La factory renvoie une "),e.TgZ(20,"code"),e._uU(21,"Promise"),e.qZA(),e._uU(22,", et la fonction factory peut "),e.TgZ(23,"code"),e._uU(24,"await"),e.qZA(),e._uU(25," les t\xe2ches asynchrones. Nest attendra la r\xe9solution de la promesse avant d'instancier toute classe qui d\xe9pend d'un tel fournisseur (qui l'injecte)."),e.qZA(),e.TgZ(26,"pre")(27,"code",6),e._uU(28,"\n{\n  provide: 'ASYNC_CONNECTION',\n  useFactory: async () => {\n    const connection = await createConnection(options);\n    return connection;\n  },\n}\n"),e.qZA()(),e.TgZ(29,"blockquote",7)(30,"strong"),e._uU(31,"Astuce"),e.qZA(),e._uU(32," Apprenez-en plus sur la syntaxe des fournisseurs personnalis\xe9s "),e.TgZ(33,"a",8),e._uU(34,"ici"),e.qZA(),e._uU(35,".\n"),e.qZA(),e.TgZ(36,"h4",9)(37,"span"),e._uU(38,"Injection"),e.qZA()(),e.TgZ(39,"p"),e._uU(40,"Les fournisseurs asynchrones sont inject\xe9s dans d'autres composants par leurs jetons, comme n'importe quel autre fournisseur. Dans l'exemple ci-dessus, vous utiliseriez la construction "),e.TgZ(41,"code"),e._uU(42,"@Inject('ASYNC_CONNECTION')"),e.qZA(),e._uU(43,"."),e.qZA(),e.TgZ(44,"h4",10)(45,"span"),e._uU(46,"Exemple"),e.qZA()(),e.TgZ(47,"p")(48,"a",11),e._uU(49,"The TypeORM recipe"),e.qZA(),e._uU(50," pr\xe9sente un exemple plus substantiel de fournisseur asynchrone."),e.qZA()())},dependencies:[p.U,Z.rH],encapsulation:2,changeDetection:0})),n})();var U=c(4336),A=c(7297);let b=(()=>{class n extends d.y{}return(0,i.Z)(n,"\u0275fac",function(){let t;return function(s){return(t||(t=e.n5z(n)))(s||n)}}()),(0,i.Z)(n,"\u0275cmp",e.Xpm({type:n,selectors:[["app-circular-dependency"]],features:[e.qOj],decls:150,vars:24,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/Lou8is/docs.nestjs.fr/edit/main/content/fundamentals/circular-dependency.md","aria-label","Proposer des modifications","title","Proposer des modifications"],[1,"fas","fa-edit"],["id","d\xe9pendance-circulaire"],[1,"warning"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/issues/1181#issuecomment-430197191"],["appAnchor","","id","r\xe9f\xe9rence-avanc\xe9e"],[1,"filename"],["appcbc7362b84a3644451f219e7b12a9c839f9f773a",""],[1,"language-typescript"],[1,"info"],["app919558bf4910f89dad71fae89b53f6e07175225b",""],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/issues/5778"],["appAnchor","","id","alternative-de-la-classe-moduleref"],["routerLink","/fundamentals/module-ref"],["appAnchor","","id","r\xe9f\xe9rence-avanc\xe9e-de-module"],["app450abfd9db7e2462d105aca15a5ffb482c963f3e",""],["app3d222b22e6ccd771ed9ab17979a94a3e2b12098a",""]],template:function(o,s){if(1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"D\xe9pendance circulaire"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Une d\xe9pendance circulaire se produit lorsque deux classes d\xe9pendent l'une de l'autre. Par exemple, la classe A a besoin de la classe B, et la classe B a \xe9galement besoin de la classe A. Les d\xe9pendances circulaires peuvent appara\xeetre dans Nest entre les modules et entre les fournisseurs."),e.qZA(),e.TgZ(9,"p"),e._uU(10,"Les d\xe9pendances circulaires doivent \xeatre \xe9vit\xe9es dans la mesure du possible, mais ce n'est pas toujours possible. Dans ce cas, Nest permet de r\xe9soudre les d\xe9pendances circulaires entre les fournisseurs de deux mani\xe8res. Dans ce chapitre, nous d\xe9crivons l'utilisation de "),e.TgZ(11,"strong"),e._uU(12,"r\xe9f\xe9rences avanc\xe9es"),e.qZA(),e._uU(13," comme une technique, et l'utilisation de la classe "),e.TgZ(14,"strong"),e._uU(15,"ModuleRef"),e.qZA(),e._uU(16," pour r\xe9cup\xe9rer une instance de fournisseur dans le conteneur DI comme une autre technique."),e.qZA(),e.TgZ(17,"p"),e._uU(18,"Nous d\xe9crivons \xe9galement la r\xe9solution des d\xe9pendances circulaires entre les modules."),e.qZA(),e.TgZ(19,"blockquote",6)(20,"strong"),e._uU(21,"Attention"),e.qZA(),e._uU(22," Une d\xe9pendance circulaire peut \xe9galement \xeatre caus\xe9e par l'utilisation de \"barrel files\"/index.ts pour regrouper les importations. Les \"barrel files\" doivent \xeatre omis lorsqu'il s'agit de classes de modules/fournisseurs. Par exemple, les barrel files ne devraient pas \xeatre utilis\xe9s lors de l'importation de fichiers dans le m\xeame r\xe9pertoire que le barrel file, c'est-\xe0-dire que "),e.TgZ(23,"code"),e._uU(24,"cats/cats.controller"),e.qZA(),e._uU(25," ne devrait pas importer "),e.TgZ(26,"code"),e._uU(27,"cats"),e.qZA(),e._uU(28," pour importer le fichier "),e.TgZ(29,"code"),e._uU(30,"cats/cats.service"),e.qZA(),e._uU(31,". Pour plus de d\xe9tails, veuillez \xe9galement consulter "),e.TgZ(32,"a",7),e._uU(33,"ce probl\xe8me github"),e.qZA(),e._uU(34,".\n"),e.qZA(),e.TgZ(35,"h4",8)(36,"span"),e._uU(37,"R\xe9f\xe9rence avanc\xe9e"),e.qZA()(),e.TgZ(38,"p"),e._uU(39,"Une "),e.TgZ(40,"strong"),e._uU(41,"r\xe9f\xe9rence avanc\xe9e"),e.qZA(),e._uU(42," permet \xe0 Nest de r\xe9f\xe9rencer des classes qui ne sont pas encore d\xe9finies en utilisant la fonction utilitaire "),e.TgZ(43,"code"),e._uU(44,"forwardRef()"),e.qZA(),e._uU(45,". Par exemple, si "),e.TgZ(46,"code"),e._uU(47,"CatsService"),e.qZA(),e._uU(48," et "),e.TgZ(49,"code"),e._uU(50,"CommonService"),e.qZA(),e._uU(51," d\xe9pendent l'un de l'autre, les deux parties de la relation peuvent utiliser "),e.TgZ(52,"code"),e._uU(53,"@Inject()"),e.qZA(),e._uU(54," et l'utilitaire "),e.TgZ(55,"code"),e._uU(56,"forwardRef()"),e.qZA(),e._uU(57," pour r\xe9soudre la d\xe9pendance circulaire. Sinon Nest ne les instanciera pas car toutes les m\xe9tadonn\xe9es essentielles ne seront pas disponibles. Voici un exemple :"),e.qZA(),e.TgZ(58,"span",9),e._uU(59),e.ALo(60,"extension"),e._UZ(61,"app-tabs",null,10),e.qZA(),e.TgZ(63,"pre")(64,"code",11),e._uU(65,"\n@Injectable()\nexport class CatsService {\n  constructor(\n    @Inject(forwardRef(() => CommonService))\n    private commonService: CommonService,\n  ) {}\n}\n"),e.qZA()(),e.TgZ(66,"pre")(67,"code",11),e._uU(68,"\n@Injectable()\n@Dependencies(forwardRef(() => CommonService))\nexport class CatsService {\n  constructor(commonService) {\n    this.commonService = commonService;\n  }\n}\n"),e.qZA()(),e.TgZ(69,"blockquote",12)(70,"strong"),e._uU(71,"Astuce"),e.qZA(),e._uU(72," La fonction "),e.TgZ(73,"code"),e._uU(74,"forwardRef()"),e.qZA(),e._uU(75," est import\xe9e du paquet "),e.TgZ(76,"code"),e._uU(77,"@nestjs/common"),e.qZA(),e._uU(78,".\n"),e.qZA(),e.TgZ(79,"p"),e._uU(80,"Cela couvre un c\xf4t\xe9 de la relation. Faisons maintenant la m\xeame chose avec "),e.TgZ(81,"code"),e._uU(82,"CommonService"),e.qZA(),e._uU(83," :"),e.qZA(),e.TgZ(84,"span",9),e._uU(85),e.ALo(86,"extension"),e._UZ(87,"app-tabs",null,13),e.qZA(),e.TgZ(89,"pre")(90,"code",11),e._uU(91,"\n@Injectable()\nexport class CommonService {\n  constructor(\n    @Inject(forwardRef(() => CatsService))\n    private catsService: CatsService,\n  ) {}\n}\n"),e.qZA()(),e.TgZ(92,"pre")(93,"code",11),e._uU(94,"\n@Injectable()\n@Dependencies(forwardRef(() => CatsService))\nexport class CommonService {\n  constructor(catsService) {\n    this.catsService = catsService;\n  }\n}\n"),e.qZA()(),e.TgZ(95,"blockquote",6)(96,"strong"),e._uU(97,"Attention"),e.qZA(),e._uU(98," L'ordre d'instanciation est ind\xe9termin\xe9. Assurez-vous que votre code ne d\xe9pend pas du constructeur appel\xe9 en premier. Avoir des d\xe9pendances circulaires qui d\xe9pendent de providers avec "),e.TgZ(99,"code"),e._uU(100,"Scope.REQUEST"),e.qZA(),e._uU(101," peut conduire \xe0 des d\xe9pendances non d\xe9finies. Plus d'informations disponibles "),e.TgZ(102,"a",14),e._uU(103,"ici"),e.qZA()(),e.TgZ(104,"h4",15)(105,"span"),e._uU(106,"Alternative de la classe ModuleRef"),e.qZA()(),e.TgZ(107,"p"),e._uU(108,"Une alternative \xe0 l'utilisation de "),e.TgZ(109,"code"),e._uU(110,"forwardRef()"),e.qZA(),e._uU(111," est de remanier votre code et d'utiliser la classe "),e.TgZ(112,"code"),e._uU(113,"ModuleRef"),e.qZA(),e._uU(114," pour r\xe9cup\xe9rer un fournisseur d'un c\xf4t\xe9 de la relation (autrement) circulaire. Pour en savoir plus sur la classe utilitaire "),e.TgZ(115,"code"),e._uU(116,"ModuleRef"),e.qZA(),e._uU(117,", cliquez "),e.TgZ(118,"a",16),e._uU(119,"ici"),e.qZA(),e._uU(120,"."),e.qZA(),e.TgZ(121,"h4",17)(122,"span"),e._uU(123,"R\xe9f\xe9rence avanc\xe9e de module"),e.qZA()(),e.TgZ(124,"p"),e._uU(125,"Afin de r\xe9soudre les d\xe9pendances circulaires entre les modules, utilisez la m\xeame fonction utilitaire "),e.TgZ(126,"code"),e._uU(127,"forwardRef()"),e.qZA(),e._uU(128," des deux c\xf4t\xe9s de l'association des modules. Par exemple :"),e.qZA(),e.TgZ(129,"span",9),e._uU(130),e.ALo(131,"extension"),e._UZ(132,"app-tabs",null,18),e.qZA(),e.TgZ(134,"pre")(135,"code",11),e._uU(136,"\n@Module({\n  imports: [forwardRef(() => CatsModule)],\n})\nexport class CommonModule {}\n"),e.qZA()(),e.TgZ(137,"p"),e._uU(138,"Cela couvre un aspect de la relation. Faisons maintenant la m\xeame chose avec "),e.TgZ(139,"code"),e._uU(140,"CatsModule"),e.qZA(),e._uU(141," :"),e.qZA(),e.TgZ(142,"span",9),e._uU(143),e.ALo(144,"extension"),e._UZ(145,"app-tabs",null,19),e.qZA(),e.TgZ(147,"pre")(148,"code",11),e._uU(149,"\n@Module({\n  imports: [forwardRef(() => CommonModule)],\n})\nexport class CatsModule {}\n"),e.qZA()()()),2&o){const u=e.MAs(62),r=e.MAs(88),a=e.MAs(133),l=e.MAs(146);e.xp6(59),e.hij(" ",e.xi3(60,12,"cats.service",u.isJsActive),"\n"),e.xp6(4),e.ekj("hide",u.isJsActive),e.xp6(3),e.ekj("hide",!u.isJsActive),e.xp6(19),e.hij(" ",e.xi3(86,15,"common.service",r.isJsActive),"\n"),e.xp6(4),e.ekj("hide",r.isJsActive),e.xp6(3),e.ekj("hide",!r.isJsActive),e.xp6(38),e.hij(" ",e.xi3(131,18,"common.module",a.isJsActive),"\n"),e.xp6(13),e.hij(" ",e.xi3(144,21,"cats.module",l.isJsActive),"\n")}},dependencies:[U.n,p.U,Z.rH,A.F],encapsulation:2,changeDetection:0})),n})();var q=c(8857);let y=(()=>{class n extends d.y{}return(0,i.Z)(n,"\u0275fac",function(){let t;return function(s){return(t||(t=e.n5z(n)))(s||n)}}()),(0,i.Z)(n,"\u0275cmp",e.Xpm({type:n,selectors:[["app-dependency-injection"]],features:[e.qOj],decls:459,vars:36,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/Lou8is/docs.nestjs.fr/edit/main/content/fundamentals/dependency-injection.md","aria-label","Proposer des modifications","title","Proposer des modifications"],[1,"fas","fa-edit"],["id","fournisseurs-personnalis\xe9s"],["href","/providers#injection-de-d%C3%A9pendance"],["appAnchor","","id","principes-de-base-de-lid"],["rel","nofollow","target","_blank","href","https://en.wikipedia.org/wiki/Inversion_of_control"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/providers"],[1,"filename"],["appde338d8928b0ffd5c0d177e5a57b0865cc49ad55",""],[1,"language-typescript"],["appf3664fa25178226ae717c69aa7fc15f3b0b7a5b7",""],["app089102c773e8560edce5aa56deaac8ca58899e6a",""],["start","3"],["href","/fundamentals/custom-providers#fournisseurs-standards"],["appAnchor","","id","fournisseurs-standards"],["appAnchor","","id","fournisseurs-personnalis\xe9s-1"],[1,"info"],["appAnchor","","id","fournisseurs-de-valeur--usevalue"],["rel","nofollow","target","_blank","href","https://www.typescriptlang.org/docs/handbook/type-compatibility.html"],["appAnchor","","id","jetons-de-fournisseur-non-bas\xe9s-sur-une-classe"],["href","/fundamentals/custom-providers#principes-de-base-de-lid"],[1,"warning"],["rel","nofollow","target","_blank","href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol"],["rel","nofollow","target","_blank","href","https://www.typescriptlang.org/docs/handbook/enums.html"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/providers#dependency-injection"],["app934e50a2c7eaba7ceab596eb5686ea092f26a80a",""],["appAnchor","","id","fournisseurs-de-classe--useclass"],["appAnchor","","id","fournisseurs-de-factory--usefactory"],["app52e5068f12d5520f1db97a659adbf77ae3707dd1",""],["appAnchor","","id","fournisseurs-dalias--useexisting"],["appAnchor","","id","fournisseurs-non-bas\xe9s-sur-les-services"],["appAnchor","","id","exporter-un-fournisseur-personnalis\xe9"],["app79674c681178c998fbe1c1952a670c8f48e3b303",""],["app859ee3f0352ff12ac8443ba53bbba39d0a767110",""]],template:function(o,s){if(1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Fournisseurs personnalis\xe9s"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Dans les chapitres pr\xe9c\xe9dents, nous avons abord\xe9 divers aspects de "),e.TgZ(9,"strong"),e._uU(10,"l'injection de d\xe9pendances (ID)"),e.qZA(),e._uU(11," et la fa\xe7on dont elle est utilis\xe9e dans Nest. Un exemple est l'injection de d\xe9pendance "),e.TgZ(12,"a",6),e._uU(13,"bas\xe9e sur le constructeur"),e.qZA(),e._uU(14," utilis\xe9e pour injecter des instances (souvent des fournisseurs de services) dans les classes. Vous ne serez pas surpris d'apprendre que l'injection de d\xe9pendances est int\xe9gr\xe9e de mani\xe8re fondamentale dans le noyau de Nest. Jusqu'\xe0 pr\xe9sent, nous n'avons explor\xe9 qu'un seul mod\xe8le principal. Au fur et \xe0 mesure que votre application se complexifie, vous aurez peut-\xeatre besoin de tirer parti de toutes les fonctionnalit\xe9s du syst\xe8me d'injection de d\xe9pendances, alors explorons-les plus en d\xe9tail."),e.qZA(),e.TgZ(15,"h4",7)(16,"span"),e._uU(17,"Principes de base de l'ID"),e.qZA()(),e.TgZ(18,"p"),e._uU(19,"L'injection de d\xe9pendances est une technique "),e.TgZ(20,"a",8),e._uU(21,"d'inversion de contr\xf4le (IoC)"),e.qZA(),e._uU(22," dans laquelle vous d\xe9l\xe9guez l'instanciation des d\xe9pendances au conteneur IoC (dans notre cas, le syst\xe8me d'ex\xe9cution NestJS), au lieu de le faire imp\xe9rativement dans votre propre code. Examinons ce qui se passe dans cet exemple tir\xe9 du chapitre sur les "),e.TgZ(23,"a",9),e._uU(24,"fournisseurs"),e.qZA(),e._uU(25,"."),e.qZA(),e.TgZ(26,"p"),e._uU(27,"Tout d'abord, nous d\xe9finissons un fournisseur. Le d\xe9corateur "),e.TgZ(28,"code"),e._uU(29,"@Injectable()"),e.qZA(),e._uU(30," marque la classe "),e.TgZ(31,"code"),e._uU(32,"CatsService"),e.qZA(),e._uU(33," comme fournisseur."),e.qZA(),e.TgZ(34,"span",10),e._uU(35),e.ALo(36,"extension"),e._UZ(37,"app-tabs",null,11),e.qZA(),e.TgZ(39,"pre")(40,"code",12),e._uU(41,"\nimport { Injectable } from '@nestjs/common';\nimport { Cat } from './interfaces/cat.interface';\n\n@Injectable()\nexport class CatsService {\n  private readonly cats: Cat[] = [];\n\n  findAll(): Cat[] {\n    return this.cats;\n  }\n}\n"),e.qZA()(),e.TgZ(42,"pre")(43,"code",12),e._uU(44,"\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class CatsService {\n  constructor() {\n    this.cats = [];\n  }\n\n  findAll() {\n    return this.cats;\n  }\n}\n"),e.qZA()(),e.TgZ(45,"p"),e._uU(46,"Ensuite, nous demandons \xe0 Nest d'injecter le fournisseur dans notre classe de contr\xf4leur :"),e.qZA(),e.TgZ(47,"span",10),e._uU(48),e.ALo(49,"extension"),e._UZ(50,"app-tabs",null,13),e.qZA(),e.TgZ(52,"pre")(53,"code",12),e._uU(54,"\nimport { Controller, Get } from '@nestjs/common';\nimport { CatsService } from './cats.service';\nimport { Cat } from './interfaces/cat.interface';\n\n@Controller('cats')\nexport class CatsController {\n  constructor(private catsService: CatsService) {}\n\n  @Get()\n  async findAll(): Promise<Cat[]> {\n    return this.catsService.findAll();\n  }\n}\n"),e.qZA()(),e.TgZ(55,"pre")(56,"code",12),e._uU(57,"\nimport { Controller, Get, Bind, Dependencies } from '@nestjs/common';\nimport { CatsService } from './cats.service';\n\n@Controller('cats')\n@Dependencies(CatsService)\nexport class CatsController {\n  constructor(catsService) {\n    this.catsService = catsService;\n  }\n\n  @Get()\n  async findAll() {\n    return this.catsService.findAll();\n  }\n}\n"),e.qZA()(),e.TgZ(58,"p"),e._uU(59,"Enfin, nous enregistrons le fournisseur aupr\xe8s du conteneur Nest IoC :"),e.qZA(),e.TgZ(60,"span",10),e._uU(61),e.ALo(62,"extension"),e._UZ(63,"app-tabs",null,14),e.qZA(),e.TgZ(65,"pre")(66,"code",12),e._uU(67,"\nimport { Module } from '@nestjs/common';\nimport { CatsController } from './cats/cats.controller';\nimport { CatsService } from './cats/cats.service';\n\n@Module({\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(68,"p"),e._uU(69,"Que se passe-t-il exactement en coulisses pour que cela fonctionne ? Il y a trois \xe9tapes cl\xe9s dans le processus :"),e.qZA(),e.TgZ(70,"ol")(71,"li"),e._uU(72,"Dans "),e.TgZ(73,"code"),e._uU(74,"cats.service.ts"),e.qZA(),e._uU(75,", le d\xe9corateur "),e.TgZ(76,"code"),e._uU(77,"@Injectable()"),e.qZA(),e._uU(78," d\xe9clare la classe "),e.TgZ(79,"code"),e._uU(80,"CatsService"),e.qZA(),e._uU(81," comme une classe qui peut \xeatre g\xe9r\xe9e par le conteneur IoC Nest."),e.qZA(),e.TgZ(82,"li"),e._uU(83,"Dans "),e.TgZ(84,"code"),e._uU(85,"cats.controller.ts"),e.qZA(),e._uU(86,", "),e.TgZ(87,"code"),e._uU(88,"CatsController"),e.qZA(),e._uU(89," d\xe9clare une d\xe9pendance sur le jeton "),e.TgZ(90,"code"),e._uU(91,"CatsService"),e.qZA(),e._uU(92," avec injection de constructeur :"),e.qZA()(),e.TgZ(93,"pre")(94,"code",12),e._uU(95,"\n  constructor(private catsService: CatsService)\n"),e.qZA()(),e.TgZ(96,"ol",15)(97,"li"),e._uU(98,"Dans "),e.TgZ(99,"code"),e._uU(100,"app.module.ts"),e.qZA(),e._uU(101,", nous associons le jeton "),e.TgZ(102,"code"),e._uU(103,"CatsService"),e.qZA(),e._uU(104," avec la classe "),e.TgZ(105,"code"),e._uU(106,"CatsService"),e.qZA(),e._uU(107," du fichier "),e.TgZ(108,"code"),e._uU(109,"cats.service.ts"),e.qZA(),e._uU(110,". Nous allons "),e.TgZ(111,"a",16),e._uU(112,"voir ci-dessous"),e.qZA(),e._uU(113," comment cette association (aussi appel\xe9e "),e.TgZ(114,"em"),e._uU(115,"enregistrement"),e.qZA(),e._uU(116,") se produit."),e.qZA()(),e.TgZ(117,"p"),e._uU(118,"Quand le conteneur Nest IoC instancie un "),e.TgZ(119,"code"),e._uU(120,"CatsController"),e.qZA(),e._uU(121,", il recherche d'abord les d\xe9pendances. Quand il trouve la d\xe9pendance "),e.TgZ(122,"code"),e._uU(123,"CatsService"),e.qZA(),e._uU(124,", il effectue une recherche sur le jeton "),e.TgZ(125,"code"),e._uU(126,"CatsService"),e.qZA(),e._uU(127,", qui retourne la classe "),e.TgZ(128,"code"),e._uU(129,"CatsService"),e.qZA(),e._uU(130,", selon l'\xe9tape d'enregistrement (#3 ci-dessus). En supposant une port\xe9e "),e.TgZ(131,"code"),e._uU(132,"SINGLETON"),e.qZA(),e._uU(133," (le comportement par d\xe9faut), Nest va alors soit cr\xe9er une instance de "),e.TgZ(134,"code"),e._uU(135,"CatsService"),e.qZA(),e._uU(136,", la mettre en cache, et la retourner, ou si une instance est d\xe9j\xe0 mise en cache, retourner l'instance existante."),e.qZA(),e.TgZ(137,"p"),e._uU(138,"*Cette explication est un peu simplifi\xe9e pour illustrer le propos. Un point important que nous avons n\xe9glig\xe9 est que le processus d'analyse du code pour les d\xe9pendances est tr\xe8s sophistiqu\xe9 et se d\xe9roule pendant l'amor\xe7age de l'application. Une caract\xe9ristique cl\xe9 est que l'analyse des d\xe9pendances (ou \"cr\xe9ation du graphe des d\xe9pendances\") est "),e.TgZ(139,"strong"),e._uU(140,"transitive"),e.qZA(),e._uU(141,". Dans l'exemple ci-dessus, si le "),e.TgZ(142,"code"),e._uU(143,"CatsService"),e.qZA(),e._uU(144,' lui-m\xeame avait des d\xe9pendances, celles-ci seraient \xe9galement r\xe9solues. Le graphe de d\xe9pendance garantit que les d\xe9pendances sont r\xe9solues dans le bon ordre - essentiellement "de bas en haut". Ce m\xe9canisme \xe9vite au d\xe9veloppeur d\'avoir \xe0 g\xe9rer des graphes de d\xe9pendances aussi complexes.'),e.qZA(),e.TgZ(145,"p"),e._UZ(146,"app-banner-courses"),e.qZA(),e.TgZ(147,"h4",17)(148,"span"),e._uU(149,"Fournisseurs standards"),e.qZA()(),e.TgZ(150,"p"),e._uU(151,"Regardons de plus pr\xe8s le d\xe9corateur "),e.TgZ(152,"code"),e._uU(153,"@Module()"),e.qZA(),e._uU(154,". Dans "),e.TgZ(155,"code"),e._uU(156,"app.module"),e.qZA(),e._uU(157,", nous d\xe9clarons :"),e.qZA(),e.TgZ(158,"pre")(159,"code",12),e._uU(160,"\n@Module({\n  controllers: [CatsController],\n  providers: [CatsService],\n})\n"),e.qZA()(),e.TgZ(161,"p"),e._uU(162,"La propri\xe9t\xe9 "),e.TgZ(163,"code"),e._uU(164,"providers"),e.qZA(),e._uU(165," prend une liste de "),e.TgZ(166,"code"),e._uU(167,"providers"),e.qZA(),e._uU(168,". Jusqu'\xe0 pr\xe9sent, nous avons fourni ces fournisseurs via une liste de noms de classes. En fait, la syntaxe "),e.TgZ(169,"code"),e._uU(170,"providers : [CatsService]"),e.qZA(),e._uU(171," est un raccourci pour la syntaxe plus compl\xe8te :"),e.qZA(),e.TgZ(172,"pre")(173,"code",12),e._uU(174,"\nproviders: [\n  {\n    provide: CatsService,\n    useClass: CatsService,\n  },\n];\n"),e.qZA()(),e.TgZ(175,"p"),e._uU(176,"Maintenant que nous voyons cette construction explicite, nous pouvons comprendre le processus d'enregistrement. Ici, nous associons clairement le jeton "),e.TgZ(177,"code"),e._uU(178,"CatsService"),e.qZA(),e._uU(179," \xe0 la classe "),e.TgZ(180,"code"),e._uU(181,"CatsService"),e.qZA(),e._uU(182,". La notation abr\xe9g\xe9e est simplement une commodit\xe9 pour simplifier le cas d'utilisation le plus courant, o\xf9 le jeton est utilis\xe9 pour requ\xe9rir une instance d'une classe portant le m\xeame nom."),e.qZA(),e.TgZ(183,"h4",18)(184,"span"),e._uU(185,"Fournisseurs personnalis\xe9s"),e.qZA()(),e.TgZ(186,"p"),e._uU(187,"Que se passe-t-il lorsque vos besoins vont au-del\xe0 de ce que proposent les "),e.TgZ(188,"em"),e._uU(189,"fournisseurs standard"),e.qZA(),e._uU(190," ? Voici quelques exemples :"),e.qZA(),e.TgZ(191,"ul")(192,"li"),e._uU(193,"Vous souhaitez cr\xe9er une instance personnalis\xe9e au lieu de demander \xe0 Nest d'instancier (ou de renvoyer une instance mise en cache) une classe."),e.qZA(),e.TgZ(194,"li"),e._uU(195,"Vous souhaitez r\xe9utiliser une classe existante dans une deuxi\xe8me d\xe9pendance"),e.qZA(),e.TgZ(196,"li"),e._uU(197,"Vous souhaitez remplacer une classe par une version factice \xe0 des fins de test."),e.qZA()(),e.TgZ(198,"p"),e._uU(199,"Nest vous permet de d\xe9finir des fournisseurs personnalis\xe9s pour traiter ces cas. Il existe plusieurs fa\xe7ons de d\xe9finir des fournisseurs personnalis\xe9s. Passons-les en revue."),e.qZA(),e.TgZ(200,"blockquote",19)(201,"strong"),e._uU(202,"Astuce"),e.qZA(),e._uU(203," Si vous avez des probl\xe8mes avec la r\xe9solution des d\xe9pendances, vous pouvez d\xe9finir la variable d'environnement "),e.TgZ(204,"code"),e._uU(205,"NEST_DEBUG"),e.qZA(),e._uU(206," et obtenir des logs suppl\xe9mentaires de r\xe9solution des d\xe9pendances pendant le d\xe9marrage.\n"),e.qZA(),e.TgZ(207,"h4",20)(208,"span"),e._uU(209,"Fournisseurs de valeur : "),e.TgZ(210,"code"),e._uU(211,"useValue"),e.qZA()()(),e.TgZ(212,"p"),e._uU(213,"La syntaxe "),e.TgZ(214,"code"),e._uU(215,"useValue"),e.qZA(),e._uU(216," est utile pour injecter une valeur constante, mettre une biblioth\xe8que externe dans le conteneur Nest, ou remplacer une impl\xe9mentation r\xe9elle par un objet factice. Supposons que vous souhaitiez forcer Nest \xe0 utiliser un simulacre de "),e.TgZ(217,"code"),e._uU(218,"CatsService"),e.qZA(),e._uU(219," \xe0 des fins de test."),e.qZA(),e.TgZ(220,"pre")(221,"code",12),e._uU(222,"\nimport { CatsService } from './cats.service';\n\nconst mockCatsService = {\n  /* impl\xe9mentation factice\n  ...\n  */\n};\n\n@Module({\n  imports: [CatsModule],\n  providers: [\n    {\n      provide: CatsService,\n      useValue: mockCatsService,\n    },\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(223,"p"),e._uU(224,"Dans cet exemple, le jeton "),e.TgZ(225,"code"),e._uU(226,"CatsService"),e.qZA(),e._uU(227," r\xe9soudra l'objet factice "),e.TgZ(228,"code"),e._uU(229,"mockCatsService"),e.qZA(),e._uU(230,". "),e.TgZ(231,"code"),e._uU(232,"useValue"),e.qZA(),e._uU(233," requiert une valeur - dans ce cas un objet litt\xe9ral qui a la m\xeame interface que la classe "),e.TgZ(234,"code"),e._uU(235,"CatsService"),e.qZA(),e._uU(236," qu'il remplace. Gr\xe2ce au "),e.TgZ(237,"a",21),e._uU(238,"typage structurel"),e.qZA(),e._uU(239," de TypeScript , vous pouvez utiliser n'importe quel objet ayant une interface compatible, y compris un objet litt\xe9ral ou une instance de classe instanci\xe9e avec "),e.TgZ(240,"code"),e._uU(241,"new"),e.qZA(),e._uU(242,"."),e.qZA(),e.TgZ(243,"h4",22)(244,"span"),e._uU(245,"Jetons de fournisseur non bas\xe9s sur une classe"),e.qZA()(),e.TgZ(246,"p"),e._uU(247,"Jusqu'\xe0 pr\xe9sent, nous avons utilis\xe9 des noms de classe comme jetons de fournisseur (la valeur de la propri\xe9t\xe9 "),e.TgZ(248,"code"),e._uU(249,"provide"),e.qZA(),e._uU(250," d'un fournisseur list\xe9 dans le tableau "),e.TgZ(251,"code"),e._uU(252,"providers"),e.qZA(),e._uU(253,"). Ceci correspond au mod\xe8le standard utilis\xe9 avec l'"),e.TgZ(254,"a",6),e._uU(255,"injection bas\xe9e sur le constructeur"),e.qZA(),e._uU(256,", o\xf9 le jeton est \xe9galement un nom de classe. ( Voir "),e.TgZ(257,"a",23),e._uU(258,"Principes de base de l'ID"),e.qZA(),e._uU(259," pour un rappel sur les tokens si ce concept n'est pas tout \xe0 fait clair). Parfois, nous pouvons souhaiter avoir la possibilit\xe9 d'utiliser des cha\xeenes ou des symboles comme jeton ID. Par exemple :"),e.qZA(),e.TgZ(260,"pre")(261,"code",12),e._uU(262,"\nimport { connection } from './connection';\n\n@Module({\n  providers: [\n    {\n      provide: 'CONNECTION',\n      useValue: connection,\n    },\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(263,"p"),e._uU(264,"Dans cet exemple, nous associons un jeton \xe0 valeur de cha\xeene ("),e.TgZ(265,"code"),e._uU(266,"'CONNECTION'"),e.qZA(),e._uU(267,") \xe0 un objet `connection' pr\xe9existant que nous avons import\xe9 d'un fichier externe."),e.qZA(),e.TgZ(268,"blockquote",24)(269,"strong"),e._uU(270,"Remarque"),e.qZA(),e._uU(271," Outre l'utilisation de cha\xeenes comme valeurs de jeton, vous pouvez \xe9galement utiliser des "),e.TgZ(272,"a",25),e._uU(273,"symboles JavaScript"),e.qZA(),e._uU(274," ou des "),e.TgZ(275,"a",26),e._uU(276,"enums TypeScript"),e.qZA(),e._uU(277,".\n"),e.qZA(),e.TgZ(278,"p"),e._uU(279,"Nous avons vu pr\xe9c\xe9demment comment injecter un fournisseur en utilisant le mod\xe8le standard d'"),e.TgZ(280,"a",27),e._uU(281,"injection bas\xe9e sur le constructeur"),e.qZA(),e._uU(282,". Ce sch\xe9ma "),e.TgZ(283,"strong"),e._uU(284,"exige"),e.qZA(),e._uU(285," que la d\xe9pendance soit d\xe9clar\xe9e avec un nom de classe. Le fournisseur personnalis\xe9 "),e.TgZ(286,"code"),e._uU(287,"'CONNECTION'"),e.qZA(),e._uU(288," utilise une cha\xeene de caract\xe8res. Voyons comment injecter un tel fournisseur. Pour ce faire, nous utilisons le d\xe9corateur "),e.TgZ(289,"code"),e._uU(290,"@Inject()"),e.qZA(),e._uU(291,". Ce d\xe9corateur prend un seul argument - le jeton."),e.qZA(),e.TgZ(292,"span",10),e._UZ(293,"app-tabs",null,28),e.qZA(),e.TgZ(295,"pre")(296,"code",12),e._uU(297,"\n@Injectable()\nexport class CatsRepository {\n  constructor(@Inject('CONNECTION') connection: Connection) {}\n}\n"),e.qZA()(),e.TgZ(298,"pre")(299,"code",12),e._uU(300,"\n@Injectable()\n@Dependencies('CONNECTION')\nexport class CatsRepository {\n  constructor(connection) {}\n}\n"),e.qZA()(),e.TgZ(301,"blockquote",19)(302,"strong"),e._uU(303,"Astuce"),e.qZA(),e._uU(304," Le d\xe9corateur "),e.TgZ(305,"code"),e._uU(306,"@Inject()"),e.qZA(),e._uU(307," est import\xe9 du package "),e.TgZ(308,"code"),e._uU(309,"@nestjs/common"),e.qZA(),e._uU(310,".\n"),e.qZA(),e.TgZ(311,"p"),e._uU(312,"Bien que nous utilisions directement la cha\xeene "),e.TgZ(313,"code"),e._uU(314,"'CONNECTION'"),e.qZA(),e._uU(315," dans les exemples ci-dessus \xe0 des fins d'illustration, pour une organisation propre du code, il est pr\xe9f\xe9rable de d\xe9finir les tokens dans un fichier s\xe9par\xe9, tel que "),e.TgZ(316,"code"),e._uU(317,"constants.ts"),e.qZA(),e._uU(318,". Traitez-les comme vous le feriez avec des symboles ou des enums qui sont d\xe9finis dans leur propre fichier et import\xe9s l\xe0 o\xf9 c'est n\xe9cessaire."),e.qZA(),e.TgZ(319,"h4",29)(320,"span"),e._uU(321,"Fournisseurs de classe : "),e.TgZ(322,"code"),e._uU(323,"useClass"),e.qZA()()(),e.TgZ(324,"p"),e._uU(325,"La syntaxe "),e.TgZ(326,"code"),e._uU(327,"useClass"),e.qZA(),e._uU(328," vous permet de d\xe9terminer dynamiquement une classe \xe0 laquelle un jeton doit \xeatre r\xe9solu. Par exemple, supposons que nous ayons une classe abstraite (ou par d\xe9faut) "),e.TgZ(329,"code"),e._uU(330,"ConfigService"),e.qZA(),e._uU(331,". En fonction de l'environnement actuel, nous voulons que Nest fournisse une impl\xe9mentation diff\xe9rente du service de configuration. Le code suivant impl\xe9mente une telle strat\xe9gie."),e.qZA(),e.TgZ(332,"pre")(333,"code",12),e._uU(334,"\nconst configServiceProvider = {\n  provide: ConfigService,\n  useClass:\n    process.env.NODE_ENV === 'development'\n      ? DevelopmentConfigService\n      : ProductionConfigService,\n};\n\n@Module({\n  providers: [configServiceProvider],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(335,"p"),e._uU(336,"Examinons quelques d\xe9tails de cet exemple de code. Vous remarquerez que nous d\xe9finissons "),e.TgZ(337,"code"),e._uU(338,"configServiceProvider"),e.qZA(),e._uU(339," avec un objet litt\xe9ral d'abord, puis nous le passons dans la propri\xe9t\xe9 "),e.TgZ(340,"code"),e._uU(341,"providers"),e.qZA(),e._uU(342," du d\xe9corateur de module. C'est juste un peu d'organisation de code, mais c'est fonctionnellement \xe9quivalent aux exemples que nous avons utilis\xe9s jusqu'\xe0 pr\xe9sent dans ce chapitre."),e.qZA(),e.TgZ(343,"p"),e._uU(344,"De plus, nous avons utilis\xe9 le nom de la classe "),e.TgZ(345,"code"),e._uU(346,"ConfigService"),e.qZA(),e._uU(347," comme token. Pour toute classe qui d\xe9pend de "),e.TgZ(348,"code"),e._uU(349,"ConfigService"),e.qZA(),e._uU(350,", Nest injectera une instance de la classe fournie ("),e.TgZ(351,"code"),e._uU(352,"DevelopmentConfigService"),e.qZA(),e._uU(353," ou "),e.TgZ(354,"code"),e._uU(355,"ProductionConfigService"),e.qZA(),e._uU(356,") en rempla\xe7ant toute impl\xe9mentation par d\xe9faut qui aurait pu \xeatre d\xe9clar\xe9e ailleurs (par exemple, un "),e.TgZ(357,"code"),e._uU(358,"ConfigService"),e.qZA(),e._uU(359," d\xe9clar\xe9 avec un d\xe9corateur "),e.TgZ(360,"code"),e._uU(361,"@Injectable()"),e.qZA(),e._uU(362,")."),e.qZA(),e.TgZ(363,"h4",30)(364,"span"),e._uU(365,"Fournisseurs de factory : "),e.TgZ(366,"code"),e._uU(367,"useFactory"),e.qZA()()(),e.TgZ(368,"p"),e._uU(369,"La syntaxe "),e.TgZ(370,"code"),e._uU(371,"useFactory"),e.qZA(),e._uU(372," permet de cr\xe9er des fournisseurs "),e.TgZ(373,"strong"),e._uU(374,"dynamiquement"),e.qZA(),e._uU(375,". Le fournisseur r\xe9el sera fourni par la valeur renvoy\xe9e par une fonction \"factory\". La fonction factory peut \xeatre aussi simple ou complexe que n\xe9cessaire. Une fabrique simple ne peut d\xe9pendre d'aucun autre fournisseur. Une fabrique plus complexe peut elle-m\xeame injecter d'autres fournisseurs dont elle a besoin pour calculer son r\xe9sultat. Dans ce dernier cas, la syntaxe du fournisseur d'usine dispose d'une paire de m\xe9canismes connexes :"),e.qZA(),e.TgZ(376,"ol")(377,"li"),e._uU(378,"La fonction factory peut accepter des arguments (facultatifs)."),e.qZA(),e.TgZ(379,"li"),e._uU(380,"La propri\xe9t\xe9 (optionnelle) "),e.TgZ(381,"code"),e._uU(382,"inject"),e.qZA(),e._uU(383," accepte un tableau de fournisseurs que Nest va r\xe9soudre et passer comme arguments \xe0 la fonction factory pendant le processus d'instanciation. De plus, ces fournisseurs peuvent \xeatre marqu\xe9s comme optionnels. Les deux listes doivent \xeatre corr\xe9l\xe9es : Nest passera les instances de la liste "),e.TgZ(384,"code"),e._uU(385,"inject"),e.qZA(),e._uU(386," comme arguments \xe0 la fonction factory dans le m\xeame ordre. L'exemple ci-dessous le d\xe9montre."),e.qZA()(),e.TgZ(387,"span",10),e._UZ(388,"app-tabs",null,31),e.qZA(),e.TgZ(390,"pre")(391,"code",12),e._uU(392,"\nconst connectionProvider = {\n  provide: 'CONNECTION',\n  useFactory: (optionsProvider: OptionsProvider, optionalProvider?: string) => {\n    const options = optionsProvider.get();\n    return new DatabaseConnection(options);\n  },\n  inject: [OptionsProvider, { token: 'SomeOptionalProvider', optional: true }],\n  //       \\_____________/            \\__________________/\n  //        Ce fournisseur         Le fournisseur avec ce jeton\n  //       est obligatoire        peut \xeatre r\xe9solu en `undefined`.\n};\n\n@Module({\n  providers: [\n    connectionProvider,\n    OptionsProvider,\n    // { provide: 'SomeOptionalProvider', useValue: 'anything' },\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(393,"pre")(394,"code",12),e._uU(395,"\nconst connectionProvider = {\n  provide: 'CONNECTION',\n  useFactory: (optionsProvider, optionalProvider) => {\n    const options = optionsProvider.get();\n    return new DatabaseConnection(options);\n  },\n  inject: [OptionsProvider, { token: 'SomeOptionalProvider', optional: true }],\n  //       \\_____________/            \\__________________/\n  //        Ce fournisseur         Le fournisseur avec ce jeton\n  //       est obligatoire        peut \xeatre r\xe9solu en `undefined`.\n};\n\n@Module({\n  providers: [\n    connectionProvider,\n    OptionsProvider,\n    // { provide: 'SomeOptionalProvider', useValue: 'anything' },\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(396,"h4",32)(397,"span"),e._uU(398,"Fournisseurs d'alias : "),e.TgZ(399,"code"),e._uU(400,"useExisting"),e.qZA()()(),e.TgZ(401,"p"),e._uU(402,"La syntaxe "),e.TgZ(403,"code"),e._uU(404,"useExisting"),e.qZA(),e._uU(405," vous permet de cr\xe9er des alias pour des fournisseurs existants. Cela cr\xe9e deux fa\xe7ons d'acc\xe9der au m\xeame fournisseur. Dans l'exemple ci-dessous, le jeton (bas\xe9 sur une cha\xeene) "),e.TgZ(406,"code"),e._uU(407,"'AliasedLoggerService'"),e.qZA(),e._uU(408," est un alias pour le jeton (bas\xe9 sur une classe) "),e.TgZ(409,"code"),e._uU(410,"LoggerService"),e.qZA(),e._uU(411,". Supposons que nous ayons deux d\xe9pendances diff\xe9rentes, une pour "),e.TgZ(412,"code"),e._uU(413,"'AliasedLoggerService'' et une pour "),e.qZA(),e._uU(414,"LoggerService"),e.TgZ(415,"code"),e._uU(416,". Si les deux d\xe9pendances sont sp\xe9cifi\xe9es avec la port\xe9e "),e.qZA(),e._uU(417,"SINGLETON`, elles seront toutes deux r\xe9solues dans la m\xeame instance."),e.qZA(),e.TgZ(418,"pre")(419,"code",12),e._uU(420,"\n@Injectable()\nclass LoggerService {\n  /* implementation details */\n}\n\nconst loggerAliasProvider = {\n  provide: 'AliasedLoggerService',\n  useExisting: LoggerService,\n};\n\n@Module({\n  providers: [LoggerService, loggerAliasProvider],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(421,"h4",33)(422,"span"),e._uU(423,"Fournisseurs non bas\xe9s sur les services"),e.qZA()(),e.TgZ(424,"p"),e._uU(425,"Si les fournisseurs proposent souvent des services, ils ne sont pas limit\xe9s \xe0 cet usage. Un fournisseur peut fournir "),e.TgZ(426,"strong"),e._uU(427,"n'importe quelle"),e.qZA(),e._uU(428," valeur. Par exemple, un fournisseur peut fournir un tableau d'objets de configuration bas\xe9s sur l'environnement actuel, comme indiqu\xe9 ci-dessous :"),e.qZA(),e.TgZ(429,"pre")(430,"code",12),e._uU(431,"\nconst configFactory = {\n  provide: 'CONFIG',\n  useFactory: () => {\n    return process.env.NODE_ENV === 'development' ? devConfig : prodConfig;\n  },\n};\n\n@Module({\n  providers: [configFactory],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(432,"h4",34)(433,"span"),e._uU(434,"Exporter un fournisseur personnalis\xe9"),e.qZA()(),e.TgZ(435,"p"),e._uU(436,"Comme tout fournisseur, un fournisseur personnalis\xe9 est limit\xe9 au module qui le d\xe9clare. Pour qu'il soit visible par d'autres modules, il doit \xeatre export\xe9. Pour exporter un fournisseur personnalis\xe9, nous pouvons utiliser son jeton ou l'objet complet du fournisseur."),e.qZA(),e.TgZ(437,"p"),e._uU(438,"L'exemple suivant montre l'exportation \xe0 l'aide du jeton :"),e.qZA(),e.TgZ(439,"span",10),e._UZ(440,"app-tabs",null,35),e.qZA(),e.TgZ(442,"pre")(443,"code",12),e._uU(444,"\nconst connectionFactory = {\n  provide: 'CONNECTION',\n  useFactory: (optionsProvider: OptionsProvider) => {\n    const options = optionsProvider.get();\n    return new DatabaseConnection(options);\n  },\n  inject: [OptionsProvider],\n};\n\n@Module({\n  providers: [connectionFactory],\n  exports: ['CONNECTION'],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(445,"pre")(446,"code",12),e._uU(447,"\nconst connectionFactory = {\n  provide: 'CONNECTION',\n  useFactory: (optionsProvider) => {\n    const options = optionsProvider.get();\n    return new DatabaseConnection(options);\n  },\n  inject: [OptionsProvider],\n};\n\n@Module({\n  providers: [connectionFactory],\n  exports: ['CONNECTION'],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(448,"p"),e._uU(449,"Il est \xe9galement possible d'exporter avec l'objet complet du fournisseur :"),e.qZA(),e.TgZ(450,"span",10),e._UZ(451,"app-tabs",null,36),e.qZA(),e.TgZ(453,"pre")(454,"code",12),e._uU(455,"\nconst connectionFactory = {\n  provide: 'CONNECTION',\n  useFactory: (optionsProvider: OptionsProvider) => {\n    const options = optionsProvider.get();\n    return new DatabaseConnection(options);\n  },\n  inject: [OptionsProvider],\n};\n\n@Module({\n  providers: [connectionFactory],\n  exports: [connectionFactory],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(456,"pre")(457,"code",12),e._uU(458,"\nconst connectionFactory = {\n  provide: 'CONNECTION',\n  useFactory: (optionsProvider) => {\n    const options = optionsProvider.get();\n    return new DatabaseConnection(options);\n  },\n  inject: [OptionsProvider],\n};\n\n@Module({\n  providers: [connectionFactory],\n  exports: [connectionFactory],\n})\nexport class AppModule {}\n"),e.qZA()()()),2&o){const u=e.MAs(38),r=e.MAs(51),a=e.MAs(64),l=e.MAs(294),g=e.MAs(389),m=e.MAs(441),_=e.MAs(452);e.xp6(35),e.hij(" ",e.xi3(36,27,"cats.service",u.isJsActive),"\n"),e.xp6(4),e.ekj("hide",u.isJsActive),e.xp6(3),e.ekj("hide",!u.isJsActive),e.xp6(6),e.hij(" ",e.xi3(49,30,"cats.controller",r.isJsActive),"\n"),e.xp6(4),e.ekj("hide",r.isJsActive),e.xp6(3),e.ekj("hide",!r.isJsActive),e.xp6(6),e.hij(" ",e.xi3(62,33,"app.module",a.isJsActive),"\n"),e.xp6(234),e.ekj("hide",l.isJsActive),e.xp6(3),e.ekj("hide",!l.isJsActive),e.xp6(92),e.ekj("hide",g.isJsActive),e.xp6(3),e.ekj("hide",!g.isJsActive),e.xp6(49),e.ekj("hide",m.isJsActive),e.xp6(3),e.ekj("hide",!m.isJsActive),e.xp6(8),e.ekj("hide",_.isJsActive),e.xp6(3),e.ekj("hide",!_.isJsActive)}},dependencies:[U.n,p.U,q.f,A.F],encapsulation:2,changeDetection:0})),n})();var T=c(6843);let x=(()=>{class n extends d.y{}return(0,i.Z)(n,"\u0275fac",function(){let t;return function(s){return(t||(t=e.n5z(n)))(s||n)}}()),(0,i.Z)(n,"\u0275cmp",e.Xpm({type:n,selectors:[["app-dynamic-modules"]],features:[e.qOj],decls:879,vars:28,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/Lou8is/docs.nestjs.fr/edit/main/content/fundamentals/dynamic-modules.md","aria-label","Proposer des modifications","title","Proposer des modifications"],[1,"fas","fa-edit"],["id","modules-dynamiques"],["routerLink","/modules"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/modules#dynamic-modules"],["appAnchor","","id","introduction"],["routerLink","/providers"],["routerLink","/controllers"],[1,"language-typescript"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/fundamentals/custom-providers"],["appAnchor","","id","cas-dutilisation-dun-module-dynamique"],["appAnchor","","id","exemple-de-module-de-configuration"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/techniques/configuration#service"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/25-dynamic-modules"],[1,"info"],["appAnchor","","id","configuration-du-module"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/fundamentals/custom-providers#fournisseurs-non-bas%C3%A9s-sur-les-services"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/fundamentals/custom-providers#jetons-de-fournisseur-non-bas%C3%A9s-sur-une-classe"],["appAnchor","","id","exemple"],["appAnchor","","id","lignes-directrices-pour-la-communaut\xe9"],["appAnchor","","id","constructeur-de-modules-configurables"],[1,"filename"],["app15ba71f149117bd91fc26edba2ca545f48e7b5a9",""],["appAnchor","","id","cl\xe9-de-m\xe9thode-personnalis\xe9e"],["app1a8f54e02438a418e63ad284a1a8ff1fc6bd522d",""],["appAnchor","","id","classe-usine-doptions-personnalis\xe9es"],["app50545adea2346b3b3151fb44c4f090118343801c",""],["appAnchor","","id","options-suppl\xe9mentaires"],["href","/modules#modules-dynamiques"],["appAnchor","","id","\xe9tendre-les-m\xe9thodes-g\xe9n\xe9r\xe9es-automatiquement"]],template:function(o,s){if(1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Modules dynamiques"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Le "),e.TgZ(9,"a",6),e._uU(10,"chapitre Modules"),e.qZA(),e._uU(11," couvre les bases des modules Nest et comprend une br\xe8ve introduction aux "),e.TgZ(12,"a",7),e._uU(13,"modules dynamiques"),e.qZA(),e._uU(14,". Ce chapitre d\xe9veloppe le sujet des modules dynamiques. \xc0 l'issue de ce chapitre, vous devriez avoir une bonne compr\xe9hension de ce que sont les modules dynamiques, ainsi que de la mani\xe8re et du moment de les utiliser."),e.qZA(),e.TgZ(15,"h4",8)(16,"span"),e._uU(17,"Introduction"),e.qZA()(),e.TgZ(18,"p"),e._uU(19,"La plupart des exemples de code d'application pr\xe9sent\xe9s dans la section "),e.TgZ(20,"strong"),e._uU(21,"Aper\xe7u"),e.qZA(),e._uU(22," de la documentation utilisent des modules r\xe9guliers ou statiques. Les modules d\xe9finissent des groupes de composants tels que les "),e.TgZ(23,"a",9),e._uU(24,"fournisseurs"),e.qZA(),e._uU(25," et les "),e.TgZ(26,"a",10),e._uU(27,"contr\xf4leurs"),e.qZA(),e._uU(28," qui s'int\xe8grent en tant que partie modulaire d'une application globale. Ils fournissent un contexte d'ex\xe9cution, ou champ d'application, pour ces composants. Par exemple, les fournisseurs d\xe9finis dans un module sont visibles par les autres membres du module sans qu'il soit n\xe9cessaire de les exporter. Lorsqu'un fournisseur doit \xeatre visible en dehors d'un module, il est d'abord export\xe9 de son module h\xf4te, puis import\xe9 dans son module consommateur."),e.qZA(),e.TgZ(29,"p"),e._uU(30,"Prenons un exemple familier."),e.qZA(),e.TgZ(31,"p"),e._uU(32,"Tout d'abord, nous allons d\xe9finir un "),e.TgZ(33,"code"),e._uU(34,"UsersModule"),e.qZA(),e._uU(35," pour fournir et exporter un "),e.TgZ(36,"code"),e._uU(37,"UsersService"),e.qZA(),e._uU(38,". "),e.TgZ(39,"code"),e._uU(40,"UsersModule"),e.qZA(),e._uU(41," est le module "),e.TgZ(42,"strong"),e._uU(43,"h\xf4te"),e.qZA(),e._uU(44," de "),e.TgZ(45,"code"),e._uU(46,"UsersService"),e.qZA(),e._uU(47,"."),e.qZA(),e.TgZ(48,"pre")(49,"code",11),e._uU(50,"\nimport { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\n\n@Module({\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n"),e.qZA()(),e.TgZ(51,"p"),e._uU(52,"Ensuite, nous allons d\xe9finir un "),e.TgZ(53,"code"),e._uU(54,"AuthModule"),e.qZA(),e._uU(55,", qui importe "),e.TgZ(56,"code"),e._uU(57,"UsersModule"),e.qZA(),e._uU(58,", rendant les fournisseurs export\xe9s par "),e.TgZ(59,"code"),e._uU(60,"UsersModule"),e.qZA(),e._uU(61," disponibles dans "),e.TgZ(62,"code"),e._uU(63,"AuthModule"),e.qZA(),e._uU(64," :"),e.qZA(),e.TgZ(65,"pre")(66,"code",11),e._uU(67,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [UsersModule],\n  providers: [AuthService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n"),e.qZA()(),e.TgZ(68,"p"),e._uU(69,"Ces constructions nous permettent d'injecter "),e.TgZ(70,"code"),e._uU(71,"UsersService"),e.qZA(),e._uU(72," dans, par exemple, le "),e.TgZ(73,"code"),e._uU(74,"AuthService"),e.qZA(),e._uU(75," qui est h\xe9berg\xe9 dans "),e.TgZ(76,"code"),e._uU(77,"AuthModule"),e.qZA(),e._uU(78," :"),e.qZA(),e.TgZ(79,"pre")(80,"code",11),e._uU(81,"\nimport { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(private usersService: UsersService) {}\n  /*\n    Impl\xe9mentation qui utilise this.usersService\n  */\n}\n"),e.qZA()(),e.TgZ(82,"p"),e._uU(83,"C'est ce que nous appellerons la liaison "),e.TgZ(84,"strong"),e._uU(85,"statique"),e.qZA(),e._uU(86," des modules. Toutes les informations dont Nest a besoin pour relier les modules entre eux ont d\xe9j\xe0 \xe9t\xe9 d\xe9clar\xe9es dans les modules h\xf4te et consommateur. D\xe9cortiquons ce qui se passe durant ce processus. Nest rend "),e.TgZ(87,"code"),e._uU(88,"UsersService"),e.qZA(),e._uU(89," disponible dans "),e.TgZ(90,"code"),e._uU(91,"AuthModule"),e.qZA(),e._uU(92," par :"),e.qZA(),e.TgZ(93,"ol")(94,"li"),e._uU(95,"L'instanciation de "),e.TgZ(96,"code"),e._uU(97,"UsersModule"),e.qZA(),e._uU(98,", y compris l'importation transitive d'autres modules que "),e.TgZ(99,"code"),e._uU(100,"UsersModule"),e.qZA(),e._uU(101," consomme lui-m\xeame, et la r\xe9solution transitive de toutes les d\xe9pendances (voir les "),e.TgZ(102,"a",12),e._uU(103,"fournisseurs personnalis\xe9s"),e.qZA(),e._uU(104,")."),e.qZA(),e.TgZ(105,"li"),e._uU(106,"L'instanciation de "),e.TgZ(107,"code"),e._uU(108,"AuthModule"),e.qZA(),e._uU(109,", et la mise \xe0 disposition des fournisseurs export\xe9s de "),e.TgZ(110,"code"),e._uU(111,"UsersModule"),e.qZA(),e._uU(112," aux composants de "),e.TgZ(113,"code"),e._uU(114,"AuthModule"),e.qZA(),e._uU(115," (comme s'ils avaient \xe9t\xe9 d\xe9clar\xe9s dans "),e.TgZ(116,"code"),e._uU(117,"AuthModule"),e.qZA(),e._uU(118,")."),e.qZA(),e.TgZ(119,"li"),e._uU(120,"L'injection d'une instance de "),e.TgZ(121,"code"),e._uU(122,"UsersService"),e.qZA(),e._uU(123," dans "),e.TgZ(124,"code"),e._uU(125,"AuthService"),e.qZA(),e._uU(126,"."),e.qZA()(),e.TgZ(127,"h4",13)(128,"span"),e._uU(129,"Cas d'utilisation d'un module dynamique"),e.qZA()(),e.TgZ(130,"p"),e._uU(131,"Avec la liaison statique des modules, le module consommateur n'a pas la possibilit\xe9 d'influer sur la configuration des fournisseurs du module h\xf4te. En quoi cela est-il important ? Prenons le cas d'un module \xe0 usage g\xe9n\xe9ral qui doit se comporter diff\xe9remment selon les cas d'utilisation. Ce cas est analogue au concept de \"plugin\" dans de nombreux syst\xe8mes, o\xf9 une fonction g\xe9n\xe9rique n\xe9cessite une certaine configuration avant de pouvoir \xeatre utilis\xe9e par un consommateur."),e.qZA(),e.TgZ(132,"p"),e._uU(133,"Un bon exemple avec Nest est un "),e.TgZ(134,"strong"),e._uU(135,"module de configuration"),e.qZA(),e._uU(136,". De nombreuses applications trouvent utile d'externaliser les d\xe9tails de la configuration en utilisant un module de configuration. Cela facilite la modification dynamique des param\xe8tres de l'application dans diff\xe9rents d\xe9ploiements : par exemple, une base de donn\xe9es de d\xe9veloppement pour les d\xe9veloppeurs, une base de donn\xe9es de mise en sc\xe8ne pour l'environnement de mise en sc\xe8ne/de test, etc. En d\xe9l\xe9guant la gestion des param\xe8tres de configuration \xe0 un module de configuration, le code source de l'application reste ind\xe9pendant des param\xe8tres de configuration."),e.qZA(),e.TgZ(137,"p"),e._uU(138,"Le probl\xe8me est que le module de configuration lui-m\xeame, puisqu'il est g\xe9n\xe9rique (semblable \xe0 un \"plugin\"), doit \xeatre personnalis\xe9 par le module qui le consomme. C'est l\xe0 que les "),e.TgZ(139,"em"),e._uU(140,"modules dynamiques"),e.qZA(),e._uU(141," entrent en jeu. En utilisant les caract\xe9ristiques des modules dynamiques, nous pouvons rendre notre module de configuration "),e.TgZ(142,"strong"),e._uU(143,"dynamique"),e.qZA(),e._uU(144," afin que le module consommateur puisse utiliser une API pour contr\xf4ler la fa\xe7on dont le module de configuration est personnalis\xe9 au moment o\xf9 il est import\xe9."),e.qZA(),e.TgZ(145,"p"),e._uU(146,"En d'autres termes, les modules dynamiques fournissent une API permettant d'importer un module dans un autre et de personnaliser les propri\xe9t\xe9s et le comportement de ce module lorsqu'il est import\xe9, contrairement aux liaisons statiques que nous avons vues jusqu'\xe0 pr\xe9sent."),e.qZA(),e.TgZ(147,"p"),e._UZ(148,"app-banner-devtools"),e.qZA(),e.TgZ(149,"h4",14)(150,"span"),e._uU(151,"Exemple de module de configuration"),e.qZA()(),e.TgZ(152,"p"),e._uU(153,"Nous utiliserons la version de base du code d'exemple du "),e.TgZ(154,"a",15),e._uU(155,"chapitre sur la configuration"),e.qZA(),e._uU(156," pour cette section. La version compl\xe9t\xe9e \xe0 la fin de ce chapitre est disponible sous la forme d'un "),e.TgZ(157,"a",16),e._uU(158,"exemple ici"),e.qZA(),e._uU(159,"."),e.qZA(),e.TgZ(160,"p"),e._uU(161,"Notre exigence est de faire en sorte que "),e.TgZ(162,"code"),e._uU(163,"ConfigModule"),e.qZA(),e._uU(164," accepte un objet "),e.TgZ(165,"code"),e._uU(166,"options"),e.qZA(),e._uU(167," pour le personnaliser. Voici la fonctionnalit\xe9 que nous voulons supporter. L'exemple de base code en dur l'emplacement du fichier "),e.TgZ(168,"code"),e._uU(169,".env"),e.qZA(),e._uU(170," dans le dossier racine du projet. Supposons que nous voulions rendre cela configurable, de sorte que vous puissiez g\xe9rer vos fichiers "),e.TgZ(171,"code"),e._uU(172,".env"),e.qZA(),e._uU(173," dans n'importe quel dossier de votre choix. Par exemple, imaginez que vous vouliez stocker vos diff\xe9rents fichiers "),e.TgZ(174,"code"),e._uU(175,".env"),e.qZA(),e._uU(176," dans un dossier sous la racine du projet appel\xe9 "),e.TgZ(177,"code"),e._uU(178,"config"),e.qZA(),e._uU(179," (c'est-\xe0-dire un dossier fr\xe8re de "),e.TgZ(180,"code"),e._uU(181,"src"),e.qZA(),e._uU(182,"). Vous aimeriez pouvoir choisir des dossiers diff\xe9rents lorsque vous utilisez le module "),e.TgZ(183,"code"),e._uU(184,"ConfigModule"),e.qZA(),e._uU(185," dans diff\xe9rents projets."),e.qZA(),e.TgZ(186,"p"),e._uU(187,"Les modules dynamiques nous donnent la possibilit\xe9 de passer des param\xe8tres au module import\xe9 afin de modifier son comportement. Voyons comment cela fonctionne. Il est utile de partir de l'objectif final, c'est \xe0 dire de la fa\xe7on dont cela peut se pr\xe9senter du point de vue du module consommateur, et de travailler ensuite en sens inverse. Tout d'abord, revoyons rapidement l'exemple de l'importation "),e.TgZ(188,"em"),e._uU(189,"statique"),e.qZA(),e._uU(190," du "),e.TgZ(191,"code"),e._uU(192,"ConfigModule"),e.qZA(),e._uU(193," (c'est \xe0 dire une approche qui n'a aucune capacit\xe9 \xe0 influencer le comportement du module import\xe9). Portez une attention particuli\xe8re au tableau "),e.TgZ(194,"code"),e._uU(195,"imports"),e.qZA(),e._uU(196," dans le d\xe9corateur "),e.TgZ(197,"code"),e._uU(198,"@Module()"),e.qZA(),e._uU(199," :"),e.qZA(),e.TgZ(200,"pre")(201,"code",11),e._uU(202,"\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from './config/config.module';\n\n@Module({\n  imports: [ConfigModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(203,"p"),e._uU(204,"Consid\xe9rons ce \xe0 quoi pourrait ressembler un import de "),e.TgZ(205,"em"),e._uU(206,"module dynamique"),e.qZA(),e._uU(207,", o\xf9 nous passons un objet de configuration. Comparez la diff\xe9rence dans le tableau "),e.TgZ(208,"code"),e._uU(209,"imports"),e.qZA(),e._uU(210," entre ces deux exemples :"),e.qZA(),e.TgZ(211,"pre")(212,"code",11),e._uU(213,"\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from './config/config.module';\n\n@Module({\n  imports: [ConfigModule.register({ folder: './config' })],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(214,"p"),e._uU(215,"Voyons ce qui se passe dans l'exemple dynamique ci-dessus. Quelles-en sont les parties mobiles ?"),e.qZA(),e.TgZ(216,"ol")(217,"li")(218,"code"),e._uU(219,"ConfigModule"),e.qZA(),e._uU(220," est une classe normale, nous pouvons donc en d\xe9duire qu'elle doit avoir une "),e.TgZ(221,"strong"),e._uU(222,"m\xe9thode statique"),e.qZA(),e._uU(223," appel\xe9e "),e.TgZ(224,"code"),e._uU(225,"register()"),e.qZA(),e._uU(226,". Nous savons qu'elle est statique parce que nous l'appelons sur la classe "),e.TgZ(227,"code"),e._uU(228,"ConfigModule"),e.qZA(),e._uU(229,", et non sur une "),e.TgZ(230,"strong"),e._uU(231,"instance"),e.qZA(),e._uU(232," de la classe. Note : cette m\xe9thode, que nous allons cr\xe9er bient\xf4t, peut avoir n'importe quel nom arbitraire, mais par convention nous devrions l'appeler soit "),e.TgZ(233,"code"),e._uU(234,"forRoot()"),e.qZA(),e._uU(235," soit "),e.TgZ(236,"code"),e._uU(237,"register()"),e.qZA(),e._uU(238,"."),e.qZA(),e.TgZ(239,"li"),e._uU(240,"La m\xe9thode "),e.TgZ(241,"code"),e._uU(242,"register()"),e.qZA(),e._uU(243," est d\xe9finie par nous, donc nous pouvons accepter n'importe quel argument d'entr\xe9e. Dans ce cas, nous allons accepter un simple objet "),e.TgZ(244,"code"),e._uU(245,"options"),e.qZA(),e._uU(246," avec les propri\xe9t\xe9s appropri\xe9es, ce qui est le cas typique."),e.qZA(),e.TgZ(247,"li"),e._uU(248,"Nous pouvons en d\xe9duire que la m\xe9thode "),e.TgZ(249,"code"),e._uU(250,"register()"),e.qZA(),e._uU(251," doit retourner quelque chose comme un "),e.TgZ(252,"code"),e._uU(253,"module"),e.qZA(),e._uU(254," puisque sa valeur de retour appara\xeet dans la liste famili\xe8re "),e.TgZ(255,"code"),e._uU(256,"imports"),e.qZA(),e._uU(257,", qui, comme nous l'avons vu jusqu'\xe0 pr\xe9sent, inclut une liste de modules."),e.qZA()(),e.TgZ(258,"p"),e._uU(259,"En fait, ce que notre m\xe9thode "),e.TgZ(260,"code"),e._uU(261,"register()"),e.qZA(),e._uU(262," retournera est un "),e.TgZ(263,"code"),e._uU(264,"DynamicModule"),e.qZA(),e._uU(265,". Un module dynamique n'est rien d'autre qu'un module cr\xe9\xe9 \xe0 l'ex\xe9cution, avec les m\xeames propri\xe9t\xe9s qu'un module statique, plus une propri\xe9t\xe9 suppl\xe9mentaire appel\xe9e "),e.TgZ(266,"code"),e._uU(267,"module"),e.qZA(),e._uU(268,". Passons rapidement en revue un exemple de d\xe9claration de module statique, en pr\xeatant une attention particuli\xe8re aux options de module pass\xe9es au d\xe9corateur :"),e.qZA(),e.TgZ(269,"pre")(270,"code",11),e._uU(271,"\n@Module({\n  imports: [DogsModule],\n  controllers: [CatsController],\n  providers: [CatsService],\n  exports: [CatsService]\n})\n"),e.qZA()(),e.TgZ(272,"p"),e._uU(273,"Les modules dynamiques doivent renvoyer un objet ayant exactement la m\xeame interface, plus une propri\xe9t\xe9 suppl\xe9mentaire appel\xe9e "),e.TgZ(274,"code"),e._uU(275,"module"),e.qZA(),e._uU(276,". La propri\xe9t\xe9 "),e.TgZ(277,"code"),e._uU(278,"module"),e.qZA(),e._uU(279," sert de nom au module et doit \xeatre identique au nom de la classe du module, comme le montre l'exemple ci-dessous."),e.qZA(),e.TgZ(280,"blockquote",17)(281,"strong"),e._uU(282,"Astuce"),e.qZA(),e._uU(283," Pour un module dynamique, toutes les propri\xe9t\xe9s de l'objet module options sont optionnelles "),e.TgZ(284,"strong"),e._uU(285,"sauf"),e.qZA(),e.TgZ(286,"code"),e._uU(287,"module"),e.qZA(),e._uU(288,".\n"),e.qZA(),e.TgZ(289,"p"),e._uU(290,"Qu'en est-il de la m\xe9thode statique "),e.TgZ(291,"code"),e._uU(292,"register()"),e.qZA(),e._uU(293," ? Nous pouvons maintenant voir que son r\xf4le est de retourner un objet qui poss\xe8de l'interface "),e.TgZ(294,"code"),e._uU(295,"DynamicModule"),e.qZA(),e._uU(296,". Lorsque nous l'appelons, nous fournissons effectivement un module \xe0 la liste "),e.TgZ(297,"code"),e._uU(298,"imports"),e.qZA(),e._uU(299,", de la m\xeame mani\xe8re que nous le ferions dans le cas statique en listant le nom de la classe du module. En d'autres termes, l'API de module dynamique retourne simplement un module, mais plut\xf4t que de fixer les propri\xe9t\xe9s dans le d\xe9corateur "),e.TgZ(300,"code"),e._uU(301,"@Module"),e.qZA(),e._uU(302,", nous les sp\xe9cifions programmatiquement."),e.qZA(),e.TgZ(303,"p"),e._uU(304,"Il reste encore quelques d\xe9tails \xe0 couvrir pour que le tout soit bien complet :"),e.qZA(),e.TgZ(305,"ol")(306,"li"),e._uU(307,"Nous pouvons maintenant affirmer que la propri\xe9t\xe9 "),e.TgZ(308,"code"),e._uU(309,"@Module()"),e.qZA(),e._uU(310," du d\xe9corateur "),e.TgZ(311,"code"),e._uU(312,"@imports"),e.qZA(),e._uU(313," peut prendre non seulement un nom de classe de module (par exemple, "),e.TgZ(314,"code"),e._uU(315,"imports : [UsersModule]"),e.qZA(),e._uU(316,"), mais aussi une fonction "),e.TgZ(317,"strong"),e._uU(318,"renvoyant"),e.qZA(),e._uU(319," un module dynamique (par exemple, "),e.TgZ(320,"code"),e._uU(321,"imports : [ConfigModule.register(...)]"),e.qZA(),e._uU(322,")."),e.qZA(),e.TgZ(323,"li"),e._uU(324,"Un module dynamique peut lui-m\xeame importer d'autres modules. Nous ne le ferons pas dans cet exemple, mais si le module dynamique d\xe9pend de fournisseurs d'autres modules, vous les importerez en utilisant la propri\xe9t\xe9 optionnelle "),e.TgZ(325,"code"),e._uU(326,"imports"),e.qZA(),e._uU(327,". Encore une fois, c'est exactement analogue \xe0 la fa\xe7on dont vous d\xe9clareriez des m\xe9tadonn\xe9es pour un module statique en utilisant le d\xe9corateur "),e.TgZ(328,"code"),e._uU(329,"@Module()"),e.qZA(),e._uU(330,"."),e.qZA()(),e.TgZ(331,"p"),e._uU(332,"Forts de cette compr\xe9hension, nous pouvons maintenant voir \xe0 quoi doit ressembler notre d\xe9claration dynamique "),e.TgZ(333,"code"),e._uU(334,"ConfigModule"),e.qZA(),e._uU(335,". Essayons de le faire."),e.qZA(),e.TgZ(336,"pre")(337,"code",11),e._uU(338,"\nimport { DynamicModule, Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\n\n@Module({})\nexport class ConfigModule {\n  static register(): DynamicModule {\n    return {\n      module: ConfigModule,\n      providers: [ConfigService],\n      exports: [ConfigService],\n    };\n  }\n}\n"),e.qZA()(),e.TgZ(339,"p"),e._uU(340,"Il devrait maintenant \xeatre clair de quelle mani\xe8re les diff\xe9rents \xe9l\xe9ments s'articulent entre eux. L'appel \xe0 "),e.TgZ(341,"code"),e._uU(342,"ConfigModule.register(...)"),e.qZA(),e._uU(343," renvoie un objet "),e.TgZ(344,"code"),e._uU(345,"DynamicModule"),e.qZA(),e._uU(346," avec des propri\xe9t\xe9s qui sont essentiellement les m\xeames que celles que, jusqu'\xe0 pr\xe9sent, nous avons fournies comme m\xe9tadonn\xe9es via le d\xe9corateur "),e.TgZ(347,"code"),e._uU(348,"@Module()"),e.qZA(),e._uU(349,"."),e.qZA(),e.TgZ(350,"blockquote",17)(351,"strong"),e._uU(352,"Astuce"),e.qZA(),e._uU(353," Importez "),e.TgZ(354,"code"),e._uU(355,"DynamicModule"),e.qZA(),e._uU(356," depuis "),e.TgZ(357,"code"),e._uU(358,"@nestjs/common"),e.qZA(),e._uU(359,".\n"),e.qZA(),e.TgZ(360,"p"),e._uU(361,"Notre module dynamique n'est pas encore tr\xe8s int\xe9ressant, cependant, car nous n'avons pas introduit de capacit\xe9 \xe0 "),e.TgZ(362,"strong"),e._uU(363,"configurer"),e.qZA(),e._uU(364," le module comme nous avons dit que nous aimerions le faire. Nous allons y rem\xe9dier."),e.qZA(),e.TgZ(365,"h4",18)(366,"span"),e._uU(367,"Configuration du module"),e.qZA()(),e.TgZ(368,"p"),e._uU(369,"La solution \xe9vidente pour personnaliser le comportement du "),e.TgZ(370,"code"),e._uU(371,"ConfigModule"),e.qZA(),e._uU(372," est de lui passer un objet "),e.TgZ(373,"code"),e._uU(374,"options"),e.qZA(),e._uU(375," dans la m\xe9thode statique "),e.TgZ(376,"code"),e._uU(377,"register()"),e.qZA(),e._uU(378,", comme nous l'avons devin\xe9 plus haut. Regardons encore une fois la propri\xe9t\xe9 "),e.TgZ(379,"code"),e._uU(380,"imports"),e.qZA(),e._uU(381," de notre module de consommation :"),e.qZA(),e.TgZ(382,"pre")(383,"code",11),e._uU(384,"\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from './config/config.module';\n\n@Module({\n  imports: [ConfigModule.register({ folder: './config' })],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(385,"p"),e._uU(386,"Cela permet de passer un objet "),e.TgZ(387,"code"),e._uU(388,"options"),e.qZA(),e._uU(389," \xe0 notre module dynamique. Comment utiliser ensuite cet objet "),e.TgZ(390,"code"),e._uU(391,"options"),e.qZA(),e._uU(392," dans le "),e.TgZ(393,"code"),e._uU(394,"Module de Configuration"),e.qZA(),e._uU(395," ? R\xe9fl\xe9chissons-y un instant. Nous savons que notre "),e.TgZ(396,"code"),e._uU(397,"ConfigModule"),e.qZA(),e._uU(398," est fondamentalement un h\xf4te pour fournir et exporter un service injectable - le "),e.TgZ(399,"code"),e._uU(400,"ConfigService"),e.qZA(),e._uU(401," - pour qu'il soit utilis\xe9 par d'autres fournisseurs. C'est en fait notre "),e.TgZ(402,"code"),e._uU(403,"ConfigService"),e.qZA(),e._uU(404," qui a besoin de lire l'objet "),e.TgZ(405,"code"),e._uU(406,"options"),e.qZA(),e._uU(407," pour personnaliser son comportement. Supposons pour l'instant que nous sachions comment obtenir les "),e.TgZ(408,"code"),e._uU(409,"options"),e.qZA(),e._uU(410," de la m\xe9thode "),e.TgZ(411,"code"),e._uU(412,"register()"),e.qZA(),e._uU(413," dans le "),e.TgZ(414,"code"),e._uU(415,"ConfigService"),e.qZA(),e._uU(416,". Avec cette supposition, nous pouvons faire quelques changements au service pour personnaliser son comportement bas\xe9 sur les propri\xe9t\xe9s de l'objet "),e.TgZ(417,"code"),e._uU(418,"options"),e.qZA(),e._uU(419,". ("),e.TgZ(420,"strong"),e._uU(421,"Remarque"),e.qZA(),e._uU(422," : pour l'instant, puisque nous n'avons pas encore d\xe9termin\xe9 comment le passer, nous allons coder en dur "),e.TgZ(423,"code"),e._uU(424,"options"),e.qZA(),e._uU(425,". Nous corrigerons cela dans une minute)."),e.qZA(),e.TgZ(426,"pre")(427,"code",11),e._uU(428,"\nimport { Injectable } from '@nestjs/common';\nimport * as dotenv from 'dotenv';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { EnvConfig } from './interfaces';\n\n@Injectable()\nexport class ConfigService {\n  private readonly envConfig: EnvConfig;\n\n  constructor() {\n    const options = { folder: './config' };\n\n    const filePath = `${process.env.NODE_ENV || 'development'}.env`;\n    const envFile = path.resolve(__dirname, '../../', options.folder, filePath);\n    this.envConfig = dotenv.parse(fs.readFileSync(envFile));\n  }\n\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n}\n"),e.qZA()(),e.TgZ(429,"p"),e._uU(430,"Maintenant notre "),e.TgZ(431,"code"),e._uU(432,"ConfigService"),e.qZA(),e._uU(433," sait comment trouver le fichier "),e.TgZ(434,"code"),e._uU(435,".env"),e.qZA(),e._uU(436," dans le dossier que nous avons sp\xe9cifi\xe9 dans "),e.TgZ(437,"code"),e._uU(438,"options"),e.qZA(),e._uU(439,"."),e.qZA(),e.TgZ(440,"p"),e._uU(441,"Notre t\xe2che restante est d'injecter d'une mani\xe8re ou d'une autre l'objet "),e.TgZ(442,"code"),e._uU(443,"options"),e.qZA(),e._uU(444," de l'\xe9tape "),e.TgZ(445,"code"),e._uU(446,"register()"),e.qZA(),e._uU(447," dans notre "),e.TgZ(448,"code"),e._uU(449,"ConfigService"),e.qZA(),e._uU(450,". Et bien s\xfbr, nous allons utiliser l'injection de d\xe9pendance pour le faire. C'est un point cl\xe9, alors assurez-vous de bien le comprendre. Notre "),e.TgZ(451,"code"),e._uU(452,"ConfigModule"),e.qZA(),e._uU(453," fournit "),e.TgZ(454,"code"),e._uU(455,"ConfigService"),e.qZA(),e._uU(456,". Le "),e.TgZ(457,"code"),e._uU(458,"ConfigService"),e.qZA(),e._uU(459," d\xe9pend \xe0 son tour de l'objet "),e.TgZ(460,"code"),e._uU(461,"options"),e.qZA(),e._uU(462," qui n'est fourni qu'\xe0 l'ex\xe9cution. Donc, \xe0 l'ex\xe9cution, nous devrons d'abord lier l'objet "),e.TgZ(463,"code"),e._uU(464,"options"),e.qZA(),e._uU(465," au conteneur IoC de Nest, et ensuite l'injecter dans notre "),e.TgZ(466,"code"),e._uU(467,"ConfigService"),e.qZA(),e._uU(468,". Rappelez-vous du chapitre "),e.TgZ(469,"strong"),e._uU(470,"Fournisseurs personnalis\xe9s"),e.qZA(),e._uU(471," que les fournisseurs peuvent "),e.TgZ(472,"a",19),e._uU(473,"inclure n'importe quelle valeur"),e.qZA(),e._uU(474," et pas seulement les services, donc nous pouvons utiliser l'injection de d\xe9pendances pour g\xe9rer un simple objet "),e.TgZ(475,"code"),e._uU(476,"options"),e.qZA(),e._uU(477,"."),e.qZA(),e.TgZ(478,"p"),e._uU(479,"Commen\xe7ons par lier l'objet options au conteneur IoC. Nous le faisons dans notre m\xe9thode statique "),e.TgZ(480,"code"),e._uU(481,"register()"),e.qZA(),e._uU(482,". Souvenez-vous que nous construisons dynamiquement un module, et qu'une des propri\xe9t\xe9s d'un module est sa liste de fournisseurs. Nous devons donc d\xe9finir notre objet options comme un fournisseur. Cela le rendra injectable dans le "),e.TgZ(483,"code"),e._uU(484,"ConfigService"),e.qZA(),e._uU(485,", ce dont nous profiterons dans l'\xe9tape suivante. Dans le code ci-dessous, faites attention \xe0 la liste "),e.TgZ(486,"code"),e._uU(487,"providers"),e.qZA(),e._uU(488," :"),e.qZA(),e.TgZ(489,"pre")(490,"code",11),e._uU(491,"\nimport { DynamicModule, Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\n\n@Module({})\nexport class ConfigModule {\n  static register(options: Record<string, any>): DynamicModule {\n    return {\n      module: ConfigModule,\n      providers: [\n        {\n          provide: 'CONFIG_OPTIONS',\n          useValue: options,\n        },\n        ConfigService,\n      ],\n      exports: [ConfigService],\n    };\n  }\n}\n"),e.qZA()(),e.TgZ(492,"p"),e._uU(493,"Maintenant nous pouvons terminer le processus en injectant le fournisseur "),e.TgZ(494,"code"),e._uU(495,"'CONFIG_OPTIONS'"),e.qZA(),e._uU(496," dans le "),e.TgZ(497,"code"),e._uU(498,"ConfigService"),e.qZA(),e._uU(499,". Rappelons que lorsque nous d\xe9finissons un fournisseur en utilisant un jeton qui n'est pas une classe, nous devons utiliser le d\xe9corateur "),e.TgZ(500,"code"),e._uU(501,"@Inject()"),e.qZA(),e.TgZ(502,"a",20),e._uU(503,"comme d\xe9crit ici"),e.qZA(),e._uU(504,"."),e.qZA(),e.TgZ(505,"pre")(506,"code",11),e._uU(507,"\nimport * as dotenv from 'dotenv';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { Injectable, Inject } from '@nestjs/common';\nimport { EnvConfig } from './interfaces';\n\n@Injectable()\nexport class ConfigService {\n  private readonly envConfig: EnvConfig;\n\n  constructor(@Inject('CONFIG_OPTIONS') private options: Record<string, any>) {\n    const filePath = `${process.env.NODE_ENV || 'development'}.env`;\n    const envFile = path.resolve(__dirname, '../../', options.folder, filePath);\n    this.envConfig = dotenv.parse(fs.readFileSync(envFile));\n  }\n\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n}\n"),e.qZA()(),e.TgZ(508,"p"),e._uU(509,"Une derni\xe8re note : pour des raisons de simplicit\xe9, nous avons utilis\xe9 un jeton d'injection bas\xe9 sur une cha\xeene de caract\xe8res ("),e.TgZ(510,"code"),e._uU(511,"'CONFIG_OPTIONS'"),e.qZA(),e._uU(512,") ci-dessus, mais la meilleure pratique est de le d\xe9finir comme une constante (ou "),e.TgZ(513,"code"),e._uU(514,"Symbol"),e.qZA(),e._uU(515,") dans un fichier s\xe9par\xe9, et d'importer ce fichier. Par exemple :"),e.qZA(),e.TgZ(516,"pre")(517,"code",11),e._uU(518,"\nexport const CONFIG_OPTIONS = 'CONFIG_OPTIONS';\n"),e.qZA()(),e.TgZ(519,"h4",21)(520,"span"),e._uU(521,"Exemple"),e.qZA()(),e.TgZ(522,"p"),e._uU(523,"Un exemple complet du code de ce chapitre est disponible "),e.TgZ(524,"a",16),e._uU(525,"ici"),e.qZA(),e._uU(526,"."),e.qZA(),e.TgZ(527,"h4",22)(528,"span"),e._uU(529,"Lignes directrices pour la communaut\xe9"),e.qZA()(),e.TgZ(530,"p"),e._uU(531,"Vous avez peut-\xeatre vu l'utilisation de m\xe9thodes comme "),e.TgZ(532,"code"),e._uU(533,"forRoot"),e.qZA(),e._uU(534,", "),e.TgZ(535,"code"),e._uU(536,"register"),e.qZA(),e._uU(537,", et "),e.TgZ(538,"code"),e._uU(539,"forFeature"),e.qZA(),e._uU(540," dans certains des packages "),e.TgZ(541,"code"),e._uU(542,"@nestjs/"),e.qZA(),e._uU(543," et vous vous demandez peut-\xeatre quelle est la diff\xe9rence entre toutes ces m\xe9thodes. Il n'y a pas de r\xe8gle stricte \xe0 ce sujet, mais les packages "),e.TgZ(544,"code"),e._uU(545,"@nestjs/"),e.qZA(),e._uU(546," essaient de suivre ces lignes directrices :"),e.qZA(),e.TgZ(547,"p"),e._uU(548,"Lors de la cr\xe9ation d'un module avec :"),e.qZA(),e.TgZ(549,"ul")(550,"li")(551,"p")(552,"code"),e._uU(553,"register"),e.qZA(),e._uU(554,", vous vous attendez \xe0 configurer un module dynamique avec une configuration sp\xe9cifique qui ne sera utilis\xe9e que par le module appelant. Par exemple, avec Nest "),e.TgZ(555,"code"),e._uU(556,"@nestjs/axios"),e.qZA(),e._uU(557," : "),e.TgZ(558,"code"),e._uU(559),e.qZA(),e._uU(560,". Si, dans un autre module, vous utilisez "),e.TgZ(561,"code"),e._uU(562),e.qZA(),e._uU(563,", il aura une configuration diff\xe9rente. Vous pouvez faire cela pour autant de modules que vous le souhaitez."),e.qZA()(),e.TgZ(564,"li")(565,"p")(566,"code"),e._uU(567,"forRoot"),e.qZA(),e._uU(568,", vous vous attendez \xe0 configurer un module dynamique une seule fois et \xe0 r\xe9utiliser cette configuration \xe0 de multiples endroits (bien qu'\xe0 votre insu puisque c'est abstrait). C'est pourquoi vous avez un "),e.TgZ(569,"code"),e._uU(570,"GraphQLModule.forRoot()"),e.qZA(),e._uU(571,", un "),e.TgZ(572,"code"),e._uU(573,"TypeOrmModule.forRoot()"),e.qZA(),e._uU(574,", etc."),e.qZA()(),e.TgZ(575,"li")(576,"p")(577,"code"),e._uU(578,"forFeature"),e.qZA(),e._uU(579,", vous vous attendez \xe0 utiliser la configuration d'un module dynamique "),e.TgZ(580,"code"),e._uU(581,"forRoot"),e.qZA(),e._uU(582," mais vous devez modifier une configuration sp\xe9cifique aux besoins du module appelant (par exemple, le r\xe9f\xe9rentiel auquel ce module doit avoir acc\xe8s, ou le contexte qu'un logger doit utiliser)."),e.qZA()()(),e.TgZ(583,"p"),e._uU(584,"Tous ces \xe9l\xe9ments ont g\xe9n\xe9ralement leur \xe9quivalent "),e.TgZ(585,"code"),e._uU(586,"async"),e.qZA(),e._uU(587,", "),e.TgZ(588,"code"),e._uU(589,"registerAsync"),e.qZA(),e._uU(590,", "),e.TgZ(591,"code"),e._uU(592,"forRootAsync"),e.qZA(),e._uU(593,", et "),e.TgZ(594,"code"),e._uU(595,"forFeatureAsync"),e.qZA(),e._uU(596,", qui signifient la m\xeame chose, mais qui utilisent l'injection de d\xe9pendance de Nest pour la configuration."),e.qZA(),e.TgZ(597,"h4",23)(598,"span"),e._uU(599,"Constructeur de modules configurables"),e.qZA()(),e.TgZ(600,"p"),e._uU(601,"Comme la cr\xe9ation manuelle de modules dynamiques hautement configurables qui exposent des m\xe9thodes "),e.TgZ(602,"code"),e._uU(603,"async"),e.qZA(),e._uU(604," ("),e.TgZ(605,"code"),e._uU(606,"registerAsync"),e.qZA(),e._uU(607,", "),e.TgZ(608,"code"),e._uU(609,"forRootAsync"),e.qZA(),e._uU(610,", etc.) est assez compliqu\xe9e, en particulier pour les nouveaux venus, Nest expose la classe "),e.TgZ(611,"code"),e._uU(612,"ConfigurableModuleBuilder"),e.qZA(),e._uU(613,' qui facilite ce processus et vous permet de construire un " plan " de module en seulement quelques lignes de code.'),e.qZA(),e.TgZ(614,"p"),e._uU(615,"For example, let's take the example we used above ("),e.TgZ(616,"code"),e._uU(617,"ConfigModule"),e.qZA(),e._uU(618,") and convert it to use the "),e.TgZ(619,"code"),e._uU(620,"ConfigurableModuleBuilder"),e.qZA(),e._uU(621,". Before we start, let's make sure we create a dedicated interface that represents what options our "),e.TgZ(622,"code"),e._uU(623,"ConfigModule"),e.qZA(),e._uU(624," takes in."),e.qZA(),e.TgZ(625,"pre")(626,"code",11),e._uU(627,"\nexport interface ConfigModuleOptions {\n  folder: string;\n}\n"),e.qZA()(),e.TgZ(628,"p"),e._uU(629,"Avec ceci en place, cr\xe9ez un nouveau fichier d\xe9di\xe9 (\xe0 c\xf4t\xe9 du fichier "),e.TgZ(630,"code"),e._uU(631,"config.module.ts"),e.qZA(),e._uU(632," existant) et nommez-le "),e.TgZ(633,"code"),e._uU(634,"config.module-definition.ts"),e.qZA(),e._uU(635,". Dans ce fichier, utilisons le "),e.TgZ(636,"code"),e._uU(637,"ConfigurableModuleBuilder"),e.qZA(),e._uU(638," pour construire la d\xe9finition du "),e.TgZ(639,"code"),e._uU(640,"ConfigModule"),e.qZA(),e._uU(641,"."),e.qZA(),e.TgZ(642,"span",24),e._uU(643),e.ALo(644,"extension"),e._UZ(645,"app-tabs",null,25),e.qZA(),e.TgZ(647,"pre")(648,"code",11),e._uU(649,"\nimport { ConfigurableModuleBuilder } from '@nestjs/common';\nimport { ConfigModuleOptions } from './interfaces/config-module-options.interface';\n\nexport const { ConfigurableModuleClass, MODULE_OPTIONS_TOKEN } =\n  new ConfigurableModuleBuilder<ConfigModuleOptions>().build();\n"),e.qZA()(),e.TgZ(650,"pre")(651,"code",11),e._uU(652,"\nimport { ConfigurableModuleBuilder } from '@nestjs/common';\n\nexport const { ConfigurableModuleClass, MODULE_OPTIONS_TOKEN } =\n  new ConfigurableModuleBuilder().build();\n"),e.qZA()(),e.TgZ(653,"p"),e._uU(654,"Maintenant, ouvrons le fichier "),e.TgZ(655,"code"),e._uU(656,"config.module.ts"),e.qZA(),e._uU(657," et modifions son impl\xe9mentation pour tirer parti de la "),e.TgZ(658,"code"),e._uU(659,"ConfigurableModuleClass"),e.qZA(),e._uU(660," auto-g\xe9n\xe9r\xe9e :"),e.qZA(),e.TgZ(661,"pre")(662,"code",11),e._uU(663,"\nimport { Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\nimport { ConfigurableModuleClass } from './config.module-definition';\n\n@Module({\n  providers: [ConfigService],\n  exports: [ConfigService],\n})\nexport class ConfigModule extends ConfigurableModuleClass {}\n"),e.qZA()(),e.TgZ(664,"p"),e._uU(665,"L'extension de la classe "),e.TgZ(666,"code"),e._uU(667,"ConfigurableModuleClass"),e.qZA(),e._uU(668," signifie que "),e.TgZ(669,"code"),e._uU(670,"ConfigModule"),e.qZA(),e._uU(671," fournit maintenant non seulement la m\xe9thode "),e.TgZ(672,"code"),e._uU(673,"register"),e.qZA(),e._uU(674," (comme pr\xe9c\xe9demment avec l'impl\xe9mentation personnalis\xe9e), mais aussi la m\xe9thode "),e.TgZ(675,"code"),e._uU(676,"registerAsync"),e.qZA(),e._uU(677," qui permet aux consommateurs de configurer ce module de mani\xe8re asynchrone, par exemple, en fournissant des factories asynchrones :"),e.qZA(),e.TgZ(678,"pre")(679,"code",11),e._uU(680,"\n@Module({\n  imports: [\n    ConfigModule.register({ folder: './config' }),\n    // or alternatively:\n    // ConfigModule.registerAsync({\n    //   useFactory: () => {\n    //     return {\n    //       folder: './config',\n    //     }\n    //   },\n    //   inject: [...any extra dependencies...]\n    // }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(681,"p"),e._uU(682,"Enfin, mettons \xe0 jour la classe "),e.TgZ(683,"code"),e._uU(684,"ConfigService"),e.qZA(),e._uU(685," pour injecter le fournisseur d'options du module g\xe9n\xe9r\xe9 au lieu de "),e.TgZ(686,"code"),e._uU(687,"'CONFIG_OPTIONS'"),e.qZA(),e._uU(688," que nous avons utilis\xe9 jusqu'\xe0 pr\xe9sent."),e.qZA(),e.TgZ(689,"pre")(690,"code",11),e._uU(691,"\n@Injectable()\nexport class ConfigService {\n  constructor(@Inject(MODULE_OPTIONS_TOKEN) private options: ConfigModuleOptions) { ... }\n}\n"),e.qZA()(),e.TgZ(692,"h4",26)(693,"span"),e._uU(694,"Cl\xe9 de m\xe9thode personnalis\xe9e"),e.qZA()(),e.TgZ(695,"p"),e._uU(696,"La classe "),e.TgZ(697,"code"),e._uU(698,"ConfigurableModuleClass"),e.qZA(),e._uU(699," fournit par d\xe9faut les m\xe9thodes "),e.TgZ(700,"code"),e._uU(701,"register"),e.qZA(),e._uU(702," et son \xe9quivalent "),e.TgZ(703,"code"),e._uU(704,"registerAsync"),e.qZA(),e._uU(705,". Pour utiliser un nom de m\xe9thode diff\xe9rent, utilisez la m\xe9thode "),e.TgZ(706,"code"),e._uU(707,"ConfigurableModuleBuilder#setClassMethodName"),e.qZA(),e._uU(708,", comme suit :"),e.qZA(),e.TgZ(709,"span",24),e._uU(710),e.ALo(711,"extension"),e._UZ(712,"app-tabs",null,27),e.qZA(),e.TgZ(714,"pre")(715,"code",11),e._uU(716,"\nexport const { ConfigurableModuleClass, MODULE_OPTIONS_TOKEN } =\n  new ConfigurableModuleBuilder<ConfigModuleOptions>().setClassMethodName('forRoot').build();\n"),e.qZA()(),e.TgZ(717,"pre")(718,"code",11),e._uU(719,"\nexport const { ConfigurableModuleClass, MODULE_OPTIONS_TOKEN } =\n  new ConfigurableModuleBuilder().setClassMethodName('forRoot').build();\n"),e.qZA()(),e.TgZ(720,"p"),e._uU(721,"Cette construction demandera \xe0 "),e.TgZ(722,"code"),e._uU(723,"ConfigurableModuleBuilder"),e.qZA(),e._uU(724," de g\xe9n\xe9rer une classe qui expose "),e.TgZ(725,"code"),e._uU(726,"forRoot"),e.qZA(),e._uU(727," et "),e.TgZ(728,"code"),e._uU(729,"forRootAsync"),e.qZA(),e._uU(730," \xe0 la place. Exemple :"),e.qZA(),e.TgZ(731,"pre")(732,"code",11),e._uU(733,"\n@Module({\n  imports: [\n    ConfigModule.forRoot({ folder: './config' }), // <-- note the use of \"forRoot\" instead of \"register\"\n    // or alternatively:\n    // ConfigModule.forRootAsync({\n    //   useFactory: () => {\n    //     return {\n    //       folder: './config',\n    //     }\n    //   },\n    //   inject: [...any extra dependencies...]\n    // }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(734,"h4",28)(735,"span"),e._uU(736,"Classe usine d'options personnalis\xe9es"),e.qZA()(),e.TgZ(737,"p"),e._uU(738,"Puisque la m\xe9thode "),e.TgZ(739,"code"),e._uU(740,"registerAsync"),e.qZA(),e._uU(741," (ou "),e.TgZ(742,"code"),e._uU(743,"forRootAsync"),e.qZA(),e._uU(744," ou tout autre nom, selon la configuration) permet au consommateur de passer une d\xe9finition de fournisseur qui r\xe9sout la configuration du module, un consommateur de biblioth\xe8que pourrait potentiellement fournir une classe \xe0 utiliser pour construire l'objet de configuration."),e.qZA(),e.TgZ(745,"pre")(746,"code",11),e._uU(747,"\n@Module({\n  imports: [\n    ConfigModule.registerAsync({\n      useClass: ConfigModuleOptionsFactory,\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(748,"p"),e._uU(749,"Cette classe, par d\xe9faut, doit fournir la m\xe9thode "),e.TgZ(750,"code"),e._uU(751,"create()"),e.qZA(),e._uU(752," qui retourne un objet de configuration de module. Cependant, si votre biblioth\xe8que suit une convention de nommage diff\xe9rente, vous pouvez changer ce comportement et indiquer \xe0 "),e.TgZ(753,"code"),e._uU(754,"ConfigurableModuleBuilder"),e.qZA(),e._uU(755," de s'attendre \xe0 une m\xe9thode diff\xe9rente, par exemple, "),e.TgZ(756,"code"),e._uU(757,"createConfigOptions"),e.qZA(),e._uU(758,", en utilisant la m\xe9thode "),e.TgZ(759,"code"),e._uU(760,"ConfigurableModuleBuilder#setFactoryMethodName"),e.qZA(),e._uU(761," :"),e.qZA(),e.TgZ(762,"span",24),e._uU(763),e.ALo(764,"extension"),e._UZ(765,"app-tabs",null,29),e.qZA(),e.TgZ(767,"pre")(768,"code",11),e._uU(769,"\nexport const { ConfigurableModuleClass, MODULE_OPTIONS_TOKEN } =\n  new ConfigurableModuleBuilder<ConfigModuleOptions>().setFactoryMethodName('createConfigOptions').build();\n"),e.qZA()(),e.TgZ(770,"pre")(771,"code",11),e._uU(772,"\nexport const { ConfigurableModuleClass, MODULE_OPTIONS_TOKEN } =\n  new ConfigurableModuleBuilder().setFactoryMethodName('createConfigOptions').build();\n"),e.qZA()(),e.TgZ(773,"p"),e._uU(774,"D\xe9sormais, la classe "),e.TgZ(775,"code"),e._uU(776,"ConfigModuleOptionsFactory"),e.qZA(),e._uU(777," doit exposer la m\xe9thode "),e.TgZ(778,"code"),e._uU(779,"createConfigOptions"),e.qZA(),e._uU(780," (au lieu de "),e.TgZ(781,"code"),e._uU(782,"create"),e.qZA(),e._uU(783,") :"),e.qZA(),e.TgZ(784,"pre")(785,"code",11),e._uU(786,'\n@Module({\n  imports: [\n    ConfigModule.registerAsync({\n      useClass: ConfigModuleOptionsFactory, // <-- this class must provide the "createConfigOptions" method\n    }),\n  ],\n})\nexport class AppModule {}\n'),e.qZA()(),e.TgZ(787,"h4",30)(788,"span"),e._uU(789,"Options suppl\xe9mentaires"),e.qZA()(),e.TgZ(790,"p"),e._uU(791,"Il y a des cas limites o\xf9 votre module peut avoir besoin de prendre des options suppl\xe9mentaires qui d\xe9terminent comment il est suppos\xe9 se comporter (un bon exemple d'une telle option est le drapeau "),e.TgZ(792,"code"),e._uU(793,"isGlobal"),e.qZA(),e._uU(794," - ou juste "),e.TgZ(795,"code"),e._uU(796,"global"),e.qZA(),e._uU(797,") qui, en m\xeame temps, ne devrait pas \xeatre inclus dans le fournisseur "),e.TgZ(798,"code"),e._uU(799,"MODULE_OPTIONS_TOKEN"),e.qZA(),e._uU(800," (car ils ne sont pas pertinents pour les services/fournisseurs enregistr\xe9s dans ce module, par exemple, "),e.TgZ(801,"code"),e._uU(802,"ConfigService"),e.qZA(),e._uU(803," n'a pas besoin de savoir si son module h\xf4te est enregistr\xe9 en tant que module global)."),e.qZA(),e.TgZ(804,"p"),e._uU(805,"Dans ce cas, la m\xe9thode "),e.TgZ(806,"code"),e._uU(807,"ConfigurableModuleBuilder#setExtras"),e.qZA(),e._uU(808," peut \xeatre utilis\xe9e. Voir l'exemple suivant :"),e.qZA(),e.TgZ(809,"pre")(810,"code",11),e._uU(811,"\nexport const { ConfigurableModuleClass, MODULE_OPTIONS_TOKEN } = new ConfigurableModuleBuilder<ConfigModuleOptions>()\n  .setExtras(\n    {\n      isGlobal: true,\n    },\n    (definition, extras) => ({\n      ...definition,\n      global: extras.isGlobal,\n    }),\n  )\n  .build();\n"),e.qZA()(),e.TgZ(812,"p"),e._uU(813,"Dans l'exemple ci-dessus, le premier argument pass\xe9 \xe0 la m\xe9thode "),e.TgZ(814,"code"),e._uU(815,"setExtras"),e.qZA(),e._uU(816,' est un objet contenant les valeurs par d\xe9faut des propri\xe9t\xe9s "extra". Le second argument est une fonction qui prend une d\xe9finition de module auto-g\xe9n\xe9r\xe9e (avec '),e.TgZ(817,"code"),e._uU(818,"provider"),e.qZA(),e._uU(819,", "),e.TgZ(820,"code"),e._uU(821,"exports"),e.qZA(),e._uU(822,", etc.) et l'objet "),e.TgZ(823,"code"),e._uU(824,"extras"),e.qZA(),e._uU(825," qui repr\xe9sente les propri\xe9t\xe9s suppl\xe9mentaires (soit sp\xe9cifi\xe9es par le consommateur, soit par d\xe9faut). La valeur retourn\xe9e par cette fonction est une d\xe9finition de module modifi\xe9e. Dans cet exemple sp\xe9cifique, nous prenons la propri\xe9t\xe9 "),e.TgZ(826,"code"),e._uU(827,"extras.isGlobal"),e.qZA(),e._uU(828," et l'assignons \xe0 la propri\xe9t\xe9 "),e.TgZ(829,"code"),e._uU(830,"global"),e.qZA(),e._uU(831," de la d\xe9finition du module (qui \xe0 son tour d\xe9termine si un module est global ou non, en savoir plus "),e.TgZ(832,"a",31),e._uU(833,"ici"),e.qZA(),e._uU(834,")."),e.qZA(),e.TgZ(835,"p"),e._uU(836,"Maintenant, lorsque l'on consomme ce module, le drapeau suppl\xe9mentaire "),e.TgZ(837,"code"),e._uU(838,"isGlobal"),e.qZA(),e._uU(839," peut \xeatre pass\xe9, comme suit :"),e.qZA(),e.TgZ(840,"pre")(841,"code",11),e._uU(842,"\n@Module({\n  imports: [\n    ConfigModule.register({\n      isGlobal: true,\n      folder: './config',\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(843,"p"),e._uU(844,"Cependant, puisque "),e.TgZ(845,"code"),e._uU(846,"isGlobal"),e.qZA(),e._uU(847,' est d\xe9clar\xe9e comme une propri\xe9t\xe9 "extra", elle ne sera pas disponible dans le fournisseur '),e.TgZ(848,"code"),e._uU(849,"MODULE_OPTIONS_TOKEN"),e.qZA(),e._uU(850," :"),e.qZA(),e.TgZ(851,"pre")(852,"code",11),e._uU(853,'\n@Injectable()\nexport class ConfigService {\n  constructor(@Inject(MODULE_OPTIONS_TOKEN) private options: ConfigModuleOptions) {\n    // L\'objet "options" n\'aura pas la propri\xe9t\xe9 "isGlobal".\n    // ...\n  }\n}\n'),e.qZA()(),e.TgZ(854,"h4",32)(855,"span"),e._uU(856,"\xc9tendre les m\xe9thodes g\xe9n\xe9r\xe9es automatiquement"),e.qZA()(),e.TgZ(857,"p"),e._uU(858,"Les m\xe9thodes statiques auto-g\xe9n\xe9r\xe9es ("),e.TgZ(859,"code"),e._uU(860,"register"),e.qZA(),e._uU(861,", "),e.TgZ(862,"code"),e._uU(863,"registerAsync"),e.qZA(),e._uU(864,", etc.) peuvent \xeatre \xe9tendues si n\xe9cessaire, comme suit :"),e.qZA(),e.TgZ(865,"pre")(866,"code",11),e._uU(867,"\nimport { Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\nimport { ConfigurableModuleClass, ASYNC_OPTIONS_TYPE, OPTIONS_TYPE } from './config.module-definition';\n\n@Module({\n  providers: [ConfigService],\n  exports: [ConfigService],\n})\nexport class ConfigModule extends ConfigurableModuleClass {\n  static register(options: typeof OPTIONS_TYPE): DynamicModule {\n    return {\n      // votre logique personnalis\xe9e ici\n      ...super.register(options),\n    };\n  }\n\n  static registerAsync(options: typeof ASYNC_OPTIONS_TYPE): DynamicModule {\n    return {\n      // votre logique personnalis\xe9e ici\n      ...super.registerAsync(options),\n    };\n  }\n}\n"),e.qZA()(),e.TgZ(868,"p"),e._uU(869,"Notez l'utilisation des types "),e.TgZ(870,"code"),e._uU(871,"OPTIONS_TYPE"),e.qZA(),e._uU(872," et "),e.TgZ(873,"code"),e._uU(874,"ASYNC_OPTIONS_TYPE"),e.qZA(),e._uU(875," qui doivent \xeatre export\xe9s depuis le fichier de d\xe9finition du module :"),e.qZA(),e.TgZ(876,"pre")(877,"code",11),e._uU(878,"\nexport const { ConfigurableModuleClass, MODULE_OPTIONS_TOKEN, OPTIONS_TYPE, ASYNC_OPTIONS_TYPE } = new ConfigurableModuleBuilder<ConfigModuleOptions>().build();\n"),e.qZA()()()),2&o){const u=e.MAs(646),r=e.MAs(713),a=e.MAs(766);e.xp6(559),e.AsE("HttpModule.register(","{"," baseUrl : 'someUrl' ","}",")"),e.xp6(3),e.AsE("HttpModule.register(","{"," baseUrl : 'somewhere else' ","}",")"),e.xp6(81),e.hij(" ",e.xi3(644,19,"config.module-definition",u.isJsActive),"\n"),e.xp6(4),e.ekj("hide",u.isJsActive),e.xp6(3),e.ekj("hide",!u.isJsActive),e.xp6(60),e.hij(" ",e.xi3(711,22,"config.module-definition",r.isJsActive),"\n"),e.xp6(4),e.ekj("hide",r.isJsActive),e.xp6(3),e.ekj("hide",!r.isJsActive),e.xp6(46),e.hij(" ",e.xi3(764,25,"config.module-definition",a.isJsActive),"\n"),e.xp6(4),e.ekj("hide",a.isJsActive),e.xp6(3),e.ekj("hide",!a.isJsActive)}},dependencies:[U.n,p.U,T.E,Z.rH,A.F],encapsulation:2,changeDetection:0})),n})(),C=(()=>{class n extends d.y{}return(0,i.Z)(n,"\u0275fac",function(){let t;return function(s){return(t||(t=e.n5z(n)))(s||n)}}()),(0,i.Z)(n,"\u0275cmp",e.Xpm({type:n,selectors:[["app-lifecycle-events"]],features:[e.qOj],decls:315,vars:12,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/Lou8is/docs.nestjs.fr/edit/main/content/fundamentals/lifecycle-events.md","aria-label","Proposer des modifications","title","Proposer des modifications"],[1,"fas","fa-edit"],["id","lifecycle-events"],["appAnchor","","id","lifecycle-sequence"],["src","/assets/lifecycle-events.png"],["appAnchor","","id","lifecycle-events-1"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/fundamentals/lifecycle-events#application-shutdown"],["href","fundamentals/lifecycle-events#application-shutdown"],[1,"warning"],[1,"info"],["appAnchor","","id","usage"],[1,"filename"],["appe934144f6030703c5819e13a7d58ff3bdc7ad7ee",""],[1,"language-typescript"],["appAnchor","","id","asynchronous-initialization"],["appf02c744a85170845f292a4bf7a0dceb7f2f97893",""],["appAnchor","","id","application-shutdown"],["rel","nofollow","target","_blank","href","https://kubernetes.io/"],["rel","nofollow","target","_blank","href","https://www.heroku.com/"],["rel","nofollow","target","_blank","href","https://nodejs.org/api/process.html#process_signal_events"],["rel","nofollow","target","_blank","href","https://docs.libuv.org/en/v1.x/signal.html"],["appd5d5de7f245d7007d271cc98ec2f9fb19ebc43d0",""]],template:function(o,s){if(1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Lifecycle Events"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"A Nest application, as well as every application element, has a lifecycle managed by Nest. Nest provides "),e.TgZ(9,"strong"),e._uU(10,"lifecycle hooks"),e.qZA(),e._uU(11," that give visibility into key lifecycle events, and the ability to act (run registered code on your "),e.TgZ(12,"code"),e._uU(13,"module"),e.qZA(),e._uU(14,", "),e.TgZ(15,"code"),e._uU(16,"injectable"),e.qZA(),e._uU(17," or "),e.TgZ(18,"code"),e._uU(19,"controller"),e.qZA(),e._uU(20,") when they occur."),e.qZA(),e.TgZ(21,"h4",6)(22,"span"),e._uU(23,"Lifecycle sequence"),e.qZA()(),e.TgZ(24,"p"),e._uU(25,"The following diagram depicts the sequence of key application lifecycle events, from the time the application is bootstrapped until the node process exits. We can divide the overall lifecycle into three phases: "),e.TgZ(26,"strong"),e._uU(27,"initializing"),e.qZA(),e._uU(28,", "),e.TgZ(29,"strong"),e._uU(30,"running"),e.qZA(),e._uU(31," and "),e.TgZ(32,"strong"),e._uU(33,"terminating"),e.qZA(),e._uU(34,". Using this lifecycle, you can plan for appropriate initialization of modules and services, manage active connections, and gracefully shutdown your application when it receives a termination signal."),e.qZA(),e.TgZ(35,"figure"),e._UZ(36,"img",7),e.qZA(),e.TgZ(37,"h4",8)(38,"span"),e._uU(39,"Lifecycle events"),e.qZA()(),e.TgZ(40,"p"),e._uU(41,"Lifecycle events happen during application bootstrapping and shutdown. Nest calls registered lifecycle hook methods on "),e.TgZ(42,"code"),e._uU(43,"modules"),e.qZA(),e._uU(44,", "),e.TgZ(45,"code"),e._uU(46,"injectables"),e.qZA(),e._uU(47," and "),e.TgZ(48,"code"),e._uU(49,"controllers"),e.qZA(),e._uU(50," at each of the following lifecycle events ("),e.TgZ(51,"strong"),e._uU(52,"shutdown hooks"),e.qZA(),e._uU(53," need to be enabled first, as described "),e.TgZ(54,"a",9),e._uU(55,"below"),e.qZA(),e._uU(56,"). As shown in the diagram above, Nest also calls the appropriate underlying methods to begin listening for connections, and to stop listening for connections."),e.qZA(),e.TgZ(57,"p"),e._uU(58,"In the following table, "),e.TgZ(59,"code"),e._uU(60,"onModuleDestroy"),e.qZA(),e._uU(61,", "),e.TgZ(62,"code"),e._uU(63,"beforeApplicationShutdown"),e.qZA(),e._uU(64," and "),e.TgZ(65,"code"),e._uU(66,"onApplicationShutdown"),e.qZA(),e._uU(67," are only triggered if you explicitly call "),e.TgZ(68,"code"),e._uU(69,"app.close()"),e.qZA(),e._uU(70," or if the process receives a special system signal (such as SIGTERM) and you have correctly called "),e.TgZ(71,"code"),e._uU(72,"enableShutdownHooks"),e.qZA(),e._uU(73," at application bootstrap (see below "),e.TgZ(74,"strong"),e._uU(75,"Application shutdown"),e.qZA(),e._uU(76," part)."),e.qZA(),e.TgZ(77,"table")(78,"thead")(79,"tr")(80,"th"),e._uU(81,"Lifecycle hook method"),e.qZA(),e.TgZ(82,"th"),e._uU(83,"Lifecycle event triggering the hook method call"),e.qZA()()(),e.TgZ(84,"tbody")(85,"tr")(86,"td")(87,"code"),e._uU(88,"onModuleInit()"),e.qZA()(),e.TgZ(89,"td"),e._uU(90,"Called once the host module's dependencies have been resolved."),e.qZA()(),e.TgZ(91,"tr")(92,"td")(93,"code"),e._uU(94,"onApplicationBootstrap()"),e.qZA()(),e.TgZ(95,"td"),e._uU(96,"Called once all modules have been initialized, but before listening for connections."),e.qZA()(),e.TgZ(97,"tr")(98,"td")(99,"code"),e._uU(100,"onModuleDestroy()"),e.qZA(),e._uU(101,"*"),e.qZA(),e.TgZ(102,"td"),e._uU(103,"Called after a termination signal (e.g., "),e.TgZ(104,"code"),e._uU(105,"SIGTERM"),e.qZA(),e._uU(106,") has been received."),e.qZA()(),e.TgZ(107,"tr")(108,"td")(109,"code"),e._uU(110,"beforeApplicationShutdown()"),e.qZA(),e._uU(111,"*"),e.qZA(),e.TgZ(112,"td"),e._uU(113,"Called after all "),e.TgZ(114,"code"),e._uU(115,"onModuleDestroy()"),e.qZA(),e._uU(116," handlers have completed (Promises resolved or rejected);"),e._UZ(117,"br"),e._uU(118,"once complete (Promises resolved or rejected), all existing connections will be closed ("),e.TgZ(119,"code"),e._uU(120,"app.close()"),e.qZA(),e._uU(121," called)."),e.qZA()(),e.TgZ(122,"tr")(123,"td")(124,"code"),e._uU(125,"onApplicationShutdown()"),e.qZA(),e._uU(126,"*"),e.qZA(),e.TgZ(127,"td"),e._uU(128,"Called after connections close ("),e.TgZ(129,"code"),e._uU(130,"app.close()"),e.qZA(),e._uU(131," resolves)."),e.qZA()()()(),e.TgZ(132,"p"),e._uU(133,"* For these events, if you're not calling "),e.TgZ(134,"code"),e._uU(135,"app.close()"),e.qZA(),e._uU(136," explicitly, you must opt-in to make them work with system signals such as "),e.TgZ(137,"code"),e._uU(138,"SIGTERM"),e.qZA(),e._uU(139,". See "),e.TgZ(140,"a",10),e._uU(141,"Application shutdown"),e.qZA(),e._uU(142," below."),e.qZA(),e.TgZ(143,"blockquote",11)(144,"strong"),e._uU(145,"Warning"),e.qZA(),e._uU(146," The lifecycle hooks listed above are not triggered for "),e.TgZ(147,"strong"),e._uU(148,"request-scoped"),e.qZA(),e._uU(149," classes. Request-scoped classes are not tied to the application lifecycle and their lifespan is unpredictable. They are exclusively created for each request and automatically garbage-collected after the response is sent.\n"),e.qZA(),e.TgZ(150,"blockquote",12)(151,"strong"),e._uU(152,"Hint"),e.qZA(),e._uU(153," Execution order of "),e.TgZ(154,"code"),e._uU(155,"onModuleInit()"),e.qZA(),e._uU(156," and "),e.TgZ(157,"code"),e._uU(158,"onApplicationBootstrap()"),e.qZA(),e._uU(159," directly depends on the order of module imports, awaiting the previous hook.\n"),e.qZA(),e.TgZ(160,"h4",13)(161,"span"),e._uU(162,"Usage"),e.qZA()(),e.TgZ(163,"p"),e._uU(164,"Each lifecycle hook is represented by an interface. Interfaces are technically optional because they do not exist after TypeScript compilation. Nonetheless, it's good practice to use them in order to benefit from strong typing and editor tooling. To register a lifecycle hook, implement the appropriate interface. For example, to register a method to be called during module initialization on a particular class (e.g., Controller, Provider or Module), implement the "),e.TgZ(165,"code"),e._uU(166,"OnModuleInit"),e.qZA(),e._uU(167," interface by supplying an "),e.TgZ(168,"code"),e._uU(169,"onModuleInit()"),e.qZA(),e._uU(170," method, as shown below:"),e.qZA(),e.TgZ(171,"span",14),e._UZ(172,"app-tabs",null,15),e.qZA(),e.TgZ(174,"pre")(175,"code",16),e._uU(176,"\nimport { Injectable, OnModuleInit } from '@nestjs/common';\n\n@Injectable()\nexport class UsersService implements OnModuleInit {\n  onModuleInit() {\n    console.log(`The module has been initialized.`);\n  }\n}\n"),e.qZA()(),e.TgZ(177,"pre")(178,"code",16),e._uU(179,"\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UsersService {\n  onModuleInit() {\n    console.log(`The module has been initialized.`);\n  }\n}\n"),e.qZA()(),e.TgZ(180,"h4",17)(181,"span"),e._uU(182,"Asynchronous initialization"),e.qZA()(),e.TgZ(183,"p"),e._uU(184,"Both the "),e.TgZ(185,"code"),e._uU(186,"OnModuleInit"),e.qZA(),e._uU(187," and "),e.TgZ(188,"code"),e._uU(189,"OnApplicationBootstrap"),e.qZA(),e._uU(190," hooks allow you to defer the application initialization process (return a "),e.TgZ(191,"code"),e._uU(192,"Promise"),e.qZA(),e._uU(193," or mark the method as "),e.TgZ(194,"code"),e._uU(195,"async"),e.qZA(),e._uU(196," and "),e.TgZ(197,"code"),e._uU(198,"await"),e.qZA(),e._uU(199," an asynchronous method completion in the method body)."),e.qZA(),e.TgZ(200,"span",14),e._UZ(201,"app-tabs",null,18),e.qZA(),e.TgZ(203,"pre")(204,"code",16),e._uU(205,"\nasync onModuleInit(): Promise<void> {\n  await this.fetch();\n}\n"),e.qZA()(),e.TgZ(206,"pre")(207,"code",16),e._uU(208,"\nasync onModuleInit() {\n  await this.fetch();\n}\n"),e.qZA()(),e.TgZ(209,"h4",19)(210,"span"),e._uU(211,"Application shutdown"),e.qZA()(),e.TgZ(212,"p"),e._uU(213,"The "),e.TgZ(214,"code"),e._uU(215,"onModuleDestroy()"),e.qZA(),e._uU(216,", "),e.TgZ(217,"code"),e._uU(218,"beforeApplicationShutdown()"),e.qZA(),e._uU(219," and "),e.TgZ(220,"code"),e._uU(221,"onApplicationShutdown()"),e.qZA(),e._uU(222," hooks are called in the terminating phase (in response to an explicit call to "),e.TgZ(223,"code"),e._uU(224,"app.close()"),e.qZA(),e._uU(225," or upon receipt of system signals such as SIGTERM if opted-in). This feature is often used with "),e.TgZ(226,"a",20),e._uU(227,"Kubernetes"),e.qZA(),e._uU(228," to manage containers' lifecycles, by "),e.TgZ(229,"a",21),e._uU(230,"Heroku"),e.qZA(),e._uU(231," for dynos or similar services."),e.qZA(),e.TgZ(232,"p"),e._uU(233,"Shutdown hook listeners consume system resources, so they are disabled by default. To use shutdown hooks, you "),e.TgZ(234,"strong"),e._uU(235,"must enable listeners"),e.qZA(),e._uU(236," by calling "),e.TgZ(237,"code"),e._uU(238,"enableShutdownHooks()"),e.qZA(),e._uU(239,":"),e.qZA(),e.TgZ(240,"pre")(241,"code",16),e._uU(242,"\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  // Starts listening for shutdown hooks\n  app.enableShutdownHooks();\n\n  await app.listen(3000);\n}\nbootstrap();\n"),e.qZA()(),e.TgZ(243,"blockquote",11)(244,"strong"),e._uU(245,"warning"),e.qZA(),e._uU(246," Due to inherent platform limitations, NestJS has limited support for application shutdown hooks on Windows. You can expect "),e.TgZ(247,"code"),e._uU(248,"SIGINT"),e.qZA(),e._uU(249," to work, as well as "),e.TgZ(250,"code"),e._uU(251,"SIGBREAK"),e.qZA(),e._uU(252," and to some extent "),e.TgZ(253,"code"),e._uU(254,"SIGHUP"),e.qZA(),e._uU(255," - "),e.TgZ(256,"a",22),e._uU(257,"read more"),e.qZA(),e._uU(258,". However "),e.TgZ(259,"code"),e._uU(260,"SIGTERM"),e.qZA(),e._uU(261," will never work on Windows because killing a process in the task manager is unconditional, \"i.e., there's no way for an application to detect or prevent it\". Here's some "),e.TgZ(262,"a",23),e._uU(263,"relevant documentation"),e.qZA(),e._uU(264," from libuv to learn more about how "),e.TgZ(265,"code"),e._uU(266,"SIGINT"),e.qZA(),e._uU(267,", "),e.TgZ(268,"code"),e._uU(269,"SIGBREAK"),e.qZA(),e._uU(270," and others are handled on Windows. Also, see Node.js documentation of "),e.TgZ(271,"a",22),e._uU(272,"Process Signal Events"),e.qZA()(),e.TgZ(273,"blockquote",12)(274,"strong"),e._uU(275,"Info"),e.qZA(),e.TgZ(276,"code"),e._uU(277,"enableShutdownHooks"),e.qZA(),e._uU(278," consumes memory by starting listeners. In cases where you are running multiple Nest apps in a single Node process (e.g., when running parallel tests with Jest), Node may complain about excessive listener processes. For this reason, "),e.TgZ(279,"code"),e._uU(280,"enableShutdownHooks"),e.qZA(),e._uU(281," is not enabled by default. Be aware of this condition when you are running multiple instances in a single Node process.\n"),e.qZA(),e.TgZ(282,"p"),e._uU(283,"When the application receives a termination signal it will call any registered "),e.TgZ(284,"code"),e._uU(285,"onModuleDestroy()"),e.qZA(),e._uU(286,", "),e.TgZ(287,"code"),e._uU(288,"beforeApplicationShutdown()"),e.qZA(),e._uU(289,", then "),e.TgZ(290,"code"),e._uU(291,"onApplicationShutdown()"),e.qZA(),e._uU(292," methods (in the sequence described above) with the corresponding signal as the first parameter. If a registered function awaits an asynchronous call (returns a promise), Nest will not continue in the sequence until the promise is resolved or rejected."),e.qZA(),e.TgZ(293,"span",14),e._UZ(294,"app-tabs",null,24),e.qZA(),e.TgZ(296,"pre")(297,"code",16),e._uU(298,'\n@Injectable()\nclass UsersService implements OnApplicationShutdown {\n  onApplicationShutdown(signal: string) {\n    console.log(signal); // e.g. "SIGINT"\n  }\n}\n'),e.qZA()(),e.TgZ(299,"pre")(300,"code",16),e._uU(301,'\n@Injectable()\nclass UsersService implements OnApplicationShutdown {\n  onApplicationShutdown(signal) {\n    console.log(signal); // e.g. "SIGINT"\n  }\n}\n'),e.qZA()(),e.TgZ(302,"blockquote",12)(303,"strong"),e._uU(304,"Info"),e.qZA(),e._uU(305," Calling "),e.TgZ(306,"code"),e._uU(307,"app.close()"),e.qZA(),e._uU(308," doesn't terminate the Node process but only triggers the "),e.TgZ(309,"code"),e._uU(310,"onModuleDestroy()"),e.qZA(),e._uU(311," and "),e.TgZ(312,"code"),e._uU(313,"onApplicationShutdown()"),e.qZA(),e._uU(314," hooks, so if there are some intervals, long-running background tasks, etc. the process won't be automatically terminated.\n"),e.qZA()()),2&o){const u=e.MAs(173),r=e.MAs(202),a=e.MAs(295);e.xp6(174),e.ekj("hide",u.isJsActive),e.xp6(3),e.ekj("hide",!u.isJsActive),e.xp6(26),e.ekj("hide",r.isJsActive),e.xp6(3),e.ekj("hide",!r.isJsActive),e.xp6(90),e.ekj("hide",a.isJsActive),e.xp6(3),e.ekj("hide",!a.isJsActive)}},dependencies:[U.n,p.U],encapsulation:2,changeDetection:0})),n})(),j=(()=>{class n extends d.y{}return(0,i.Z)(n,"\u0275fac",function(){let t;return function(s){return(t||(t=e.n5z(n)))(s||n)}}()),(0,i.Z)(n,"\u0275cmp",e.Xpm({type:n,selectors:[["app-module-ref"]],features:[e.qOj],decls:276,vars:58,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/Lou8is/docs.nestjs.fr/edit/main/content/fundamentals/module-reference.md","aria-label","Proposer des modifications","title","Proposer des modifications"],[1,"fas","fa-edit"],["id","module-reference"],[1,"filename"],["app1d3b1ea3dfac1d9ec0dcadf8fadb7653fb13ec1a",""],[1,"language-typescript"],[1,"info"],["appAnchor","","id","retrieving-instances"],["app676050774d3d2bfbe93ce5c7c740e7733dae141b",""],[1,"warning"],["href","https://docs.nestjs.com/fundamentals/module-ref#resolving-scoped-providers"],["routerLink","/fundamentals/injection-scopes"],["appAnchor","","id","resolving-scoped-providers"],["app89f76fae4f868d8b1359174ed49a47b0f5b38295",""],["app5191060104a4782ace9460630c34fbda476c50c3",""],["app033aaefde76c8f9044f9e90084ab8bf6492697f9",""],["appAnchor","","id","registering-request-provider"],["appAnchor","","id","getting-current-sub-tree"],["app49afaad7575c99e89cef89516c5888465bf87207",""],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/fundamentals/injection-scopes#request-provider"],["appAnchor","","id","instantiating-custom-classes-dynamically"],["app8142255d7dee14faca6d7d6d4350a4a6cd221ce5",""]],template:function(o,s){if(1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Module reference"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Nest provides the "),e.TgZ(9,"code"),e._uU(10,"ModuleRef"),e.qZA(),e._uU(11," class to navigate the internal list of providers and obtain a reference to any provider using its injection token as a lookup key. The "),e.TgZ(12,"code"),e._uU(13,"ModuleRef"),e.qZA(),e._uU(14," class also provides a way to dynamically instantiate both static and scoped providers. "),e.TgZ(15,"code"),e._uU(16,"ModuleRef"),e.qZA(),e._uU(17," can be injected into a class in the normal way:"),e.qZA(),e.TgZ(18,"span",6),e._uU(19),e.ALo(20,"extension"),e._UZ(21,"app-tabs",null,7),e.qZA(),e.TgZ(23,"pre")(24,"code",8),e._uU(25,"\n@Injectable()\nexport class CatsService {\n  constructor(private moduleRef: ModuleRef) {}\n}\n"),e.qZA()(),e.TgZ(26,"pre")(27,"code",8),e._uU(28,"\n@Injectable()\n@Dependencies(ModuleRef)\nexport class CatsService {\n  constructor(moduleRef) {\n    this.moduleRef = moduleRef;\n  }\n}\n"),e.qZA()(),e.TgZ(29,"blockquote",9)(30,"strong"),e._uU(31,"Hint"),e.qZA(),e._uU(32," The "),e.TgZ(33,"code"),e._uU(34,"ModuleRef"),e.qZA(),e._uU(35," class is imported from the "),e.TgZ(36,"code"),e._uU(37,"@nestjs/core"),e.qZA(),e._uU(38," package.\n"),e.qZA(),e.TgZ(39,"h4",10)(40,"span"),e._uU(41,"Retrieving instances"),e.qZA()(),e.TgZ(42,"p"),e._uU(43,"The "),e.TgZ(44,"code"),e._uU(45,"ModuleRef"),e.qZA(),e._uU(46," instance (hereafter we'll refer to it as the "),e.TgZ(47,"strong"),e._uU(48,"module reference"),e.qZA(),e._uU(49,") has a "),e.TgZ(50,"code"),e._uU(51,"get()"),e.qZA(),e._uU(52," method. This method retrieves a provider, controller, or injectable (e.g., guard, interceptor, etc.) that exists (has been instantiated) in the "),e.TgZ(53,"strong"),e._uU(54,"current"),e.qZA(),e._uU(55," module using its injection token/class name."),e.qZA(),e.TgZ(56,"span",6),e._uU(57),e.ALo(58,"extension"),e._UZ(59,"app-tabs",null,11),e.qZA(),e.TgZ(61,"pre")(62,"code",8),e._uU(63,"\n@Injectable()\nexport class CatsService implements OnModuleInit {\n  private service: Service;\n  constructor(private moduleRef: ModuleRef) {}\n\n  onModuleInit() {\n    this.service = this.moduleRef.get(Service);\n  }\n}\n"),e.qZA()(),e.TgZ(64,"pre")(65,"code",8),e._uU(66,"\n@Injectable()\n@Dependencies(ModuleRef)\nexport class CatsService {\n  constructor(moduleRef) {\n    this.moduleRef = moduleRef;\n  }\n\n  onModuleInit() {\n    this.service = this.moduleRef.get(Service);\n  }\n}\n"),e.qZA()(),e.TgZ(67,"blockquote",12)(68,"strong"),e._uU(69,"Warning"),e.qZA(),e._uU(70," You can't retrieve scoped providers (transient or request-scoped) with the "),e.TgZ(71,"code"),e._uU(72,"get()"),e.qZA(),e._uU(73," method. Instead, use the technique described "),e.TgZ(74,"a",13),e._uU(75,"below"),e.qZA(),e._uU(76,". Learn how to control scopes "),e.TgZ(77,"a",14),e._uU(78,"here"),e.qZA(),e._uU(79,".\n"),e.qZA(),e.TgZ(80,"p"),e._uU(81,"To retrieve a provider from the global context (for example, if the provider has been injected in a different module), pass the "),e.TgZ(82,"code"),e._uU(83),e.qZA(),e._uU(84," option as a second argument to "),e.TgZ(85,"code"),e._uU(86,"get()"),e.qZA(),e._uU(87,"."),e.qZA(),e.TgZ(88,"pre")(89,"code",8),e._uU(90,"\nthis.moduleRef.get(Service, { strict: false });\n"),e.qZA()(),e.TgZ(91,"h4",15)(92,"span"),e._uU(93,"Resolving scoped providers"),e.qZA()(),e.TgZ(94,"p"),e._uU(95,"To dynamically resolve a scoped provider (transient or request-scoped), use the "),e.TgZ(96,"code"),e._uU(97,"resolve()"),e.qZA(),e._uU(98," method, passing the provider's injection token as an argument."),e.qZA(),e.TgZ(99,"span",6),e._uU(100),e.ALo(101,"extension"),e._UZ(102,"app-tabs",null,16),e.qZA(),e.TgZ(104,"pre")(105,"code",8),e._uU(106,"\n@Injectable()\nexport class CatsService implements OnModuleInit {\n  private transientService: TransientService;\n  constructor(private moduleRef: ModuleRef) {}\n\n  async onModuleInit() {\n    this.transientService = await this.moduleRef.resolve(TransientService);\n  }\n}\n"),e.qZA()(),e.TgZ(107,"pre")(108,"code",8),e._uU(109,"\n@Injectable()\n@Dependencies(ModuleRef)\nexport class CatsService {\n  constructor(moduleRef) {\n    this.moduleRef = moduleRef;\n  }\n\n  async onModuleInit() {\n    this.transientService = await this.moduleRef.resolve(TransientService);\n  }\n}\n"),e.qZA()(),e.TgZ(110,"p"),e._uU(111,"The "),e.TgZ(112,"code"),e._uU(113,"resolve()"),e.qZA(),e._uU(114," method returns a unique instance of the provider, from its own "),e.TgZ(115,"strong"),e._uU(116,"DI container sub-tree"),e.qZA(),e._uU(117,". Each sub-tree has a unique "),e.TgZ(118,"strong"),e._uU(119,"context identifier"),e.qZA(),e._uU(120,". Thus, if you call this method more than once and compare instance references, you will see that they are not equal."),e.qZA(),e.TgZ(121,"span",6),e._uU(122),e.ALo(123,"extension"),e._UZ(124,"app-tabs",null,17),e.qZA(),e.TgZ(126,"pre")(127,"code",8),e._uU(128,"\n@Injectable()\nexport class CatsService implements OnModuleInit {\n  constructor(private moduleRef: ModuleRef) {}\n\n  async onModuleInit() {\n    const transientServices = await Promise.all([\n      this.moduleRef.resolve(TransientService),\n      this.moduleRef.resolve(TransientService),\n    ]);\n    console.log(transientServices[0] === transientServices[1]); // false\n  }\n}\n"),e.qZA()(),e.TgZ(129,"pre")(130,"code",8),e._uU(131,"\n@Injectable()\n@Dependencies(ModuleRef)\nexport class CatsService {\n  constructor(moduleRef) {\n    this.moduleRef = moduleRef;\n  }\n\n  async onModuleInit() {\n    const transientServices = await Promise.all([\n      this.moduleRef.resolve(TransientService),\n      this.moduleRef.resolve(TransientService),\n    ]);\n    console.log(transientServices[0] === transientServices[1]); // false\n  }\n}\n"),e.qZA()(),e.TgZ(132,"p"),e._uU(133,"To generate a single instance across multiple "),e.TgZ(134,"code"),e._uU(135,"resolve()"),e.qZA(),e._uU(136," calls, and ensure they share the same generated DI container sub-tree, you can pass a context identifier to the "),e.TgZ(137,"code"),e._uU(138,"resolve()"),e.qZA(),e._uU(139," method. Use the "),e.TgZ(140,"code"),e._uU(141,"ContextIdFactory"),e.qZA(),e._uU(142," class to generate a context identifier. This class provides a "),e.TgZ(143,"code"),e._uU(144,"create()"),e.qZA(),e._uU(145," method that returns an appropriate unique identifier."),e.qZA(),e.TgZ(146,"span",6),e._uU(147),e.ALo(148,"extension"),e._UZ(149,"app-tabs",null,18),e.qZA(),e.TgZ(151,"pre")(152,"code",8),e._uU(153,"\n@Injectable()\nexport class CatsService implements OnModuleInit {\n  constructor(private moduleRef: ModuleRef) {}\n\n  async onModuleInit() {\n    const contextId = ContextIdFactory.create();\n    const transientServices = await Promise.all([\n      this.moduleRef.resolve(TransientService, contextId),\n      this.moduleRef.resolve(TransientService, contextId),\n    ]);\n    console.log(transientServices[0] === transientServices[1]); // true\n  }\n}\n"),e.qZA()(),e.TgZ(154,"pre")(155,"code",8),e._uU(156,"\n@Injectable()\n@Dependencies(ModuleRef)\nexport class CatsService {\n  constructor(moduleRef) {\n    this.moduleRef = moduleRef;\n  }\n\n  async onModuleInit() {\n    const contextId = ContextIdFactory.create();\n    const transientServices = await Promise.all([\n      this.moduleRef.resolve(TransientService, contextId),\n      this.moduleRef.resolve(TransientService, contextId),\n    ]);\n    console.log(transientServices[0] === transientServices[1]); // true\n  }\n}\n"),e.qZA()(),e.TgZ(157,"blockquote",9)(158,"strong"),e._uU(159,"Hint"),e.qZA(),e._uU(160," The "),e.TgZ(161,"code"),e._uU(162,"ContextIdFactory"),e.qZA(),e._uU(163," class is imported from the "),e.TgZ(164,"code"),e._uU(165,"@nestjs/core"),e.qZA(),e._uU(166," package.\n"),e.qZA(),e.TgZ(167,"h4",19)(168,"span"),e._uU(169,"Registering "),e.TgZ(170,"code"),e._uU(171,"REQUEST"),e.qZA(),e._uU(172," provider"),e.qZA()(),e.TgZ(173,"p"),e._uU(174,"Manually generated context identifiers (with "),e.TgZ(175,"code"),e._uU(176,"ContextIdFactory.create()"),e.qZA(),e._uU(177,") represent DI sub-trees in which "),e.TgZ(178,"code"),e._uU(179,"REQUEST"),e.qZA(),e._uU(180," provider is "),e.TgZ(181,"code"),e._uU(182,"undefined"),e.qZA(),e._uU(183," as they are not instantiated and managed by the Nest dependency injection system."),e.qZA(),e.TgZ(184,"p"),e._uU(185,"To register a custom "),e.TgZ(186,"code"),e._uU(187,"REQUEST"),e.qZA(),e._uU(188," object for a manually created DI sub-tree, use the "),e.TgZ(189,"code"),e._uU(190,"ModuleRef#registerRequestByContextId()"),e.qZA(),e._uU(191," method, as follows:"),e.qZA(),e.TgZ(192,"pre")(193,"code",8),e._uU(194,"\nconst contextId = ContextIdFactory.create();\nthis.moduleRef.registerRequestByContextId(/* YOUR_REQUEST_OBJECT */, contextId);\n"),e.qZA()(),e.TgZ(195,"h4",20)(196,"span"),e._uU(197,"Getting current sub-tree"),e.qZA()(),e.TgZ(198,"p"),e._uU(199,"Occasionally, you may want to resolve an instance of a request-scoped provider within a "),e.TgZ(200,"strong"),e._uU(201,"request context"),e.qZA(),e._uU(202,". Let's say that "),e.TgZ(203,"code"),e._uU(204,"CatsService"),e.qZA(),e._uU(205," is request-scoped and you want to resolve the "),e.TgZ(206,"code"),e._uU(207,"CatsRepository"),e.qZA(),e._uU(208," instance which is also marked as a request-scoped provider. In order to share the same DI container sub-tree, you must obtain the current context identifier instead of generating a new one (e.g., with the "),e.TgZ(209,"code"),e._uU(210,"ContextIdFactory.create()"),e.qZA(),e._uU(211," function, as shown above). To obtain the current context identifier, start by injecting the request object using "),e.TgZ(212,"code"),e._uU(213,"@Inject()"),e.qZA(),e._uU(214," decorator."),e.qZA(),e.TgZ(215,"span",6),e._uU(216),e.ALo(217,"extension"),e._UZ(218,"app-tabs",null,21),e.qZA(),e.TgZ(220,"pre")(221,"code",8),e._uU(222,"\n@Injectable()\nexport class CatsService {\n  constructor(\n    @Inject(REQUEST) private request: Record<string, unknown>,\n  ) {}\n}\n"),e.qZA()(),e.TgZ(223,"pre")(224,"code",8),e._uU(225,"\n@Injectable()\n@Dependencies(REQUEST)\nexport class CatsService {\n  constructor(request) {\n    this.request = request;\n  }\n}\n"),e.qZA()(),e.TgZ(226,"blockquote",9)(227,"strong"),e._uU(228,"Hint"),e.qZA(),e._uU(229," Learn more about the request provider "),e.TgZ(230,"a",22),e._uU(231,"here"),e.qZA(),e._uU(232,".\n"),e.qZA(),e.TgZ(233,"p"),e._uU(234,"Now, use the "),e.TgZ(235,"code"),e._uU(236,"getByRequest()"),e.qZA(),e._uU(237," method of the "),e.TgZ(238,"code"),e._uU(239,"ContextIdFactory"),e.qZA(),e._uU(240," class to create a context id based on the request object, and pass this to the "),e.TgZ(241,"code"),e._uU(242,"resolve()"),e.qZA(),e._uU(243," call:"),e.qZA(),e.TgZ(244,"pre")(245,"code",8),e._uU(246,"\nconst contextId = ContextIdFactory.getByRequest(this.request);\nconst catsRepository = await this.moduleRef.resolve(CatsRepository, contextId);\n"),e.qZA()(),e.TgZ(247,"h4",23)(248,"span"),e._uU(249,"Instantiating custom classes dynamically"),e.qZA()(),e.TgZ(250,"p"),e._uU(251,"To dynamically instantiate a class that "),e.TgZ(252,"strong"),e._uU(253,"wasn't previously registered"),e.qZA(),e._uU(254," as a "),e.TgZ(255,"strong"),e._uU(256,"provider"),e.qZA(),e._uU(257,", use the module reference's "),e.TgZ(258,"code"),e._uU(259,"create()"),e.qZA(),e._uU(260," method."),e.qZA(),e.TgZ(261,"span",6),e._uU(262),e.ALo(263,"extension"),e._UZ(264,"app-tabs",null,24),e.qZA(),e.TgZ(266,"pre")(267,"code",8),e._uU(268,"\n@Injectable()\nexport class CatsService implements OnModuleInit {\n  private catsFactory: CatsFactory;\n  constructor(private moduleRef: ModuleRef) {}\n\n  async onModuleInit() {\n    this.catsFactory = await this.moduleRef.create(CatsFactory);\n  }\n}\n"),e.qZA()(),e.TgZ(269,"pre")(270,"code",8),e._uU(271,"\n@Injectable()\n@Dependencies(ModuleRef)\nexport class CatsService {\n  constructor(moduleRef) {\n    this.moduleRef = moduleRef;\n  }\n\n  async onModuleInit() {\n    this.catsFactory = await this.moduleRef.create(CatsFactory);\n  }\n}\n"),e.qZA()(),e.TgZ(272,"p"),e._uU(273,"This technique enables you to conditionally instantiate different classes outside of the framework container."),e.qZA(),e.TgZ(274,"p"),e._UZ(275,"app-banner-devtools"),e.qZA()()),2&o){const u=e.MAs(22),r=e.MAs(60),a=e.MAs(103),l=e.MAs(125),g=e.MAs(150),m=e.MAs(219),_=e.MAs(265);e.xp6(19),e.hij(" ",e.xi3(20,37,"cats.service",u.isJsActive),"\n"),e.xp6(4),e.ekj("hide",u.isJsActive),e.xp6(3),e.ekj("hide",!u.isJsActive),e.xp6(31),e.hij(" ",e.xi3(58,40,"cats.service",r.isJsActive),"\n"),e.xp6(4),e.ekj("hide",r.isJsActive),e.xp6(3),e.ekj("hide",!r.isJsActive),e.xp6(19),e.AsE("","{"," strict: false ","}",""),e.xp6(17),e.hij(" ",e.xi3(101,43,"cats.service",a.isJsActive),"\n"),e.xp6(4),e.ekj("hide",a.isJsActive),e.xp6(3),e.ekj("hide",!a.isJsActive),e.xp6(15),e.hij(" ",e.xi3(123,46,"cats.service",l.isJsActive),"\n"),e.xp6(4),e.ekj("hide",l.isJsActive),e.xp6(3),e.ekj("hide",!l.isJsActive),e.xp6(18),e.hij(" ",e.xi3(148,49,"cats.service",g.isJsActive),"\n"),e.xp6(4),e.ekj("hide",g.isJsActive),e.xp6(3),e.ekj("hide",!g.isJsActive),e.xp6(62),e.hij(" ",e.xi3(217,52,"cats.service",m.isJsActive),"\n"),e.xp6(4),e.ekj("hide",m.isJsActive),e.xp6(3),e.ekj("hide",!m.isJsActive),e.xp6(39),e.hij(" ",e.xi3(263,55,"cats.service",_.isJsActive),"\n"),e.xp6(4),e.ekj("hide",_.isJsActive),e.xp6(3),e.ekj("hide",!_.isJsActive)}},dependencies:[U.n,p.U,T.E,Z.rH,A.F],encapsulation:2,changeDetection:0})),n})();var S=c(8568);const M=[{path:"dynamic-modules",component:x,data:{title:"Modules dynamiques"}},{path:"dependency-injection",redirectTo:"custom-providers"},{path:"custom-providers",component:y,data:{title:"Fournisseurs personnalis\xe9s"}},{path:"platform-agnosticism",component:(()=>{class n extends d.y{}return(0,i.Z)(n,"\u0275fac",function(){let t;return function(s){return(t||(t=e.n5z(n)))(s||n)}}()),(0,i.Z)(n,"\u0275cmp",e.Xpm({type:n,selectors:[["app-platform-agnosticism"]],features:[e.qOj],decls:41,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/Lou8is/docs.nestjs.fr/edit/main/content/fundamentals/platform-agnosticism.md","aria-label","Proposer des modifications","title","Proposer des modifications"],[1,"fas","fa-edit"],["id","agnosticisme-de-plateforme"],["appAnchor","","id","construire-une-fois-utiliser-partout"],["routerLink","/microservices/basics"],["routerLink","/websockets/gateways"],["routerLink","/graphql/quick-start"],["href","/application-context"]],template:function(o,s){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Agnosticisme de plateforme"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Nest est un framework ind\xe9pendant de toute plateforme. Cela signifie que vous pouvez d\xe9velopper des "),e.TgZ(9,"strong"),e._uU(10,"parties logiques r\xe9utilisables"),e.qZA(),e._uU(11," qui peuvent \xeatre utilis\xe9es dans diff\xe9rents types d'applications. Par exemple, la plupart des composants peuvent \xeatre r\xe9utilis\xe9s sans changement \xe0 travers diff\xe9rents frameworks de serveurs HTTP sous-jacents (par exemple, Express et Fastify), et m\xeame \xe0 travers diff\xe9rents "),e.TgZ(12,"em"),e._uU(13,"types"),e.qZA(),e._uU(14," d'applications (par exemple, des frameworks de serveurs HTTP, des microservices avec diff\xe9rentes couches de transport, et des WebSockets)."),e.qZA(),e.TgZ(15,"h4",6)(16,"span"),e._uU(17,"Construire une fois, utiliser partout"),e.qZA()(),e.TgZ(18,"p"),e._uU(19,"La section "),e.TgZ(20,"strong"),e._uU(21,"Vue d'ensemble"),e.qZA(),e._uU(22," de la documentation montre principalement des techniques de codage utilisant des frameworks de serveurs HTTP (par exemple, des applications fournissant une API REST ou fournissant une application rendue c\xf4t\xe9 serveur de style MVC). Cependant, tous ces blocs de construction peuvent \xeatre utilis\xe9s au-dessus de diff\xe9rentes couches de transport ("),e.TgZ(23,"a",7),e._uU(24,"microservices"),e.qZA(),e._uU(25," ou "),e.TgZ(26,"a",8),e._uU(27,"websockets"),e.qZA(),e._uU(28,")."),e.qZA(),e.TgZ(29,"p"),e._uU(30,"En outre, Nest est livr\xe9 avec un module "),e.TgZ(31,"a",9),e._uU(32,"GraphQL"),e.qZA(),e._uU(33," d\xe9di\xe9. Vous pouvez utiliser GraphQL comme couche d'API de mani\xe8re interchangeable avec une API REST."),e.qZA(),e.TgZ(34,"p"),e._uU(35,"En outre, la fonctionnalit\xe9 de "),e.TgZ(36,"a",10),e._uU(37,"contexte d'application"),e.qZA(),e._uU(38," permet de cr\xe9er n'importe quel type d'application Node.js - y compris des t\xe2ches CRON et des applications CLI - au-dessus de Nest."),e.qZA(),e.TgZ(39,"p"),e._uU(40,"Nest aspire \xe0 \xeatre une plateforme \xe0 part enti\xe8re pour les applications Node.js qui apporte un niveau sup\xe9rieur de modularit\xe9 et de r\xe9utilisation \xe0 vos applications. Construisez une fois, utilisez partout !"),e.qZA()())},dependencies:[p.U,Z.rH],encapsulation:2,changeDetection:0})),n})(),data:{title:"Agnosticisme de plateforme"}},{path:"async-components",redirectTo:"async-providers"},{path:"async-providers",component:v,data:{title:"Fournisseurs asynchrones"}},{path:"module-ref",component:j,data:{title:"R\xe9f\xe9rence de module"}},{path:"lazy-loading-modules",component:(()=>{class n extends d.y{}return(0,i.Z)(n,"\u0275fac",function(){let t;return function(s){return(t||(t=e.n5z(n)))(s||n)}}()),(0,i.Z)(n,"\u0275cmp",e.Xpm({type:n,selectors:[["app-lazy-loading"]],features:[e.qOj],decls:217,vars:8,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/Lou8is/docs.nestjs.fr/edit/main/content/fundamentals/lazy-loading-modules.md","aria-label","Proposer des modifications","title","Proposer des modifications"],[1,"fas","fa-edit"],["id","lazy-loading-de-modules"],[1,"info"],[1,"warning"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/fundamentals/lifecycle-events"],["appAnchor","","id","pour-commencer"],[1,"filename"],["appa94d5d4d3132482e852cef21f64291a8f24a91fa",""],[1,"language-typescript"],[1,"language-bash"],["routerLink","/fundamentals/module-ref"],[1,"language-json"],["rel","nofollow","target","_blank","href","https://webpack.js.org/guides/code-splitting/"],["appAnchor","","id","contr\xf4leurs-passerelles-et-r\xe9solveurs-paresseux"],[1,"error"],["routerLink","/graphql/resolvers"],["routerLink","/websockets/gateways"],["appAnchor","","id","cas-dutilisation-courants"]],template:function(o,s){if(1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Lazy-loading de modules"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Par d\xe9faut, les modules sont charg\xe9s avec avidit\xe9, ce qui signifie que d\xe8s que l'application est charg\xe9e, tous les modules le sont aussi, qu'ils soient n\xe9cessaires ou non dans l'imm\xe9diat. Bien que cela convienne \xe0 la plupart des applications, cela peut devenir un goulot d'\xe9tranglement pour les applications/travailleurs fonctionnant dans un "),e.TgZ(9,"strong"),e._uU(10,"environnement sans serveur"),e.qZA(),e._uU(11,', o\xf9 la latence de d\xe9marrage ("d\xe9marrage \xe0 froid") est cruciale.'),e.qZA(),e.TgZ(12,"p"),e._uU(13,"Le lazy loading peut aider \xe0 r\xe9duire le temps de d\xe9marrage en chargeant uniquement les modules requis par l'invocation sp\xe9cifique de la fonction serverless. En outre, vous pouvez \xe9galement charger d'autres modules de mani\xe8re asynchrone une fois que la fonction sans serveur est \"chaude\" afin d'acc\xe9l\xe9rer encore davantage le temps d'amor\xe7age pour les appels ult\xe9rieurs (enregistrement diff\xe9r\xe9 des modules)."),e.qZA(),e.TgZ(14,"blockquote",6)(15,"strong"),e._uU(16,"Astuce"),e.qZA(),e._uU(17," Si vous \xeates familier avec le framework "),e.TgZ(18,"strong"),e._uU(19,"Angular"),e.qZA(),e._uU(20,', vous avez peut-\xeatre d\xe9j\xe0 vu le terme " modules lazy-loading ". Sachez que cette technique est '),e.TgZ(21,"strong"),e._uU(22,"fonctionnellement diff\xe9rente"),e.qZA(),e._uU(23," dans Nest et qu'il s'agit donc d'une fonctionnalit\xe9 enti\xe8rement diff\xe9rente qui partage des conventions de d\xe9nomination similaires.\n"),e.qZA(),e.TgZ(24,"blockquote",7)(25,"strong"),e._uU(26,"Attention"),e.qZA(),e._uU(27," Notez que les "),e.TgZ(28,"a",8),e._uU(29,"m\xe9thodes d'accrochage au cycle de vie"),e.qZA(),e._uU(30," ne sont pas invoqu\xe9es dans les modules et services charg\xe9s paresseusement.\n"),e.qZA(),e.TgZ(31,"h4",9)(32,"span"),e._uU(33,"Pour commencer"),e.qZA()(),e.TgZ(34,"p"),e._uU(35,"Pour charger les modules \xe0 la demande, Nest fournit la classe "),e.TgZ(36,"code"),e._uU(37,"LazyModuleLoader"),e.qZA(),e._uU(38," qui peut \xeatre inject\xe9e dans une classe de la mani\xe8re habituelle :"),e.qZA(),e.TgZ(39,"span",10),e._uU(40),e.ALo(41,"extension"),e._UZ(42,"app-tabs",null,11),e.qZA(),e.TgZ(44,"pre")(45,"code",12),e._uU(46,"\n@Injectable()\nexport class CatsService {\n  constructor(private lazyModuleLoader: LazyModuleLoader) {}\n}\n"),e.qZA()(),e.TgZ(47,"pre")(48,"code",12),e._uU(49,"\n@Injectable()\n@Dependencies(LazyModuleLoader)\nexport class CatsService {\n  constructor(lazyModuleLoader) {\n    this.lazyModuleLoader = lazyModuleLoader;\n  }\n}\n"),e.qZA()(),e.TgZ(50,"blockquote",6)(51,"strong"),e._uU(52,"Astuce"),e.qZA(),e._uU(53," La classe "),e.TgZ(54,"code"),e._uU(55,"LazyModuleLoader"),e.qZA(),e._uU(56," est import\xe9e du package "),e.TgZ(57,"code"),e._uU(58,"@nestjs/core"),e.qZA(),e._uU(59,".\n"),e.qZA(),e.TgZ(60,"p"),e._uU(61,"Alternativement, vous pouvez obtenir une r\xe9f\xe9rence au fournisseur "),e.TgZ(62,"code"),e._uU(63,"LazyModuleLoader"),e.qZA(),e._uU(64," depuis le fichier de d\xe9marrage de votre application ("),e.TgZ(65,"code"),e._uU(66,"main.ts"),e.qZA(),e._uU(67,"), comme suit :"),e.qZA(),e.TgZ(68,"pre")(69,"code",12),e._uU(70,'\n// "app" repr\xe9sente une instance d\'application Nest\nconst lazyModuleLoader = app.get(LazyModuleLoader);\n'),e.qZA()(),e.TgZ(71,"p"),e._uU(72,"Une fois cette \xe9tape franchie, vous pouvez charger n'importe quel module \xe0 l'aide de la construction suivante :"),e.qZA(),e.TgZ(73,"pre")(74,"code",12),e._uU(75,"\nconst { LazyModule } = await import('./lazy.module');\nconst moduleRef = await this.lazyModuleLoader.load(() => LazyModule);\n"),e.qZA()(),e.TgZ(76,"blockquote",6)(77,"strong"),e._uU(78,"Astuce"),e.qZA(),e._uU(79,' Les modules "charg\xe9s paresseusement" sont '),e.TgZ(80,"strong"),e._uU(81,"mis en cache"),e.qZA(),e._uU(82," lors de la premi\xe8re invocation de la m\xe9thode "),e.TgZ(83,"code"),e._uU(84,"LazyModuleLoader#load"),e.qZA(),e._uU(85,". Cela signifie que chaque tentative cons\xe9cutive de chargement de "),e.TgZ(86,"code"),e._uU(87,"LazyModule"),e.qZA(),e._uU(88," sera "),e.TgZ(89,"strong"),e._uU(90,"tr\xe8s rapide"),e.qZA(),e._uU(91," et retournera une instance mise en cache, au lieu de charger \xe0 nouveau le module.\n"),e.TgZ(92,"pre")(93,"code",13),e._uU(94,'\nTentative de chargement de "LazyModule" : 1\ndur\xe9e: 2.379ms\nTentative de chargement de "LazyModule" : 2\ndur\xe9e: 0.294ms\nTentative de chargement de "LazyModule" : 3\ndur\xe9e: 0.303ms\n'),e.qZA()(),e.TgZ(95,"p"),e._uU(96,'En outre, les modules "charg\xe9s paresseusement" partagent le m\xeame graphe de modules que ceux qui sont charg\xe9s avec empressement au d\xe9marrage de l\'application, ainsi que tous les autres modules paresseux enregistr\xe9s ult\xe9rieurement dans votre application.\nWhere '),e.TgZ(97,"code"),e._uU(98,"lazy.module.ts"),e.qZA(),e._uU(99," is a TypeScript file that exports a "),e.TgZ(100,"strong"),e._uU(101,"regular Nest module"),e.qZA(),e._uU(102," (no extra changes are required)."),e.qZA()(),e.TgZ(103,"p"),e._uU(104,"La m\xe9thode "),e.TgZ(105,"code"),e._uU(106,"LazyModuleLoader#load"),e.qZA(),e._uU(107," renvoie la "),e.TgZ(108,"a",14),e._uU(109,"r\xe9f\xe9rence de module"),e.qZA(),e._uU(110," (de "),e.TgZ(111,"code"),e._uU(112,"LazyModule"),e.qZA(),e._uU(113,") qui vous permet de naviguer dans la liste interne des fournisseurs et d'obtenir une r\xe9f\xe9rence \xe0 n'importe quel fournisseur en utilisant son jeton d'injection comme cl\xe9 de recherche."),e.qZA(),e.TgZ(114,"p"),e._uU(115,"Par exemple, disons que nous avons un "),e.TgZ(116,"code"),e._uU(117,"LazyModule"),e.qZA(),e._uU(118," avec la d\xe9finition suivante :"),e.qZA(),e.TgZ(119,"pre")(120,"code",12),e._uU(121,"\n@Module({\n  providers: [LazyService],\n  exports: [LazyService],\n})\nexport class LazyModule {}\n"),e.qZA()(),e.TgZ(122,"blockquote",6)(123,"strong"),e._uU(124,"Astuce"),e.qZA(),e._uU(125," Les modules charg\xe9s paresseusement ne peuvent pas \xeatre enregistr\xe9s en tant que "),e.TgZ(126,"strong"),e._uU(127,"modules globaux"),e.qZA(),e._uU(128,", car cela n'a aucun sens (puisqu'ils sont enregistr\xe9s paresseusement, \xe0 la demande, lorsque tous les modules enregistr\xe9s statiquement ont d\xe9j\xe0 \xe9t\xe9 instanci\xe9s). De m\xeame, les "),e.TgZ(129,"strong"),e._uU(130,"am\xe9liorateurs globaux"),e.qZA(),e._uU(131," enregistr\xe9s (gardes/intercepteurs/etc.) "),e.TgZ(132,"strong"),e._uU(133,"ne fonctionneront pas"),e.qZA(),e._uU(134," correctement non plus.\n"),e.qZA(),e.TgZ(135,"p"),e._uU(136,"Avec cela, nous pouvons obtenir une r\xe9f\xe9rence au fournisseur "),e.TgZ(137,"code"),e._uU(138,"LazyService"),e.qZA(),e._uU(139,", comme suit :"),e.qZA(),e.TgZ(140,"pre")(141,"code",12),e._uU(142,"\nconst { LazyModule } = await import('./lazy.module');\nconst moduleRef = await this.lazyModuleLoader.load(() => LazyModule);\n\nconst { LazyService } = await import('./lazy.service');\nconst lazyService = moduleRef.get(LazyService);\n"),e.qZA()(),e.TgZ(143,"blockquote",7)(144,"strong"),e._uU(145,"Attention"),e.qZA(),e._uU(146," Si vous utilisez "),e.TgZ(147,"strong"),e._uU(148,"Webpack"),e.qZA(),e._uU(149,", assurez-vous de mettre \xe0 jour votre fichier "),e.TgZ(150,"code"),e._uU(151,"tsconfig.json"),e.qZA(),e._uU(152," - en r\xe9glant "),e.TgZ(153,"code"),e._uU(154,"compilerOptions.module"),e.qZA(),e._uU(155," sur "),e.TgZ(156,"code"),e._uU(157,'"esnext"'),e.qZA(),e._uU(158," et en ajoutant la propri\xe9t\xe9 "),e.TgZ(159,"code"),e._uU(160,"compilerOptions.moduleResolution"),e.qZA(),e._uU(161," avec "),e.TgZ(162,"code"),e._uU(163,'"node"'),e.qZA(),e._uU(164," comme valeur :\n"),e.TgZ(165,"pre")(166,"code",15),e._uU(167,'\n{\n  "compilerOptions": {\n    "module": "esnext",\n    "moduleResolution": "node",\n    ...\n  }\n}\n'),e.qZA()(),e.TgZ(168,"p"),e._uU(169,"Une fois ces options param\xe9tr\xe9es, vous pourrez tirer parti de la fonction de "),e.TgZ(170,"a",16),e._uU(171,"division du code"),e.qZA(),e._uU(172,"."),e.qZA()(),e.TgZ(173,"h4",17)(174,"span"),e._uU(175,"Contr\xf4leurs, passerelles et r\xe9solveurs paresseux"),e.qZA()(),e.TgZ(176,"p"),e._uU(177,"Puisque les contr\xf4leurs (ou les r\xe9solveurs dans les applications GraphQL) dans Nest repr\xe9sentent des ensembles de routes/chemins/sujets (ou requ\xeates/mutations), vous "),e.TgZ(178,"strong"),e._uU(179,"ne pouvez pas les charger paresseusement"),e.qZA(),e._uU(180," en utilisant la classe "),e.TgZ(181,"code"),e._uU(182,"LazyModuleLoader"),e.qZA(),e._uU(183,"."),e.qZA(),e.TgZ(184,"blockquote",18)(185,"strong"),e._uU(186,"Attention"),e.qZA(),e._uU(187," Les contr\xf4leurs, les "),e.TgZ(188,"a",19),e._uU(189,"r\xe9solveurs"),e.qZA(),e._uU(190,", et les "),e.TgZ(191,"a",20),e._uU(192,"passerelles"),e.qZA(),e._uU(193," enregistr\xe9s dans des modules charg\xe9s paresseusement ne se comporteront pas comme pr\xe9vu. De m\xeame, vous ne pouvez pas enregistrer des fonctions middleware (en impl\xe9mentant l'interface "),e.TgZ(194,"code"),e._uU(195,"MiddlewareConsumer"),e.qZA(),e._uU(196,") \xe0 la demande.\n"),e.qZA(),e.TgZ(197,"p"),e._uU(198,"Par exemple, disons que vous construisez une API REST (application HTTP) avec un pilote Fastify sous le capot (en utilisant le package "),e.TgZ(199,"code"),e._uU(200,"@nestjs/platform-fastify"),e.qZA(),e._uU(201,"). Fastify ne vous permet pas d'enregistrer des routes apr\xe8s que l'application soit pr\xeate \xe0 \xe9couter des messages. Cela signifie que m\xeame si nous analysons les routes enregistr\xe9es dans les contr\xf4leurs du module, toutes les routes charg\xe9es paresseusement ne seront pas accessibles puisqu'il n'y a aucun moyen de les enregistrer au moment de l'ex\xe9cution."),e.qZA(),e.TgZ(202,"p"),e._uU(203,"De m\xeame, certaines strat\xe9gies de transport que nous fournissons dans le cadre du package "),e.TgZ(204,"code"),e._uU(205,"@nestjs/microservices"),e.qZA(),e._uU(206," (y compris Kafka, gRPC, ou RabbitMQ) n\xe9cessitent de s'abonner/\xe9couter \xe0 des sujets/canaux sp\xe9cifiques avant que la connexion ne soit \xe9tablie. Une fois que votre application commence \xe0 \xe9couter des messages, le framework ne sera pas en mesure de s'abonner/\xe9couter de nouveaux sujets."),e.qZA(),e.TgZ(207,"p"),e._uU(208,"Enfin, le package "),e.TgZ(209,"code"),e._uU(210,"@nestjs/graphql"),e.qZA(),e._uU(211," avec l'approche code first activ\xe9e g\xe9n\xe8re automatiquement le sch\xe9ma GraphQL \xe0 la vol\xe9e sur la base des m\xe9tadonn\xe9es. Cela signifie que toutes les classes doivent \xeatre charg\xe9es au pr\xe9alable. Sinon, il ne serait pas possible de cr\xe9er un sch\xe9ma appropri\xe9 et valide."),e.qZA(),e.TgZ(212,"h4",21)(213,"span"),e._uU(214,"Cas d'utilisation courants"),e.qZA()(),e.TgZ(215,"p"),e._uU(216,"Le plus souvent, vous verrez des modules charg\xe9s paresseusement dans des situations o\xf9 votre worker/cron job/lambda & serverless fonction/webhook doit d\xe9clencher diff\xe9rents services (diff\xe9rentes logiques) en fonction des arguments d'entr\xe9e (chemin d'acc\xe8s/date/param\xe8tres de requ\xeate, etc.). D'autre part, les modules \xe0 chargement paresseux peuvent ne pas avoir trop de sens pour les applications monolithiques, o\xf9 le temps de d\xe9marrage est plut\xf4t sans importance."),e.qZA()()),2&o){const u=e.MAs(43);e.xp6(40),e.hij(" ",e.xi3(41,5,"cats.service",u.isJsActive),"\n"),e.xp6(4),e.ekj("hide",u.isJsActive),e.xp6(3),e.ekj("hide",!u.isJsActive)}},dependencies:[U.n,p.U,Z.rH,A.F],encapsulation:2,changeDetection:0})),n})(),data:{title:"Lazy-loading de modules"}},{path:"unit-testing",redirectTo:"testing"},{path:"e2e-testing",redirectTo:"testing"},{path:"testing",component:(()=>{class n extends d.y{}return(0,i.Z)(n,"\u0275fac",function(){let t;return function(s){return(t||(t=e.n5z(n)))(s||n)}}()),(0,i.Z)(n,"\u0275cmp",e.Xpm({type:n,selectors:[["app-unit-testing"]],features:[e.qOj],decls:551,vars:24,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/Lou8is/docs.nestjs.fr/edit/main/content/fundamentals/unit-testing.md","aria-label","Proposer des modifications","title","Proposer des modifications"],[1,"fas","fa-edit"],["id","testing"],["rel","nofollow","target","_blank","href","https://github.com/facebook/jest"],["rel","nofollow","target","_blank","href","https://github.com/visionmedia/supertest"],["appAnchor","","id","installation"],[1,"language-bash"],["appAnchor","","id","unit-testing"],[1,"filename"],["app36246b4412b5c693431f394f91bf33e900f5ca8f",""],[1,"language-typescript"],[1,"info"],["appAnchor","","id","testing-utilities"],["app5cc18e0373f13b76eca1f60a29fcae30fbc92128",""],["routerLink","/fundamentals/module-ref"],[1,"warning"],["routerLink","/fundamentals/custom-providers"],["appAnchor","","id","auto-mocking"],["rel","nofollow","target","_blank","href","https://www.npmjs.com/package/jest-mock"],["rel","nofollow","target","_blank","href","https://github.com/golevelup/nestjs/tree/master/packages/testing"],["appAnchor","","id","end-to-end-testing"],["appaead5a92e42538bfeb8fc33534449177376890ea",""],["routerLink","/techniques/performance"],[1,"language-ts"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/fundamentals/custom-providers"],["rel","nofollow","target","_blank","href","https://en.wikipedia.org/wiki/Fluent_interface"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/issues/4053#issuecomment-585612462"],["href","/fundamentals/module-ref"],["appAnchor","","id","overriding-globally-registered-enhancers"],["appAnchor","","id","testing-request-scoped-instances"],["routerLink","/fundamentals/injection-scopes"],["href","https://docs.nestjs.com/fundamentals/module-ref#resolving-scoped-providers"]],template:function(o,s){if(1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Testing"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Automated testing is considered an essential part of any serious software development effort. Automation makes it easy to repeat individual tests or test suites quickly and easily during development. This helps ensure that releases meet quality and performance goals. Automation helps increase coverage and provides a faster feedback loop to developers. Automation both increases the productivity of individual developers and ensures that tests are run at critical development lifecycle junctures, such as source code control check-in, feature integration, and version release."),e.qZA(),e.TgZ(9,"p"),e._uU(10,"Such tests often span a variety of types, including unit tests, end-to-end (e2e) tests, integration tests, and so on. While the benefits are unquestionable, it can be tedious to set them up. Nest strives to promote development best practices, including effective testing, so it includes features such as the following to help developers and teams build and automate tests. Nest:"),e.qZA(),e.TgZ(11,"ul")(12,"li"),e._uU(13,"automatically scaffolds default unit tests for components and e2e tests for applications"),e.qZA(),e.TgZ(14,"li"),e._uU(15,"provides default tooling (such as a test runner that builds an isolated module/application loader)"),e.qZA(),e.TgZ(16,"li"),e._uU(17,"provides integration with "),e.TgZ(18,"a",6),e._uU(19,"Jest"),e.qZA(),e._uU(20," and "),e.TgZ(21,"a",7),e._uU(22,"Supertest"),e.qZA(),e._uU(23," out-of-the-box, while remaining agnostic to testing tools"),e.qZA(),e.TgZ(24,"li"),e._uU(25,"makes the Nest dependency injection system available in the testing environment for easily mocking components"),e.qZA()(),e.TgZ(26,"p"),e._uU(27,"As mentioned, you can use any "),e.TgZ(28,"strong"),e._uU(29,"testing framework"),e.qZA(),e._uU(30," that you like, as Nest doesn't force any specific tooling. Simply replace the elements needed (such as the test runner), and you will still enjoy the benefits of Nest's ready-made testing facilities."),e.qZA(),e.TgZ(31,"h4",8)(32,"span"),e._uU(33,"Installation"),e.qZA()(),e.TgZ(34,"p"),e._uU(35,"To get started, first install the required package:"),e.qZA(),e.TgZ(36,"pre")(37,"code",9),e._uU(38,"\n$ npm i --save-dev @nestjs/testing\n"),e.qZA()(),e.TgZ(39,"h4",10)(40,"span"),e._uU(41,"Unit testing"),e.qZA()(),e.TgZ(42,"p"),e._uU(43,"In the following example, we test two classes: "),e.TgZ(44,"code"),e._uU(45,"CatsController"),e.qZA(),e._uU(46," and "),e.TgZ(47,"code"),e._uU(48,"CatsService"),e.qZA(),e._uU(49,". As mentioned, "),e.TgZ(50,"a",6),e._uU(51,"Jest"),e.qZA(),e._uU(52," is provided as the default testing framework. It serves as a test-runner and also provides assert functions and test-double utilities that help with mocking, spying, etc. In the following basic test, we manually instantiate these classes, and ensure that the controller and service fulfill their API contract."),e.qZA(),e.TgZ(53,"span",11),e._uU(54),e.ALo(55,"extension"),e._UZ(56,"app-tabs",null,12),e.qZA(),e.TgZ(58,"pre")(59,"code",13),e._uU(60,"\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\n\ndescribe('CatsController', () => {\n  let catsController: CatsController;\n  let catsService: CatsService;\n\n  beforeEach(() => {\n    catsService = new CatsService();\n    catsController = new CatsController(catsService);\n  });\n\n  describe('findAll', () => {\n    it('should return an array of cats', async () => {\n      const result = ['test'];\n      jest.spyOn(catsService, 'findAll').mockImplementation(() => result);\n\n      expect(await catsController.findAll()).toBe(result);\n    });\n  });\n});\n"),e.qZA()(),e.TgZ(61,"pre")(62,"code",13),e._uU(63,"\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\n\ndescribe('CatsController', () => {\n  let catsController;\n  let catsService;\n\n  beforeEach(() => {\n    catsService = new CatsService();\n    catsController = new CatsController(catsService);\n  });\n\n  describe('findAll', () => {\n    it('should return an array of cats', async () => {\n      const result = ['test'];\n      jest.spyOn(catsService, 'findAll').mockImplementation(() => result);\n\n      expect(await catsController.findAll()).toBe(result);\n    });\n  });\n});\n"),e.qZA()(),e.TgZ(64,"blockquote",14)(65,"strong"),e._uU(66,"Hint"),e.qZA(),e._uU(67," Keep your test files located near the classes they test. Testing files should have a "),e.TgZ(68,"code"),e._uU(69,".spec"),e.qZA(),e._uU(70," or "),e.TgZ(71,"code"),e._uU(72,".test"),e.qZA(),e._uU(73," suffix.\n"),e.qZA(),e.TgZ(74,"p"),e._uU(75,"Because the above sample is trivial, we aren't really testing anything Nest-specific. Indeed, we aren't even using dependency injection (notice that we pass an instance of "),e.TgZ(76,"code"),e._uU(77,"CatsService"),e.qZA(),e._uU(78," to our "),e.TgZ(79,"code"),e._uU(80,"catsController"),e.qZA(),e._uU(81,"). This form of testing - where we manually instantiate the classes being tested - is often called "),e.TgZ(82,"strong"),e._uU(83,"isolated testing"),e.qZA(),e._uU(84," as it is independent from the framework. Let's introduce some more advanced capabilities that help you test applications that make more extensive use of Nest features."),e.qZA(),e.TgZ(85,"h4",15)(86,"span"),e._uU(87,"Testing utilities"),e.qZA()(),e.TgZ(88,"p"),e._uU(89,"The "),e.TgZ(90,"code"),e._uU(91,"@nestjs/testing"),e.qZA(),e._uU(92," package provides a set of utilities that enable a more robust testing process. Let's rewrite the previous example using the built-in "),e.TgZ(93,"code"),e._uU(94,"Test"),e.qZA(),e._uU(95," class:"),e.qZA(),e.TgZ(96,"span",11),e._uU(97),e.ALo(98,"extension"),e._UZ(99,"app-tabs",null,16),e.qZA(),e.TgZ(101,"pre")(102,"code",13),e._uU(103,"\nimport { Test } from '@nestjs/testing';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\n\ndescribe('CatsController', () => {\n  let catsController: CatsController;\n  let catsService: CatsService;\n\n  beforeEach(async () => {\n    const moduleRef = await Test.createTestingModule({\n        controllers: [CatsController],\n        providers: [CatsService],\n      }).compile();\n\n    catsService = moduleRef.get<CatsService>(CatsService);\n    catsController = moduleRef.get<CatsController>(CatsController);\n  });\n\n  describe('findAll', () => {\n    it('should return an array of cats', async () => {\n      const result = ['test'];\n      jest.spyOn(catsService, 'findAll').mockImplementation(() => result);\n\n      expect(await catsController.findAll()).toBe(result);\n    });\n  });\n});\n"),e.qZA()(),e.TgZ(104,"pre")(105,"code",13),e._uU(106,"\nimport { Test } from '@nestjs/testing';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\n\ndescribe('CatsController', () => {\n  let catsController;\n  let catsService;\n\n  beforeEach(async () => {\n    const moduleRef = await Test.createTestingModule({\n        controllers: [CatsController],\n        providers: [CatsService],\n      }).compile();\n\n    catsService = moduleRef.get(CatsService);\n    catsController = moduleRef.get(CatsController);\n  });\n\n  describe('findAll', () => {\n    it('should return an array of cats', async () => {\n      const result = ['test'];\n      jest.spyOn(catsService, 'findAll').mockImplementation(() => result);\n\n      expect(await catsController.findAll()).toBe(result);\n    });\n  });\n});\n"),e.qZA()(),e.TgZ(107,"p"),e._uU(108,"The "),e.TgZ(109,"code"),e._uU(110,"Test"),e.qZA(),e._uU(111," class is useful for providing an application execution context that essentially mocks the full Nest runtime, but gives you hooks that make it easy to manage class instances, including mocking and overriding. The "),e.TgZ(112,"code"),e._uU(113,"Test"),e.qZA(),e._uU(114," class has a "),e.TgZ(115,"code"),e._uU(116,"createTestingModule()"),e.qZA(),e._uU(117," method that takes a module metadata object as its argument (the same object you pass to the "),e.TgZ(118,"code"),e._uU(119,"@Module()"),e.qZA(),e._uU(120," decorator). This method returns a "),e.TgZ(121,"code"),e._uU(122,"TestingModule"),e.qZA(),e._uU(123," instance which in turn provides a few methods. For unit tests, the important one is the "),e.TgZ(124,"code"),e._uU(125,"compile()"),e.qZA(),e._uU(126," method. This method bootstraps a module with its dependencies (similar to the way an application is bootstrapped in the conventional "),e.TgZ(127,"code"),e._uU(128,"main.ts"),e.qZA(),e._uU(129," file using "),e.TgZ(130,"code"),e._uU(131,"NestFactory.create()"),e.qZA(),e._uU(132,"), and returns a module that is ready for testing."),e.qZA(),e.TgZ(133,"blockquote",14)(134,"strong"),e._uU(135,"Hint"),e.qZA(),e._uU(136," The "),e.TgZ(137,"code"),e._uU(138,"compile()"),e.qZA(),e._uU(139," method is "),e.TgZ(140,"strong"),e._uU(141,"asynchronous"),e.qZA(),e._uU(142," and therefore has to be awaited. Once the module is compiled you can retrieve any "),e.TgZ(143,"strong"),e._uU(144,"static"),e.qZA(),e._uU(145," instance it declares (controllers and providers) using the "),e.TgZ(146,"code"),e._uU(147,"get()"),e.qZA(),e._uU(148," method.\n"),e.qZA(),e.TgZ(149,"p")(150,"code"),e._uU(151,"TestingModule"),e.qZA(),e._uU(152," inherits from the "),e.TgZ(153,"a",17),e._uU(154,"module reference"),e.qZA(),e._uU(155," class, and therefore its ability to dynamically resolve scoped providers (transient or request-scoped). Do this with the "),e.TgZ(156,"code"),e._uU(157,"resolve()"),e.qZA(),e._uU(158," method (the "),e.TgZ(159,"code"),e._uU(160,"get()"),e.qZA(),e._uU(161," method can only retrieve static instances)."),e.qZA(),e.TgZ(162,"pre")(163,"code",13),e._uU(164,"\nconst moduleRef = await Test.createTestingModule({\n  controllers: [CatsController],\n  providers: [CatsService],\n}).compile();\n\ncatsService = await moduleRef.resolve(CatsService);\n"),e.qZA()(),e.TgZ(165,"blockquote",18)(166,"strong"),e._uU(167,"Warning"),e.qZA(),e._uU(168," The "),e.TgZ(169,"code"),e._uU(170,"resolve()"),e.qZA(),e._uU(171," method returns a unique instance of the provider, from its own "),e.TgZ(172,"strong"),e._uU(173,"DI container sub-tree"),e.qZA(),e._uU(174,". Each sub-tree has a unique context identifier. Thus, if you call this method more than once and compare instance references, you will see that they are not equal.\n"),e.qZA(),e.TgZ(175,"blockquote",14)(176,"strong"),e._uU(177,"Hint"),e.qZA(),e._uU(178," Learn more about the module reference features "),e.TgZ(179,"a",17),e._uU(180,"here"),e.qZA(),e._uU(181,".\n"),e.qZA(),e.TgZ(182,"p"),e._uU(183,"Instead of using the production version of any provider, you can override it with a "),e.TgZ(184,"a",19),e._uU(185,"custom provider"),e.qZA(),e._uU(186," for testing purposes. For example, you can mock a database service instead of connecting to a live database. We'll cover overrides in the next section, but they're available for unit tests as well."),e.qZA(),e.TgZ(187,"p"),e._UZ(188,"app-banner-courses"),e.qZA(),e.TgZ(189,"h4",20)(190,"span"),e._uU(191,"Auto mocking"),e.qZA()(),e.TgZ(192,"p"),e._uU(193,"Nest also allows you to define a mock factory to apply to all of your missing dependencies. This is useful for cases where you have a large number of dependencies in a class and mocking all of them will take a long time and a lot of setup. To make use of this feature, the "),e.TgZ(194,"code"),e._uU(195,"createTestingModule()"),e.qZA(),e._uU(196," will need to be chained up with the "),e.TgZ(197,"code"),e._uU(198,"useMocker()"),e.qZA(),e._uU(199," method, passing a factory for your dependency mocks. This factory can take in an optional token, which is an instance token, any token which is valid for a Nest provider, and returns a mock implementation. The below is an example of creating a generic mocker using "),e.TgZ(200,"a",21)(201,"code"),e._uU(202,"jest-mock"),e.qZA()(),e._uU(203," and a specific mock for "),e.TgZ(204,"code"),e._uU(205,"CatsService"),e.qZA(),e._uU(206," using "),e.TgZ(207,"code"),e._uU(208,"jest.fn()"),e.qZA(),e._uU(209,"."),e.qZA(),e.TgZ(210,"pre")(211,"code",13),e._uU(212,"\n// ...\nimport { ModuleMocker, MockFunctionMetadata } from 'jest-mock';\n\nconst moduleMocker = new ModuleMocker(global);\n\ndescribe('CatsController', () => {\n  let controller: CatsController;\n\n  beforeEach(async () => {\n    const moduleRef = await Test.createTestingModule({\n      controllers: [CatsController],\n    })\n      .useMocker((token) => {\n        const results = ['test1', 'test2'];\n        if (token === CatsService) {\n          return { findAll: jest.fn().mockResolvedValue(results) };\n        }\n        if (typeof token === 'function') {\n          const mockMetadata = moduleMocker.getMetadata(token) as MockFunctionMetadata<any, any>;\n          const Mock = moduleMocker.generateFromMetadata(mockMetadata);\n          return new Mock();\n        }\n      })\n      .compile();\n\n    controller = moduleRef.get(CatsController);\n  });\n});\n"),e.qZA()(),e.TgZ(213,"p"),e._uU(214,"You can also retrieve these mocks out of the testing container as you normally would custom providers, "),e.TgZ(215,"code"),e._uU(216,"moduleRef.get(CatsService)"),e.qZA(),e._uU(217,"."),e.qZA(),e.TgZ(218,"blockquote",14)(219,"strong"),e._uU(220,"Hint"),e.qZA(),e._uU(221," A general mock factory, like "),e.TgZ(222,"code"),e._uU(223,"createMock"),e.qZA(),e._uU(224," from "),e.TgZ(225,"a",22)(226,"code"),e._uU(227,"@golevelup/ts-jest"),e.qZA()(),e._uU(228," can also be passed directly.\n"),e.qZA(),e.TgZ(229,"blockquote",14)(230,"strong"),e._uU(231,"Hint"),e.qZA(),e.TgZ(232,"code"),e._uU(233,"REQUEST"),e.qZA(),e._uU(234," and "),e.TgZ(235,"code"),e._uU(236,"INQUIRER"),e.qZA(),e._uU(237," providers cannot be auto-mocked because they're already pre-defined in the context. However, they can be "),e.TgZ(238,"em"),e._uU(239,"overwritten"),e.qZA(),e._uU(240," using the custom provider syntax or by utilizing the "),e.TgZ(241,"code"),e._uU(242,".overrideProvider"),e.qZA(),e._uU(243," method.\n"),e.qZA(),e.TgZ(244,"h4",23)(245,"span"),e._uU(246,"End-to-end testing"),e.qZA()(),e.TgZ(247,"p"),e._uU(248,"Unlike unit testing, which focuses on individual modules and classes, end-to-end (e2e) testing covers the interaction of classes and modules at a more aggregate level -- closer to the kind of interaction that end-users will have with the production system. As an application grows, it becomes hard to manually test the end-to-end behavior of each API endpoint. Automated end-to-end tests help us ensure that the overall behavior of the system is correct and meets project requirements. To perform e2e tests we use a similar configuration to the one we just covered in "),e.TgZ(249,"strong"),e._uU(250,"unit testing"),e.qZA(),e._uU(251,". In addition, Nest makes it easy to use the "),e.TgZ(252,"a",7),e._uU(253,"Supertest"),e.qZA(),e._uU(254," library to simulate HTTP requests."),e.qZA(),e.TgZ(255,"span",11),e._uU(256),e.ALo(257,"extension"),e._UZ(258,"app-tabs",null,24),e.qZA(),e.TgZ(260,"pre")(261,"code",13),e._uU(262,"\nimport * as request from 'supertest';\nimport { Test } from '@nestjs/testing';\nimport { CatsModule } from '../../src/cats/cats.module';\nimport { CatsService } from '../../src/cats/cats.service';\nimport { INestApplication } from '@nestjs/common';\n\ndescribe('Cats', () => {\n  let app: INestApplication;\n  let catsService = { findAll: () => ['test'] };\n\n  beforeAll(async () => {\n    const moduleRef = await Test.createTestingModule({\n      imports: [CatsModule],\n    })\n      .overrideProvider(CatsService)\n      .useValue(catsService)\n      .compile();\n\n    app = moduleRef.createNestApplication();\n    await app.init();\n  });\n\n  it(`/GET cats`, () => {\n    return request(app.getHttpServer())\n      .get('/cats')\n      .expect(200)\n      .expect({\n        data: catsService.findAll(),\n      });\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n});\n"),e.qZA()(),e.TgZ(263,"pre")(264,"code",13),e._uU(265,"\nimport * as request from 'supertest';\nimport { Test } from '@nestjs/testing';\nimport { CatsModule } from '../../src/cats/cats.module';\nimport { CatsService } from '../../src/cats/cats.service';\nimport { INestApplication } from '@nestjs/common';\n\ndescribe('Cats', () => {\n  let app: INestApplication;\n  let catsService = { findAll: () => ['test'] };\n\n  beforeAll(async () => {\n    const moduleRef = await Test.createTestingModule({\n      imports: [CatsModule],\n    })\n      .overrideProvider(CatsService)\n      .useValue(catsService)\n      .compile();\n\n    app = moduleRef.createNestApplication();\n    await app.init();\n  });\n\n  it(`/GET cats`, () => {\n    return request(app.getHttpServer())\n      .get('/cats')\n      .expect(200)\n      .expect({\n        data: catsService.findAll(),\n      });\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n});\n"),e.qZA()(),e.TgZ(266,"blockquote",14)(267,"strong"),e._uU(268,"Hint"),e.qZA(),e._uU(269," If you're using "),e.TgZ(270,"a",25),e._uU(271,"Fastify"),e.qZA(),e._uU(272," as your HTTP adapter, it requires a slightly different configuration, and has built-in testing capabilities:\n"),e.TgZ(273,"pre")(274,"code",26),e._uU(275,"\nlet app: NestFastifyApplication;\n\nbeforeAll(async () => {\n  app = moduleRef.createNestApplication<NestFastifyApplication>(new FastifyAdapter());\n\n  await app.init();\n  await app.getHttpAdapter().getInstance().ready();\n});\n\nit(`/GET cats`, () => {\n  return app\n    .inject({\n      method: 'GET',\n      url: '/cats',\n    })\n    .then((result) => {\n      expect(result.statusCode).toEqual(200);\n      expect(result.payload).toEqual(/* expectedPayload */);\n    });\n});\n\nafterAll(async () => {\n  await app.close();\n});\n"),e.qZA()()(),e.TgZ(276,"p"),e._uU(277,"In this example, we build on some of the concepts described earlier. In addition to the "),e.TgZ(278,"code"),e._uU(279,"compile()"),e.qZA(),e._uU(280," method we used earlier, we now use the "),e.TgZ(281,"code"),e._uU(282,"createNestApplication()"),e.qZA(),e._uU(283," method to instantiate a full Nest runtime environment. We save a reference to the running app in our "),e.TgZ(284,"code"),e._uU(285,"app"),e.qZA(),e._uU(286," variable so we can use it to simulate HTTP requests."),e.qZA(),e.TgZ(287,"p"),e._uU(288,"We simulate HTTP tests using the "),e.TgZ(289,"code"),e._uU(290,"request()"),e.qZA(),e._uU(291," function from Supertest. We want these HTTP requests to route to our running Nest app, so we pass the "),e.TgZ(292,"code"),e._uU(293,"request()"),e.qZA(),e._uU(294," function a reference to the HTTP listener that underlies Nest (which, in turn, may be provided by the Express platform). Hence the construction "),e.TgZ(295,"code"),e._uU(296,"request(app.getHttpServer())"),e.qZA(),e._uU(297,". The call to "),e.TgZ(298,"code"),e._uU(299,"request()"),e.qZA(),e._uU(300," hands us a wrapped HTTP Server, now connected to the Nest app, which exposes methods to simulate an actual HTTP request. For example, using "),e.TgZ(301,"code"),e._uU(302,"request(...).get('/cats')"),e.qZA(),e._uU(303," will initiate a request to the Nest app that is identical to an "),e.TgZ(304,"strong"),e._uU(305,"actual"),e.qZA(),e._uU(306," HTTP request like "),e.TgZ(307,"code"),e._uU(308,"get '/cats'"),e.qZA(),e._uU(309," coming in over the network."),e.qZA(),e.TgZ(310,"p"),e._uU(311,"In this example, we also provide an alternate (test-double) implementation of the "),e.TgZ(312,"code"),e._uU(313,"CatsService"),e.qZA(),e._uU(314," which simply returns a hard-coded value that we can test for. Use "),e.TgZ(315,"code"),e._uU(316,"overrideProvider()"),e.qZA(),e._uU(317," to provide such an alternate implementation. Similarly, Nest provides methods to override modules, guards, interceptors, filters and pipes with the "),e.TgZ(318,"code"),e._uU(319,"overrideModule()"),e.qZA(),e._uU(320,", "),e.TgZ(321,"code"),e._uU(322,"overrideGuard()"),e.qZA(),e._uU(323,", "),e.TgZ(324,"code"),e._uU(325,"overrideInterceptor()"),e.qZA(),e._uU(326,", "),e.TgZ(327,"code"),e._uU(328,"overrideFilter()"),e.qZA(),e._uU(329,", and "),e.TgZ(330,"code"),e._uU(331,"overridePipe()"),e.qZA(),e._uU(332," methods respectively."),e.qZA(),e.TgZ(333,"p"),e._uU(334,"Each of the override methods (except for "),e.TgZ(335,"code"),e._uU(336,"overrideModule()"),e.qZA(),e._uU(337,") returns an object with 3 different methods that mirror those described for "),e.TgZ(338,"a",27),e._uU(339,"custom providers"),e.qZA(),e._uU(340,":"),e.qZA(),e.TgZ(341,"ul")(342,"li")(343,"code"),e._uU(344,"useClass"),e.qZA(),e._uU(345,": you supply a class that will be instantiated to provide the instance to override the object (provider, guard, etc.)."),e.qZA(),e.TgZ(346,"li")(347,"code"),e._uU(348,"useValue"),e.qZA(),e._uU(349,": you supply an instance that will override the object."),e.qZA(),e.TgZ(350,"li")(351,"code"),e._uU(352,"useFactory"),e.qZA(),e._uU(353,": you supply a function that returns an instance that will override the object."),e.qZA()(),e.TgZ(354,"p"),e._uU(355,"On the other hand, "),e.TgZ(356,"code"),e._uU(357,"overrideModule()"),e.qZA(),e._uU(358," returns an object with the "),e.TgZ(359,"code"),e._uU(360,"useModule()"),e.qZA(),e._uU(361," method, which you can use to supply a module that will override the original module, as follows:"),e.qZA(),e.TgZ(362,"pre")(363,"code",13),e._uU(364,"\nconst moduleRef = await Test.createTestingModule({\n  imports: [AppModule],\n})\n  .overrideModule(CatsModule)\n  .useModule(AlternateCatsModule)\n  .compile();\n"),e.qZA()(),e.TgZ(365,"p"),e._uU(366,"Each of the override method types, in turn, returns the "),e.TgZ(367,"code"),e._uU(368,"TestingModule"),e.qZA(),e._uU(369," instance, and can thus be chained with other methods in the "),e.TgZ(370,"a",28),e._uU(371,"fluent style"),e.qZA(),e._uU(372,". You should use "),e.TgZ(373,"code"),e._uU(374,"compile()"),e.qZA(),e._uU(375," at the end of such a chain to cause Nest to instantiate and initialize the module."),e.qZA(),e.TgZ(376,"p"),e._uU(377,"Also, sometimes you may want to provide a custom logger e.g. when the tests are run (for example, on a CI server). Use the "),e.TgZ(378,"code"),e._uU(379,"setLogger()"),e.qZA(),e._uU(380," method and pass an object that fulfills the "),e.TgZ(381,"code"),e._uU(382,"LoggerService"),e.qZA(),e._uU(383," interface to instruct the "),e.TgZ(384,"code"),e._uU(385,"TestModuleBuilder"),e.qZA(),e._uU(386,' how to log during tests (by default, only "error" logs will be logged to the console).'),e.qZA(),e.TgZ(387,"blockquote",18)(388,"strong"),e._uU(389,"Warning"),e.qZA(),e._uU(390," The "),e.TgZ(391,"code"),e._uU(392,"@nestjs/core"),e.qZA(),e._uU(393," package exposes unique provider tokens with the "),e.TgZ(394,"code"),e._uU(395,"APP_"),e.qZA(),e._uU(396," prefix to help on define global enhancers. Those tokens cannot be overridden since they can represent multiple providers. Thus you can't use "),e.TgZ(397,"code"),e._uU(398,".overrideProvider(APP_GUARD)"),e.qZA(),e._uU(399," (and so on). If you want to override some global enhancer, follow "),e.TgZ(400,"a",29),e._uU(401,"this workaround"),e.qZA(),e._uU(402,".\n"),e.qZA(),e.TgZ(403,"p"),e._uU(404,"The compiled module has several useful methods, as described in the following table:"),e.qZA(),e.TgZ(405,"table")(406,"tr")(407,"td")(408,"code"),e._uU(409,"createNestApplication()"),e.qZA()(),e.TgZ(410,"td"),e._uU(411," Creates and returns a Nest application ("),e.TgZ(412,"code"),e._uU(413,"INestApplication"),e.qZA(),e._uU(414," instance) based on the given module. Note that you must manually initialize the application using the "),e.TgZ(415,"code"),e._uU(416,"init()"),e.qZA(),e._uU(417," method. "),e.qZA()(),e.TgZ(418,"tr")(419,"td")(420,"code"),e._uU(421,"createNestMicroservice()"),e.qZA()(),e.TgZ(422,"td"),e._uU(423," Creates and returns a Nest microservice ("),e.TgZ(424,"code"),e._uU(425,"INestMicroservice"),e.qZA(),e._uU(426," instance) based on the given module. "),e.qZA()(),e.TgZ(427,"tr")(428,"td")(429,"code"),e._uU(430,"get()"),e.qZA()(),e.TgZ(431,"td"),e._uU(432," Retrieves a static instance of a controller or provider (including guards, filters, etc.) available in the application context. Inherited from the "),e.TgZ(433,"a",30),e._uU(434,"module reference"),e.qZA(),e._uU(435," class. "),e.qZA()(),e.TgZ(436,"tr")(437,"td")(438,"code"),e._uU(439,"resolve()"),e.qZA()(),e.TgZ(440,"td"),e._uU(441," Retrieves a dynamically created scoped instance (request or transient) of a controller or provider (including guards, filters, etc.) available in the application context. Inherited from the "),e.TgZ(442,"a",30),e._uU(443,"module reference"),e.qZA(),e._uU(444," class. "),e.qZA()(),e.TgZ(445,"tr")(446,"td")(447,"code"),e._uU(448,"select()"),e.qZA()(),e.TgZ(449,"td"),e._uU(450," Navigates through the module's dependency graph; can be used to retrieve a specific instance from the selected module (used along with strict mode ("),e.TgZ(451,"code"),e._uU(452,"strict: true"),e.qZA(),e._uU(453,") in "),e.TgZ(454,"code"),e._uU(455,"get()"),e.qZA(),e._uU(456," method). "),e.qZA()()(),e.TgZ(457,"blockquote",14)(458,"strong"),e._uU(459,"Hint"),e.qZA(),e._uU(460," Keep your e2e test files inside the "),e.TgZ(461,"code"),e._uU(462,"test"),e.qZA(),e._uU(463," directory. The testing files should have a "),e.TgZ(464,"code"),e._uU(465,".e2e-spec"),e.qZA(),e._uU(466," suffix.\n"),e.qZA(),e.TgZ(467,"h4",31)(468,"span"),e._uU(469,"Overriding globally registered enhancers"),e.qZA()(),e.TgZ(470,"p"),e._uU(471,"If you have a globally registered guard (or pipe, interceptor, or filter), you need to take a few more steps to override that enhancer. To recap the original registration looks like this:"),e.qZA(),e.TgZ(472,"pre")(473,"code",13),e._uU(474,"\nproviders: [\n  {\n    provide: APP_GUARD,\n    useClass: JwtAuthGuard,\n  },\n],\n"),e.qZA()(),e.TgZ(475,"p"),e._uU(476,'This is registering the guard as a "multi"-provider through the '),e.TgZ(477,"code"),e._uU(478,"APP_*"),e.qZA(),e._uU(479," token. To be able to replace the "),e.TgZ(480,"code"),e._uU(481,"JwtAuthGuard"),e.qZA(),e._uU(482," here, the registration needs to use an existing provider in this slot:"),e.qZA(),e.TgZ(483,"pre")(484,"code",13),e._uU(485,"\nproviders: [\n  {\n    provide: APP_GUARD,\n    useExisting: JwtAuthGuard,\n    // ^^^^^^^^ notice the use of 'useExisting' instead of 'useClass'\n  },\n  JwtAuthGuard,\n],\n"),e.qZA()(),e.TgZ(486,"blockquote",14)(487,"strong"),e._uU(488,"Hint"),e.qZA(),e._uU(489," Change the "),e.TgZ(490,"code"),e._uU(491,"useClass"),e.qZA(),e._uU(492," to "),e.TgZ(493,"code"),e._uU(494,"useExisting"),e.qZA(),e._uU(495," to reference a registered provider instead of having Nest instantiate it behind the token.\n"),e.qZA(),e.TgZ(496,"p"),e._uU(497,"Now the "),e.TgZ(498,"code"),e._uU(499,"JwtAuthGuard"),e.qZA(),e._uU(500," is visible to Nest as a regular provider that can be overridden when creating the "),e.TgZ(501,"code"),e._uU(502,"TestingModule"),e.qZA(),e._uU(503,":"),e.qZA(),e.TgZ(504,"pre")(505,"code",13),e._uU(506,"\nconst moduleRef = await Test.createTestingModule({\n  imports: [AppModule],\n})\n  .overrideProvider(JwtAuthGuard)\n  .useClass(MockAuthGuard)\n  .compile();\n"),e.qZA()(),e.TgZ(507,"p"),e._uU(508,"Now all your tests will use the "),e.TgZ(509,"code"),e._uU(510,"MockAuthGuard"),e.qZA(),e._uU(511," on every request."),e.qZA(),e.TgZ(512,"h4",32)(513,"span"),e._uU(514,"Testing request-scoped instances"),e.qZA()(),e.TgZ(515,"p")(516,"a",33),e._uU(517,"Request-scoped"),e.qZA(),e._uU(518," providers are created uniquely for each incoming "),e.TgZ(519,"strong"),e._uU(520,"request"),e.qZA(),e._uU(521,". The instance is garbage-collected after the request has completed processing. This poses a problem, because we can't access a dependency injection sub-tree generated specifically for a tested request."),e.qZA(),e.TgZ(522,"p"),e._uU(523,"We know (based on the sections above) that the "),e.TgZ(524,"code"),e._uU(525,"resolve()"),e.qZA(),e._uU(526," method can be used to retrieve a dynamically instantiated class. Also, as described "),e.TgZ(527,"a",34),e._uU(528,"here"),e.qZA(),e._uU(529,", we know we can pass a unique context identifier to control the lifecycle of a DI container sub-tree. How do we leverage this in a testing context?"),e.qZA(),e.TgZ(530,"p"),e._uU(531,"The strategy is to generate a context identifier beforehand and force Nest to use this particular ID to create a sub-tree for all incoming requests. In this way we'll be able to retrieve instances created for a tested request."),e.qZA(),e.TgZ(532,"p"),e._uU(533,"To accomplish this, use "),e.TgZ(534,"code"),e._uU(535,"jest.spyOn()"),e.qZA(),e._uU(536," on the "),e.TgZ(537,"code"),e._uU(538,"ContextIdFactory"),e.qZA(),e._uU(539,":"),e.qZA(),e.TgZ(540,"pre")(541,"code",13),e._uU(542,"\nconst contextId = ContextIdFactory.create();\njest.spyOn(ContextIdFactory, 'getByRequest').mockImplementation(() => contextId);\n"),e.qZA()(),e.TgZ(543,"p"),e._uU(544,"Now we can use the "),e.TgZ(545,"code"),e._uU(546,"contextId"),e.qZA(),e._uU(547," to access a single generated DI container sub-tree for any subsequent request."),e.qZA(),e.TgZ(548,"pre")(549,"code",13),e._uU(550,"\ncatsService = await moduleRef.resolve(CatsService, contextId);\n"),e.qZA()()()),2&o){const u=e.MAs(57),r=e.MAs(100),a=e.MAs(259);e.xp6(54),e.hij(" ",e.xi3(55,15,"cats.controller.spec",u.isJsActive),"\n"),e.xp6(4),e.ekj("hide",u.isJsActive),e.xp6(3),e.ekj("hide",!u.isJsActive),e.xp6(36),e.hij(" ",e.xi3(98,18,"cats.controller.spec",r.isJsActive),"\n"),e.xp6(4),e.ekj("hide",r.isJsActive),e.xp6(3),e.ekj("hide",!r.isJsActive),e.xp6(152),e.hij(" ",e.xi3(257,21,"cats.e2e-spec",a.isJsActive),"\n"),e.xp6(4),e.ekj("hide",a.isJsActive),e.xp6(3),e.ekj("hide",!a.isJsActive)}},dependencies:[U.n,p.U,q.f,Z.rH,A.F],encapsulation:2,changeDetection:0})),n})(),data:{title:"Tests"}},{path:"injection-scopes",component:(()=>{class n extends d.y{}return(0,i.Z)(n,"\u0275fac",function(){let t;return function(s){return(t||(t=e.n5z(n)))(s||n)}}()),(0,i.Z)(n,"\u0275cmp",e.Xpm({type:n,selectors:[["app-provider-scopes"]],features:[e.qOj],decls:382,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/Lou8is/docs.nestjs.fr/edit/main/content/fundamentals/provider-scopes.md","aria-label","Proposer des modifications","title","Proposer des modifications"],[1,"fas","fa-edit"],["id","port\xe9es-dinjection"],["appAnchor","","id","port\xe9e-du-fournisseur"],[1,"info"],["appAnchor","","id","usage"],[1,"language-typescript"],["routerLink","/fundamentals/custom-providers"],[1,"warning"],["href","../security/authentication#request-scoped-strategies"],["appAnchor","","id","port\xe9e-du-contr\xf4leur"],["appAnchor","","id","hi\xe9rarchie-des-port\xe9es"],["appAnchor","","id","requ\xeate-au-fournisseur"],["routerLink","/graphql/quick-start"],["appAnchor","","id","fournisseur-dinquirer"],["appAnchor","","id","performance"],["appAnchor","","id","fournisseurs-durables"],["href","/fundamentals/module-ref#resolving-scoped-providers"]],template:function(o,s){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Port\xe9es d'injection"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Pour les personnes issues de diff\xe9rents langages de programmation, il peut \xeatre inattendu d'apprendre que dans Nest, presque tout est partag\xe9 entre les requ\xeates entrantes. Nous avons un pool de connexion \xe0 la base de donn\xe9es, des services singleton avec un \xe9tat global, etc. N'oubliez pas que Node.js ne suit pas le mod\xe8le sans \xe9tat multithread\xe9 requ\xeate/r\xe9ponse dans lequel chaque requ\xeate est trait\xe9e par un thread distinct. Par cons\xe9quent, l'utilisation d'instances singleton est totalement "),e.TgZ(9,"strong"),e._uU(10,"s\xe9curis\xe9e"),e.qZA(),e._uU(11," pour nos applications."),e.qZA(),e.TgZ(12,"p"),e._uU(13,"Cependant, il existe des cas limites o\xf9 la dur\xe9e de vie bas\xe9e sur les requ\xeates peut \xeatre le comportement souhait\xe9, par exemple la mise en cache par requ\xeate dans les applications GraphQL, le suivi des requ\xeates et la multi-location. Les champs d'application d'injection fournissent un m\xe9canisme permettant d'obtenir le comportement souhait\xe9 pour la dur\xe9e de vie du fournisseur."),e.qZA(),e.TgZ(14,"h4",6)(15,"span"),e._uU(16,"Port\xe9e du fournisseur"),e.qZA()(),e.TgZ(17,"p"),e._uU(18,"Un fournisseur peut avoir l'une des port\xe9es suivantes :"),e.qZA(),e.TgZ(19,"table")(20,"tr")(21,"td")(22,"code"),e._uU(23,"DEFAULT"),e.qZA()(),e.TgZ(24,"td"),e._uU(25,"Une seule instance du fournisseur est partag\xe9e par l'ensemble de l'application. La dur\xe9e de vie de l'instance est directement li\xe9e au cycle de vie de l'application. Une fois que l'application a d\xe9marr\xe9, tous les fournisseurs singleton ont \xe9t\xe9 instanci\xe9s. La port\xe9e du singleton est utilis\xe9e par d\xe9faut."),e.qZA()(),e.TgZ(26,"tr")(27,"td")(28,"code"),e._uU(29,"REQUEST"),e.qZA()(),e.TgZ(30,"td"),e._uU(31,"Une nouvelle instance du fournisseur est cr\xe9\xe9e exclusivement pour chaque "),e.TgZ(32,"strong"),e._uU(33,"requ\xeate"),e.qZA(),e._uU(34," entrante. L'instance est mise au rebut une fois le traitement de la requ\xeate termin\xe9."),e.qZA()(),e.TgZ(35,"tr")(36,"td")(37,"code"),e._uU(38,"TRANSIENT"),e.qZA()(),e.TgZ(39,"td"),e._uU(40,"Les fournisseurs transitoires ne sont pas partag\xe9s entre les consommateurs. Chaque consommateur qui injecte un fournisseur transitoire re\xe7oit une nouvelle instance d\xe9di\xe9e."),e.qZA()()(),e.TgZ(41,"blockquote",7)(42,"strong"),e._uU(43,"Astuce"),e.qZA(),e._uU(44," L'utilisation d'une port\xe9e singleton est "),e.TgZ(45,"strong"),e._uU(46,"recommand\xe9e"),e.qZA(),e._uU(47," dans la plupart des cas d'utilisation. Le partage des fournisseurs entre les consommateurs et les requ\xeates signifie qu'une instance peut \xeatre mise en cache et que son initialisation n'a lieu qu'une seule fois, lors du d\xe9marrage de l'application.\n"),e.qZA(),e.TgZ(48,"h4",8)(49,"span"),e._uU(50,"Usage"),e.qZA()(),e.TgZ(51,"p"),e._uU(52,"Sp\xe9cifiez la port\xe9e de l'injection en passant la propri\xe9t\xe9 "),e.TgZ(53,"code"),e._uU(54,"scope"),e.qZA(),e._uU(55," \xe0 l'objet d'options du d\xe9corateur "),e.TgZ(56,"code"),e._uU(57,"@Injectable()"),e.qZA(),e._uU(58," :"),e.qZA(),e.TgZ(59,"pre")(60,"code",9),e._uU(61,"\nimport { Injectable, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class CatsService {}\n"),e.qZA()(),e.TgZ(62,"p"),e._uU(63,"De m\xeame, pour les "),e.TgZ(64,"a",10),e._uU(65,"fournisseurs personnalis\xe9s"),e.qZA(),e._uU(66,", d\xe9finissez la propri\xe9t\xe9 "),e.TgZ(67,"code"),e._uU(68,"scope"),e.qZA(),e._uU(69," dans le format long pour l'enregistrement d'un fournisseur :"),e.qZA(),e.TgZ(70,"pre")(71,"code",9),e._uU(72,"\n{\n  provide: 'CACHE_MANAGER',\n  useClass: CacheManager,\n  scope: Scope.TRANSIENT,\n}\n"),e.qZA()(),e.TgZ(73,"blockquote",7)(74,"strong"),e._uU(75,"Astuce"),e.qZA(),e._uU(76," Importer l'enum "),e.TgZ(77,"code"),e._uU(78,"Scope"),e.qZA(),e._uU(79," depuis "),e.TgZ(80,"code"),e._uU(81,"@nestjs/common"),e.qZA()(),e.TgZ(82,"p"),e._uU(83,"La port\xe9e singleton est utilis\xe9e par d\xe9faut et n'a pas besoin d'\xeatre d\xe9clar\xe9e. Si vous voulez d\xe9clarer un provider comme singleton scoped, utilisez la valeur "),e.TgZ(84,"code"),e._uU(85,"Scope.DEFAULT"),e.qZA(),e._uU(86," pour la propri\xe9t\xe9 "),e.TgZ(87,"code"),e._uU(88,"scope"),e.qZA(),e._uU(89,"."),e.qZA(),e.TgZ(90,"blockquote",11)(91,"strong"),e._uU(92,"Remarque"),e.qZA(),e._uU(93," Les passerelles Websocket ne doivent pas utiliser de fournisseurs \xe0 port\xe9e de requ\xeate, car elles doivent agir comme des singletons. Chaque passerelle encapsule une v\xe9ritable socket et ne peut \xeatre instanci\xe9e plusieurs fois. Cette limitation s'applique \xe9galement \xe0 d'autres fournisseurs, comme les "),e.TgZ(94,"a",12)(95,"em"),e._uU(96,"Strat\xe9gies de passeport"),e.qZA()(),e._uU(97," ou les "),e.TgZ(98,"em"),e._uU(99,"contr\xf4leurs Cron"),e.qZA(),e._uU(100,".\n"),e.qZA(),e.TgZ(101,"h4",13)(102,"span"),e._uU(103,"Port\xe9e du contr\xf4leur"),e.qZA()(),e.TgZ(104,"p"),e._uU(105,"Les contr\xf4leurs peuvent \xe9galement avoir une port\xe9e, qui s'applique \xe0 tous les gestionnaires de m\xe9thodes de requ\xeate d\xe9clar\xe9s dans ce contr\xf4leur. Tout comme la port\xe9e du fournisseur, la port\xe9e d'un contr\xf4leur d\xe9termine sa dur\xe9e de vie. Dans le cas d'un contr\xf4leur \xe0 port\xe9e de requ\xeate, une nouvelle instance est cr\xe9\xe9e pour chaque requ\xeate entrante, et la poubelle est ramass\xe9e lorsque le traitement de la requ\xeate est termin\xe9."),e.qZA(),e.TgZ(106,"p"),e._uU(107,"D\xe9clarez la port\xe9e du contr\xf4leur avec la propri\xe9t\xe9 "),e.TgZ(108,"code"),e._uU(109,"scope"),e.qZA(),e._uU(110," de l'objet "),e.TgZ(111,"code"),e._uU(112,"ControllerOptions"),e.qZA(),e._uU(113," :"),e.qZA(),e.TgZ(114,"pre")(115,"code",9),e._uU(116,"\n@Controller({\n  path: 'cats',\n  scope: Scope.REQUEST,\n})\nexport class CatsController {}\n"),e.qZA()(),e.TgZ(117,"h4",14)(118,"span"),e._uU(119,"Hi\xe9rarchie des port\xe9es"),e.qZA()(),e.TgZ(120,"p"),e._uU(121,"La port\xe9e "),e.TgZ(122,"code"),e._uU(123,"REQUEST"),e.qZA(),e._uU(124," remonte la cha\xeene d'injection. Un contr\xf4leur qui d\xe9pend d'un fournisseur \xe0 port\xe9e de requ\xeate sera lui-m\xeame \xe0 port\xe9e de requ\xeate."),e.qZA(),e.TgZ(125,"p"),e._uU(126,"Imaginez le graphe de d\xe9pendance suivant : "),e.TgZ(127,"code"),e._uU(128,"CatsController <- CatsService <- CatsRepository"),e.qZA(),e._uU(129,". Si "),e.TgZ(130,"code"),e._uU(131,"CatsService"),e.qZA(),e._uU(132," est \xe0 port\xe9e de requ\xeate (et que les autres sont des singletons par d\xe9faut), "),e.TgZ(133,"code"),e._uU(134,"CatsController"),e.qZA(),e._uU(135," deviendra \xe0 port\xe9e de requ\xeate car il d\xe9pend du service inject\xe9. Le "),e.TgZ(136,"code"),e._uU(137,"CatsRepository"),e.qZA(),e._uU(138,", qui n'est pas d\xe9pendant, restera \xe0 port\xe9e de singleton."),e.qZA(),e.TgZ(139,"p"),e._uU(140,"Les d\xe9pendances transitoires ne suivent pas ce mod\xe8le. Si un "),e.TgZ(141,"code"),e._uU(142,"DogsService"),e.qZA(),e._uU(143," \xe0 port\xe9e de singleton injecte un fournisseur transitoire "),e.TgZ(144,"code"),e._uU(145,"LoggerService"),e.qZA(),e._uU(146,", il recevra une nouvelle instance de ce dernier. Cependant, "),e.TgZ(147,"code"),e._uU(148,"DogsService"),e.qZA(),e._uU(149," restera \xe0 port\xe9e de singleton, donc l'injecter n'importe o\xf9 ne r\xe9soudra "),e.TgZ(150,"em"),e._uU(151,"pas"),e.qZA(),e._uU(152," une nouvelle instance de "),e.TgZ(153,"code"),e._uU(154,"DogsService"),e.qZA(),e._uU(155,". Au cas o\xf9 ce serait le comportement d\xe9sir\xe9, "),e.TgZ(156,"code"),e._uU(157,"DogsService"),e.qZA(),e._uU(158," doit \xeatre explicitement marqu\xe9 comme "),e.TgZ(159,"code"),e._uU(160,"TRANSIENT"),e.qZA(),e._uU(161,"."),e.qZA(),e.TgZ(162,"p"),e._UZ(163,"app-banner-courses"),e.qZA(),e.TgZ(164,"h4",15)(165,"span"),e._uU(166,"Requ\xeate au fournisseur"),e.qZA()(),e.TgZ(167,"p"),e._uU(168,"Dans une application bas\xe9e sur un serveur HTTP (par exemple, en utilisant "),e.TgZ(169,"code"),e._uU(170,"@nestjs/platform-express"),e.qZA(),e._uU(171," ou "),e.TgZ(172,"code"),e._uU(173,"@nestjs/platform-fastify"),e.qZA(),e._uU(174,"), vous pouvez vouloir acc\xe9der \xe0 une r\xe9f\xe9rence \xe0 l'objet de requ\xeate original lorsque vous utilisez des fournisseurs \xe0 port\xe9e de requ\xeate. Vous pouvez le faire en injectant l'objet "),e.TgZ(175,"code"),e._uU(176,"REQUEST"),e.qZA(),e._uU(177,"."),e.qZA(),e.TgZ(178,"pre")(179,"code",9),e._uU(180,"\nimport { Injectable, Scope, Inject } from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class CatsService {\n  constructor(@Inject(REQUEST) private request: Request) {}\n}\n"),e.qZA()(),e.TgZ(181,"p"),e._uU(182,"En raison des diff\xe9rences de plateforme/protocole sous-jacentes, vous acc\xe9dez \xe0 la requ\xeate entrante l\xe9g\xe8rement diff\xe9remment pour les applications Microservice ou GraphQL. Dans les applications "),e.TgZ(183,"a",16),e._uU(184,"GraphQL"),e.qZA(),e._uU(185,", vous injectez "),e.TgZ(186,"code"),e._uU(187,"CONTEXT"),e.qZA(),e._uU(188," au lieu de "),e.TgZ(189,"code"),e._uU(190,"REQUEST"),e.qZA(),e._uU(191," :"),e.qZA(),e.TgZ(192,"pre")(193,"code",9),e._uU(194,"\nimport { Injectable, Scope, Inject } from '@nestjs/common';\nimport { CONTEXT } from '@nestjs/graphql';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class CatsService {\n  constructor(@Inject(CONTEXT) private context) {}\n}\n"),e.qZA()(),e.TgZ(195,"p"),e._uU(196,"Vous configurez ensuite votre valeur "),e.TgZ(197,"code"),e._uU(198,"context"),e.qZA(),e._uU(199," (dans le "),e.TgZ(200,"code"),e._uU(201,"GraphQLModule"),e.qZA(),e._uU(202,") pour qu'elle contienne "),e.TgZ(203,"code"),e._uU(204,"request"),e.qZA(),e._uU(205," comme propri\xe9t\xe9."),e.qZA(),e.TgZ(206,"h4",17)(207,"span"),e._uU(208,"Fournisseur d'Inquirer"),e.qZA()(),e.TgZ(209,"p"),e._uU(210,"Si vous voulez obtenir la classe dans laquelle un fournisseur a \xe9t\xe9 construit, par exemple dans les fournisseurs de logs ou de m\xe9triques, vous pouvez injecter le jeton "),e.TgZ(211,"code"),e._uU(212,"INQUIRER"),e.qZA(),e._uU(213,"."),e.qZA(),e.TgZ(214,"pre")(215,"code",9),e._uU(216,"\nimport { Inject, Injectable, Scope } from '@nestjs/common';\nimport { INQUIRER } from '@nestjs/core';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class HelloService {\n  constructor(@Inject(INQUIRER) private parentClass: object) {}\n\n  sayHello(message: string) {\n    console.log(`${this.parentClass?.constructor?.name}: ${message}`);\n  }\n}\n"),e.qZA()(),e.TgZ(217,"p"),e._uU(218,"Puis utilisez-le comme suit :"),e.qZA(),e.TgZ(219,"pre")(220,"code",9),e._uU(221,"\nimport { Injectable } from '@nestjs/common';\nimport { HelloService } from './hello.service';\n\n@Injectable()\nexport class AppService {\n  constructor(private helloService: HelloService) {}\n\n  getRoot(): string {\n    this.helloService.sayHello('Mon nom est getRoot');\n\n    return 'Hello world!';\n  }\n}\n"),e.qZA()(),e.TgZ(222,"p"),e._uU(223,"Dans l'exemple ci-dessus, lorsque "),e.TgZ(224,"code"),e._uU(225,"AppService#getRoot"),e.qZA(),e._uU(226," est appel\xe9, "),e.TgZ(227,"code"),e._uU(228,'"AppService : Mon nom est getRoot"'),e.qZA(),e._uU(229," sera enregistr\xe9 dans la console."),e.qZA(),e.TgZ(230,"h4",18)(231,"span"),e._uU(232,"Performance"),e.qZA()(),e.TgZ(233,"p"),e._uU(234,"L'utilisation de fournisseurs \xe0 port\xe9e de requ\xeate aura un impact sur les performances de l'application. Bien que Nest essaie de mettre en cache autant de m\xe9tadonn\xe9es que possible, il devra toujours cr\xe9er une instance de votre classe \xe0 chaque requ\xeate. Cela ralentira donc le temps de r\xe9ponse moyen et le r\xe9sultat global de l'analyse comparative. \xc0 moins qu'un fournisseur ne doive \xeatre \xe0 port\xe9e de requ\xeate, il est fortement recommand\xe9 d'utiliser la port\xe9e singleton par d\xe9faut."),e.qZA(),e.TgZ(235,"blockquote",7)(236,"strong"),e._uU(237,"Astuce"),e.qZA(),e._uU(238," Bien que tout cela semble assez intimidant, une application correctement con\xe7ue qui exploite des fournisseurs de services adapt\xe9s aux requ\xeates ne devrait pas \xeatre ralentie de plus de 5 % en termes de temps de latence.\n"),e.qZA(),e.TgZ(239,"h4",19)(240,"span"),e._uU(241,"Fournisseurs durables"),e.qZA()(),e.TgZ(242,"p"),e._uU(243,"Les fournisseurs \xe0 port\xe9e de requ\xeate, comme mentionn\xe9 dans la section ci-dessus, peuvent entra\xeener une augmentation de la latence car le fait d'avoir au moins un fournisseur \xe0 port\xe9e de requ\xeate (inject\xe9 dans l'instance du contr\xf4leur, ou plus profond\xe9ment - inject\xe9 dans l'un de ses fournisseurs) fait que le contr\xf4leur est \xe9galement \xe0 port\xe9e de requ\xeate. Cela signifie qu'il doit \xeatre recr\xe9\xe9 (instanci\xe9) pour chaque requ\xeate individuelle (et ramass\xe9 par la suite). Cela signifie \xe9galement que pour, disons, 30k requ\xeates en parall\xe8le, il y aura 30k instances \xe9ph\xe9m\xe8res du contr\xf4leur (et de ses fournisseurs adapt\xe9s aux requ\xeates)."),e.qZA(),e.TgZ(244,"p"),e._uU(245,"Le fait d'avoir un fournisseur commun dont d\xe9pendent la plupart des fournisseurs (par exemple, une connexion \xe0 une base de donn\xe9es ou un service d'enregistrement) convertit automatiquement tous ces fournisseurs en fournisseurs \xe0 port\xe9e de requ\xeate. Cela peut poser un probl\xe8me dans les "),e.TgZ(246,"strong"),e._uU(247,"applications multi-tenants"),e.qZA(),e._uU(248,', en particulier pour celles qui ont un fournisseur central de "source de donn\xe9es" \xe0 port\xe9e de requ\xeate qui r\xe9cup\xe8re les en-t\xeates/tokens de l\'objet de requ\xeate et, en fonction de ses valeurs, r\xe9cup\xe8re la connexion/le sch\xe9ma de base de donn\xe9es correspondant(e) (sp\xe9cifique \xe0 ce locataire).'),e.qZA(),e.TgZ(249,"p"),e._uU(250,"Par exemple, supposons que vous ayez une application utilis\xe9e alternativement par 10 clients diff\xe9rents. Chaque client a sa "),e.TgZ(251,"strong"),e._uU(252,"propre source de donn\xe9es d\xe9di\xe9e"),e.qZA(),e._uU(253,', et vous voulez vous assurer que le client A ne pourra jamais acc\xe9der \xe0 la base de donn\xe9es du client B. Une fa\xe7on d\'y parvenir serait de d\xe9clarer un fournisseur de "source de donn\xe9es" \xe0 l\'\xe9chelle de la requ\xeate qui, sur la base de l\'objet de la requ\xeate, d\xe9termine quel est le "client actuel" et r\xe9cup\xe8re la base de donn\xe9es correspondante. Avec cette approche, vous pouvez transformer votre application en une application multi-tenant en quelques minutes seulement. Mais l\'inconv\xe9nient majeur de cette approche est que, comme il est tr\xe8s probable qu\'une grande partie des composants de votre application repose sur le fournisseur "source de donn\xe9es", ils deviendront implicitement "\xe0 l\'\xe9chelle de la requ\xeate", et donc vous verrez sans aucun doute un impact sur les performances de votre application.'),e.qZA(),e.TgZ(254,"p"),e._uU(255,"Et si nous avions une meilleure solution ? Puisque nous n'avons que 10 clients, ne pourrions-nous pas avoir 10 "),e.TgZ(256,"a",20),e._uU(257,"sous-arbres d'ID"),e.qZA(),e._uU(258," individuels par client (au lieu de recr\xe9er chaque arbre par requ\xeate) ? Si vos fournisseurs ne s'appuient sur aucune propri\xe9t\xe9 qui soit r\xe9ellement unique pour chaque requ\xeate cons\xe9cutive (par exemple, l'UUID de la requ\xeate), mais qu'il existe des attributs sp\xe9cifiques qui nous permettent de les agr\xe9ger (les classer), il n'y a aucune raison de "),e.TgZ(259,"em"),e._uU(260,"recr\xe9er un sous-arbre DI"),e.qZA(),e._uU(261," pour chaque requ\xeate entrante ?"),e.qZA(),e.TgZ(262,"p"),e._uU(263,"Et c'est justement l\xe0 que les "),e.TgZ(264,"strong"),e._uU(265,"fournisseurs durables"),e.qZA(),e._uU(266," se r\xe9v\xe8lent utiles."),e.qZA(),e.TgZ(267,"p"),e._uU(268,"Avant de commencer \xe0 signaler les fournisseurs comme durables, nous devons d'abord enregistrer une "),e.TgZ(269,"strong"),e._uU(270,"strat\xe9gie"),e.qZA(),e._uU(271,' qui indique \xe0 Nest quels sont ces "attributs de requ\xeate communs", fournir une logique qui regroupe les requ\xeates - les associe \xe0 leurs sous-arbres ID correspondants.'),e.qZA(),e.TgZ(272,"pre")(273,"code",9),e._uU(274,"\nimport {\n  HostComponentInfo,\n  ContextId,\n  ContextIdFactory,\n  ContextIdStrategy,\n} from '@nestjs/core';\nimport { Request } from 'express';\n\nconst tenants = new Map<string, ContextId>();\n\nexport class AggregateByTenantContextIdStrategy implements ContextIdStrategy {\n  attach(contextId: ContextId, request: Request) {\n    const tenantId = request.headers['x-tenant-id'] as string;\n    let tenantSubTreeId: ContextId;\n\n    if (tenants.has(tenantId)) {\n      tenantSubTreeId = tenants.get(tenantId);\n    } else {\n      tenantSubTreeId = ContextIdFactory.create();\n      tenants.set(tenantId, tenantSubTreeId);\n    }\n\n    // Si l'arbre n'est pas durable, retourner l'objet \"contextId\" original\n    return (info: HostComponentInfo) =>\n      info.isTreeDurable ? tenantSubTreeId : contextId;\n  }\n}\n"),e.qZA()(),e.TgZ(275,"blockquote",7)(276,"strong"),e._uU(277,"Astuce"),e.qZA(),e._uU(278," De la m\xeame mani\xe8re que pour la port\xe9e de la requ\xeate, la durabilit\xe9 s'\xe9tend jusqu'\xe0 la cha\xeene d'injection. Cela signifie que si A d\xe9pend de B qui est marqu\xe9 comme "),e.TgZ(279,"code"),e._uU(280,"durable"),e.qZA(),e._uU(281,", A devient implicitement durable aussi (\xe0 moins que "),e.TgZ(282,"code"),e._uU(283,"durable"),e.qZA(),e._uU(284," ne soit explicitement mis \xe0 "),e.TgZ(285,"code"),e._uU(286,"false"),e.qZA(),e._uU(287," pour le fournisseur A).\n"),e.qZA(),e.TgZ(288,"blockquote",11)(289,"strong"),e._uU(290,"Attention"),e.qZA(),e._uU(291," Notez que cette strat\xe9gie n'est pas id\xe9ale pour les applications fonctionnant avec un grand nombre de clients.\n"),e.qZA(),e.TgZ(292,"p"),e._uU(293,"La valeur retourn\xe9e par la m\xe9thode "),e.TgZ(294,"code"),e._uU(295,"attach"),e.qZA(),e._uU(296," indique \xe0 Nest quel identifiant de contexte doit \xeatre utilis\xe9 pour un h\xf4te donn\xe9. Dans ce cas, nous avons sp\xe9cifi\xe9 que le "),e.TgZ(297,"code"),e._uU(298,"tenantSubTreeId"),e.qZA(),e._uU(299," devrait \xeatre utilis\xe9 \xe0 la place de l'objet "),e.TgZ(300,"code"),e._uU(301,"contextId"),e.qZA(),e._uU(302," original, auto-g\xe9n\xe9r\xe9, lorsque le composant h\xf4te (par exemple, un contr\xf4leur \xe0 port\xe9e de requ\xeate) est marqu\xe9 comme durable (vous pouvez apprendre comment marquer les fournisseurs comme durables ci-dessous). De plus, dans l'exemple ci-dessus, "),e.TgZ(303,"strong"),e._uU(304,"aucun payload"),e.qZA(),e._uU(305," ne serait enregistr\xe9 (o\xf9 payload = fournisseur "),e.TgZ(306,"code"),e._uU(307,"REQUEST"),e.qZA(),e._uU(308,"/"),e.TgZ(309,"code"),e._uU(310,"CONTEXT"),e.qZA(),e._uU(311,' qui repr\xe9sente la "racine" - parent de la sous-arborescence).'),e.qZA(),e.TgZ(312,"p"),e._uU(313,"Si vous souhaitez enregistrer la charge utile pour un arbre durable, utilisez plut\xf4t la construction suivante :"),e.qZA(),e.TgZ(314,"pre")(315,"code",9),e._uU(316,"\n// The return of `AggregateByTenantContextIdStrategy#attach` method:\nreturn {\n  resolve: (info: HostComponentInfo) =>\n    info.isTreeDurable ? tenantSubTreeId : contextId,\n  payload: { tenantId },\n  }\n"),e.qZA()(),e.TgZ(317,"p"),e._uU(318,"Maintenant, chaque fois que vous injectez le fournisseur "),e.TgZ(319,"code"),e._uU(320,"REQUEST"),e.qZA(),e._uU(321," (ou "),e.TgZ(322,"code"),e._uU(323,"CONTEXT"),e.qZA(),e._uU(324," pour les applications GraphQL) en utilisant "),e.TgZ(325,"code"),e._uU(326,"@Inject(REQUEST)"),e.qZA(),e._uU(327,"/"),e.TgZ(328,"code"),e._uU(329,"@Inject(CONTEXT)"),e.qZA(),e._uU(330,", l'objet "),e.TgZ(331,"code"),e._uU(332,"payload"),e.qZA(),e._uU(333," sera inject\xe9 (compos\xe9 d'une seule propri\xe9t\xe9 - "),e.TgZ(334,"code"),e._uU(335,"tenantId"),e.qZA(),e._uU(336," dans ce cas)."),e.qZA(),e.TgZ(337,"p"),e._uU(338,"D'accord, avec cette strat\xe9gie en place, vous pouvez l'enregistrer quelque part dans votre code (puisqu'elle s'applique globalement de toute fa\xe7on), donc par exemple, vous pourriez la placer dans le fichier "),e.TgZ(339,"code"),e._uU(340,"main.ts"),e.qZA(),e._uU(341," :"),e.qZA(),e.TgZ(342,"pre")(343,"code",9),e._uU(344,"\nContextIdFactory.apply(new AggregateByTenantContextIdStrategy());\n"),e.qZA()(),e.TgZ(345,"blockquote",7)(346,"strong"),e._uU(347,"Astuce"),e.qZA(),e._uU(348," La classe "),e.TgZ(349,"code"),e._uU(350,"ContextIdFactory"),e.qZA(),e._uU(351," est import\xe9e du package "),e.TgZ(352,"code"),e._uU(353,"@nestjs/core"),e.qZA(),e._uU(354,".\n"),e.qZA(),e.TgZ(355,"p"),e._uU(356,"Tant que l'enregistrement a lieu avant qu'une requ\xeate n'arrive dans votre application, tout fonctionnera comme pr\xe9vu."),e.qZA(),e.TgZ(357,"p"),e._uU(358,"Enfin, pour transformer un fournisseur r\xe9gulier en fournisseur durable, il suffit de mettre le flag "),e.TgZ(359,"code"),e._uU(360,"durable"),e.qZA(),e._uU(361," \xe0 "),e.TgZ(362,"code"),e._uU(363,"true"),e.qZA(),e._uU(364," et de changer sa port\xe9e en "),e.TgZ(365,"code"),e._uU(366,"Scope.REQUEST"),e.qZA(),e._uU(367," ( inutile si la port\xe9e REQUEST est d\xe9j\xe0 dans la cha\xeene d'injection) :"),e.qZA(),e.TgZ(368,"pre")(369,"code",9),e._uU(370,"\nimport { Injectable, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.REQUEST, durable: true })\nexport class CatsService {}\n"),e.qZA()(),e.TgZ(371,"p"),e._uU(372,"De m\xeame, pour les "),e.TgZ(373,"a",10),e._uU(374,"fournisseurs personnalis\xe9s"),e.qZA(),e._uU(375,", d\xe9finissez la propri\xe9t\xe9 "),e.TgZ(376,"code"),e._uU(377,"durable"),e.qZA(),e._uU(378," dans le format long pour l'enregistrement d'un fournisseur :"),e.qZA(),e.TgZ(379,"pre")(380,"code",9),e._uU(381,"\n{\n  provide: 'foobar',\n  useFactory: () => { ... },\n  scope: Scope.REQUEST,\n  durable: true,\n}\n"),e.qZA()()())},dependencies:[p.U,q.f,Z.rH],encapsulation:2,changeDetection:0})),n})(),data:{title:"Port\xe9es d'injection"}},{path:"execution-context",component:(()=>{class n extends d.y{}return(0,i.Z)(n,"\u0275fac",function(){let t;return function(s){return(t||(t=e.n5z(n)))(s||n)}}()),(0,i.Z)(n,"\u0275cmp",e.Xpm({type:n,selectors:[["app-execution-context"]],features:[e.qOj],decls:509,vars:56,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/Lou8is/docs.nestjs.fr/edit/main/content/fundamentals/execution-context.md","aria-label","Proposer des modifications","title","Proposer des modifications"],[1,"fas","fa-edit"],["id","execution-context"],["routerLink","/guards"],["routerLink","/exception-filters"],["routerLink","/interceptors"],["appAnchor","","id","argumentshost-class"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/exception-filters#arguments-host"],["routerLink","/graphql/quick-start"],["appAnchor","","id","current-application-context"],[1,"language-typescript"],[1,"info"],["appAnchor","","id","host-handler-arguments"],["appAnchor","","id","executioncontext-class"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/guards#execution-context"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/interceptors#execution-context"],["appAnchor","","id","reflection-and-metadata"],[1,"filename"],["app309c01736c212d0931849afc57e564a082876db9",""],["appa821eff86012986ecee6b37577c06c5bb5b34337",""],["app18aaeffa91a0b0522f349ecc4e13da092b7e58ab",""],["app5a2dc4521bf29cefd475aa65709d79cbfacfa9f7",""],["appedac39533060e351e2b96865181c7ed274d479e3",""],["app805aad0072c69e2889bb2e3a44827d3ffb25657c",""],["appd50d148b5e6f83056cfb25d86dfc5cede6925556",""]],template:function(o,s){if(1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Execution context"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Nest provides several utility classes that help make it easy to write applications that function across multiple application contexts (e.g., Nest HTTP server-based, microservices and WebSockets application contexts). These utilities provide information about the current execution context which can be used to build generic "),e.TgZ(9,"a",6),e._uU(10,"guards"),e.qZA(),e._uU(11,", "),e.TgZ(12,"a",7),e._uU(13,"filters"),e.qZA(),e._uU(14,", and "),e.TgZ(15,"a",8),e._uU(16,"interceptors"),e.qZA(),e._uU(17," that can work across a broad set of controllers, methods, and execution contexts."),e.qZA(),e.TgZ(18,"p"),e._uU(19,"We cover two such classes in this chapter: "),e.TgZ(20,"code"),e._uU(21,"ArgumentsHost"),e.qZA(),e._uU(22," and "),e.TgZ(23,"code"),e._uU(24,"ExecutionContext"),e.qZA(),e._uU(25,"."),e.qZA(),e.TgZ(26,"h4",9)(27,"span"),e._uU(28,"ArgumentsHost class"),e.qZA()(),e.TgZ(29,"p"),e._uU(30,"The "),e.TgZ(31,"code"),e._uU(32,"ArgumentsHost"),e.qZA(),e._uU(33," class provides methods for retrieving the arguments being passed to a handler. It allows choosing the appropriate context (e.g., HTTP, RPC (microservice), or WebSockets) to retrieve the arguments from. The framework provides an instance of "),e.TgZ(34,"code"),e._uU(35,"ArgumentsHost"),e.qZA(),e._uU(36,", typically referenced as a "),e.TgZ(37,"code"),e._uU(38,"host"),e.qZA(),e._uU(39," parameter, in places where you may want to access it. For example, the "),e.TgZ(40,"code"),e._uU(41,"catch()"),e.qZA(),e._uU(42," method of an "),e.TgZ(43,"a",10),e._uU(44,"exception filter"),e.qZA(),e._uU(45," is called with an "),e.TgZ(46,"code"),e._uU(47,"ArgumentsHost"),e.qZA(),e._uU(48,"instance."),e.qZA(),e.TgZ(49,"p")(50,"code"),e._uU(51,"ArgumentsHost"),e.qZA(),e._uU(52," simply acts as an abstraction over a handler's arguments. For example, for HTTP server applications (when "),e.TgZ(53,"code"),e._uU(54,"@nestjs/platform-express"),e.qZA(),e._uU(55," is being used), the "),e.TgZ(56,"code"),e._uU(57,"host"),e.qZA(),e._uU(58," object encapsulates Express's "),e.TgZ(59,"code"),e._uU(60,"[request, response, next]"),e.qZA(),e._uU(61," array, where "),e.TgZ(62,"code"),e._uU(63,"request"),e.qZA(),e._uU(64," is the request object, "),e.TgZ(65,"code"),e._uU(66,"response"),e.qZA(),e._uU(67," is the response object, and "),e.TgZ(68,"code"),e._uU(69,"next"),e.qZA(),e._uU(70," is a function that controls the application's request-response cycle. On the other hand, for "),e.TgZ(71,"a",11),e._uU(72,"GraphQL"),e.qZA(),e._uU(73," applications, the "),e.TgZ(74,"code"),e._uU(75,"host"),e.qZA(),e._uU(76," object contains the "),e.TgZ(77,"code"),e._uU(78,"[root, args, context, info]"),e.qZA(),e._uU(79," array."),e.qZA(),e.TgZ(80,"h4",12)(81,"span"),e._uU(82,"Current application context"),e.qZA()(),e.TgZ(83,"p"),e._uU(84,"When building generic "),e.TgZ(85,"a",6),e._uU(86,"guards"),e.qZA(),e._uU(87,", "),e.TgZ(88,"a",7),e._uU(89,"filters"),e.qZA(),e._uU(90,", and "),e.TgZ(91,"a",8),e._uU(92,"interceptors"),e.qZA(),e._uU(93," which are meant to run across multiple application contexts, we need a way to determine the type of application that our method is currently running in. Do this with the "),e.TgZ(94,"code"),e._uU(95,"getType()"),e.qZA(),e._uU(96," method of "),e.TgZ(97,"code"),e._uU(98,"ArgumentsHost"),e.qZA(),e._uU(99,":"),e.qZA(),e.TgZ(100,"pre")(101,"code",13),e._uU(102,"\nif (host.getType() === 'http') {\n  // do something that is only important in the context of regular HTTP requests (REST)\n} else if (host.getType() === 'rpc') {\n  // do something that is only important in the context of Microservice requests\n} else if (host.getType<GqlContextType>() === 'graphql') {\n  // do something that is only important in the context of GraphQL requests\n}\n"),e.qZA()(),e.TgZ(103,"blockquote",14)(104,"strong"),e._uU(105,"Hint"),e.qZA(),e._uU(106," The "),e.TgZ(107,"code"),e._uU(108,"GqlContextType"),e.qZA(),e._uU(109," is imported from the "),e.TgZ(110,"code"),e._uU(111,"@nestjs/graphql"),e.qZA(),e._uU(112," package.\n"),e.qZA(),e.TgZ(113,"p"),e._uU(114,"With the application type available, we can write more generic components, as shown below."),e.qZA(),e.TgZ(115,"h4",15)(116,"span"),e._uU(117,"Host handler arguments"),e.qZA()(),e.TgZ(118,"p"),e._uU(119,"To retrieve the array of arguments being passed to the handler, one approach is to use the host object's "),e.TgZ(120,"code"),e._uU(121,"getArgs()"),e.qZA(),e._uU(122," method."),e.qZA(),e.TgZ(123,"pre")(124,"code",13),e._uU(125,"\nconst [req, res, next] = host.getArgs();\n"),e.qZA()(),e.TgZ(126,"p"),e._uU(127,"You can pluck a particular argument by index using the "),e.TgZ(128,"code"),e._uU(129,"getArgByIndex()"),e.qZA(),e._uU(130," method:"),e.qZA(),e.TgZ(131,"pre")(132,"code",13),e._uU(133,"\nconst request = host.getArgByIndex(0);\nconst response = host.getArgByIndex(1);\n"),e.qZA()(),e.TgZ(134,"p"),e._uU(135,"In these examples we retrieved the request and response objects by index, which is not typically recommended as it couples the application to a particular execution context. Instead, you can make your code more robust and reusable by using one of the "),e.TgZ(136,"code"),e._uU(137,"host"),e.qZA(),e._uU(138," object's utility methods to switch to the appropriate application context for your application. The context switch utility methods are shown below."),e.qZA(),e.TgZ(139,"pre")(140,"code",13),e._uU(141,"\n/**\n * Switch context to RPC.\n */\nswitchToRpc(): RpcArgumentsHost;\n/**\n * Switch context to HTTP.\n */\nswitchToHttp(): HttpArgumentsHost;\n/**\n * Switch context to WebSockets.\n */\nswitchToWs(): WsArgumentsHost;\n"),e.qZA()(),e.TgZ(142,"p"),e._uU(143,"Let's rewrite the previous example using the "),e.TgZ(144,"code"),e._uU(145,"switchToHttp()"),e.qZA(),e._uU(146," method. The "),e.TgZ(147,"code"),e._uU(148,"host.switchToHttp()"),e.qZA(),e._uU(149," helper call returns an "),e.TgZ(150,"code"),e._uU(151,"HttpArgumentsHost"),e.qZA(),e._uU(152," object that is appropriate for the HTTP application context. The "),e.TgZ(153,"code"),e._uU(154,"HttpArgumentsHost"),e.qZA(),e._uU(155," object has two useful methods we can use to extract the desired objects. We also use the Express type assertions in this case to return native Express typed objects:"),e.qZA(),e.TgZ(156,"pre")(157,"code",13),e._uU(158,"\nconst ctx = host.switchToHttp();\nconst request = ctx.getRequest<Request>();\nconst response = ctx.getResponse<Response>();\n"),e.qZA()(),e.TgZ(159,"p"),e._uU(160,"Similarly "),e.TgZ(161,"code"),e._uU(162,"WsArgumentsHost"),e.qZA(),e._uU(163," and "),e.TgZ(164,"code"),e._uU(165,"RpcArgumentsHost"),e.qZA(),e._uU(166," have methods to return appropriate objects in the microservices and WebSockets contexts. Here are the methods for "),e.TgZ(167,"code"),e._uU(168,"WsArgumentsHost"),e.qZA(),e._uU(169,":"),e.qZA(),e.TgZ(170,"pre")(171,"code",13),e._uU(172,"\nexport interface WsArgumentsHost {\n  /**\n   * Returns the data object.\n   */\n  getData<T>(): T;\n  /**\n   * Returns the client object.\n   */\n  getClient<T>(): T;\n}\n"),e.qZA()(),e.TgZ(173,"p"),e._uU(174,"Following are the methods for "),e.TgZ(175,"code"),e._uU(176,"RpcArgumentsHost"),e.qZA(),e._uU(177,":"),e.qZA(),e.TgZ(178,"pre")(179,"code",13),e._uU(180,"\nexport interface RpcArgumentsHost {\n  /**\n   * Returns the data object.\n   */\n  getData<T>(): T;\n\n  /**\n   * Returns the context object.\n   */\n  getContext<T>(): T;\n}\n"),e.qZA()(),e.TgZ(181,"h4",16)(182,"span"),e._uU(183,"ExecutionContext class"),e.qZA()(),e.TgZ(184,"p")(185,"code"),e._uU(186,"ExecutionContext"),e.qZA(),e._uU(187," extends "),e.TgZ(188,"code"),e._uU(189,"ArgumentsHost"),e.qZA(),e._uU(190,", providing additional details about the current execution process. Like "),e.TgZ(191,"code"),e._uU(192,"ArgumentsHost"),e.qZA(),e._uU(193,", Nest provides an instance of "),e.TgZ(194,"code"),e._uU(195,"ExecutionContext"),e.qZA(),e._uU(196," in places you may need it, such as in the "),e.TgZ(197,"code"),e._uU(198,"canActivate()"),e.qZA(),e._uU(199," method of a "),e.TgZ(200,"a",17),e._uU(201,"guard"),e.qZA(),e._uU(202," and the "),e.TgZ(203,"code"),e._uU(204,"intercept()"),e.qZA(),e._uU(205," method of an "),e.TgZ(206,"a",18),e._uU(207,"interceptor"),e.qZA(),e._uU(208,". It provides the following methods:"),e.qZA(),e.TgZ(209,"pre")(210,"code",13),e._uU(211,"\nexport interface ExecutionContext extends ArgumentsHost {\n  /**\n   * Returns the type of the controller class which the current handler belongs to.\n   */\n  getClass<T>(): Type<T>;\n  /**\n   * Returns a reference to the handler (method) that will be invoked next in the\n   * request pipeline.\n   */\n  getHandler(): Function;\n}\n"),e.qZA()(),e.TgZ(212,"p"),e._uU(213,"The "),e.TgZ(214,"code"),e._uU(215,"getHandler()"),e.qZA(),e._uU(216," method returns a reference to the handler about to be invoked. The "),e.TgZ(217,"code"),e._uU(218,"getClass()"),e.qZA(),e._uU(219," method returns the type of the "),e.TgZ(220,"code"),e._uU(221,"Controller"),e.qZA(),e._uU(222," class which this particular handler belongs to. For example, in an HTTP context, if the currently processed request is a "),e.TgZ(223,"code"),e._uU(224,"POST"),e.qZA(),e._uU(225," request, bound to the "),e.TgZ(226,"code"),e._uU(227,"create()"),e.qZA(),e._uU(228," method on the "),e.TgZ(229,"code"),e._uU(230,"CatsController"),e.qZA(),e._uU(231,", "),e.TgZ(232,"code"),e._uU(233,"getHandler()"),e.qZA(),e._uU(234," returns a reference to the "),e.TgZ(235,"code"),e._uU(236,"create()"),e.qZA(),e._uU(237," method and "),e.TgZ(238,"code"),e._uU(239,"getClass()"),e.qZA(),e._uU(240," returns the "),e.TgZ(241,"code"),e._uU(242,"CatsController"),e.qZA(),e.TgZ(243,"strong"),e._uU(244,"type"),e.qZA(),e._uU(245," (not instance)."),e.qZA(),e.TgZ(246,"pre")(247,"code",13),e._uU(248,'\nconst methodKey = ctx.getHandler().name; // "create"\nconst className = ctx.getClass().name; // "CatsController"\n'),e.qZA()(),e.TgZ(249,"p"),e._uU(250,"The ability to access references to both the current class and handler method provides great flexibility. Most importantly, it gives us the opportunity to access the metadata set through the "),e.TgZ(251,"code"),e._uU(252,"@SetMetadata()"),e.qZA(),e._uU(253," decorator from within guards or interceptors. We cover this use case below."),e.qZA(),e.TgZ(254,"p"),e._UZ(255,"app-banner-enterprise"),e.qZA(),e.TgZ(256,"h4",19)(257,"span"),e._uU(258,"Reflection and metadata"),e.qZA()(),e.TgZ(259,"p"),e._uU(260,"Nest provides the ability to attach "),e.TgZ(261,"strong"),e._uU(262,"custom metadata"),e.qZA(),e._uU(263," to route handlers through the "),e.TgZ(264,"code"),e._uU(265,"@SetMetadata()"),e.qZA(),e._uU(266," decorator. We can then access this metadata from within our class to make certain decisions."),e.qZA(),e.TgZ(267,"span",20),e._uU(268),e.ALo(269,"extension"),e._UZ(270,"app-tabs",null,21),e.qZA(),e.TgZ(272,"pre")(273,"code",13),e._uU(274,"\n@Post()\n@SetMetadata('roles', ['admin'])\nasync create(@Body() createCatDto: CreateCatDto) {\n  this.catsService.create(createCatDto);\n}\n"),e.qZA()(),e.TgZ(275,"pre")(276,"code",13),e._uU(277,"\n@Post()\n@SetMetadata('roles', ['admin'])\n@Bind(Body())\nasync create(createCatDto) {\n  this.catsService.create(createCatDto);\n}\n"),e.qZA()(),e.TgZ(278,"blockquote",14)(279,"strong"),e._uU(280,"Hint"),e.qZA(),e._uU(281," The "),e.TgZ(282,"code"),e._uU(283,"@SetMetadata()"),e.qZA(),e._uU(284," decorator is imported from the "),e.TgZ(285,"code"),e._uU(286,"@nestjs/common"),e.qZA(),e._uU(287," package.\n"),e.qZA(),e.TgZ(288,"p"),e._uU(289,"With the construction above, we attached the "),e.TgZ(290,"code"),e._uU(291,"roles"),e.qZA(),e._uU(292," metadata ("),e.TgZ(293,"code"),e._uU(294,"roles"),e.qZA(),e._uU(295," is a metadata key and "),e.TgZ(296,"code"),e._uU(297,"['admin']"),e.qZA(),e._uU(298," is the associated value) to the "),e.TgZ(299,"code"),e._uU(300,"create()"),e.qZA(),e._uU(301," method. While this works, it's not good practice to use "),e.TgZ(302,"code"),e._uU(303,"@SetMetadata()"),e.qZA(),e._uU(304," directly in your routes. Instead, create your own decorators, as shown below:"),e.qZA(),e.TgZ(305,"span",20),e._uU(306),e.ALo(307,"extension"),e._UZ(308,"app-tabs",null,22),e.qZA(),e.TgZ(310,"pre")(311,"code",13),e._uU(312,"\nimport { SetMetadata } from '@nestjs/common';\n\nexport const Roles = (...roles: string[]) => SetMetadata('roles', roles);\n"),e.qZA()(),e.TgZ(313,"pre")(314,"code",13),e._uU(315,"\nimport { SetMetadata } from '@nestjs/common';\n\nexport const Roles = (...roles) => SetMetadata('roles', roles);\n"),e.qZA()(),e.TgZ(316,"p"),e._uU(317,"This approach is much cleaner and more readable, and is strongly typed. Now that we have a custom "),e.TgZ(318,"code"),e._uU(319,"@Roles()"),e.qZA(),e._uU(320," decorator, we can use it to decorate the "),e.TgZ(321,"code"),e._uU(322,"create()"),e.qZA(),e._uU(323," method."),e.qZA(),e.TgZ(324,"span",20),e._uU(325),e.ALo(326,"extension"),e._UZ(327,"app-tabs",null,23),e.qZA(),e.TgZ(329,"pre")(330,"code",13),e._uU(331,"\n@Post()\n@Roles('admin')\nasync create(@Body() createCatDto: CreateCatDto) {\n  this.catsService.create(createCatDto);\n}\n"),e.qZA()(),e.TgZ(332,"pre")(333,"code",13),e._uU(334,"\n@Post()\n@Roles('admin')\n@Bind(Body())\nasync create(createCatDto) {\n  this.catsService.create(createCatDto);\n}\n"),e.qZA()(),e.TgZ(335,"p"),e._uU(336,"To access the route's role(s) (custom metadata), we'll use the "),e.TgZ(337,"code"),e._uU(338,"Reflector"),e.qZA(),e._uU(339," helper class, which is provided out of the box by the framework and exposed from the "),e.TgZ(340,"code"),e._uU(341,"@nestjs/core"),e.qZA(),e._uU(342," package. "),e.TgZ(343,"code"),e._uU(344,"Reflector"),e.qZA(),e._uU(345," can be injected into a class in the normal way:"),e.qZA(),e.TgZ(346,"span",20),e._uU(347),e.ALo(348,"extension"),e._UZ(349,"app-tabs",null,24),e.qZA(),e.TgZ(351,"pre")(352,"code",13),e._uU(353,"\n@Injectable()\nexport class RolesGuard {\n  constructor(private reflector: Reflector) {}\n}\n"),e.qZA()(),e.TgZ(354,"pre")(355,"code",13),e._uU(356,"\n@Injectable()\n@Dependencies(Reflector)\nexport class CatsService {\n  constructor(reflector) {\n    this.reflector = reflector;\n  }\n}\n"),e.qZA()(),e.TgZ(357,"blockquote",14)(358,"strong"),e._uU(359,"Hint"),e.qZA(),e._uU(360," The "),e.TgZ(361,"code"),e._uU(362,"Reflector"),e.qZA(),e._uU(363," class is imported from the "),e.TgZ(364,"code"),e._uU(365,"@nestjs/core"),e.qZA(),e._uU(366," package.\n"),e.qZA(),e.TgZ(367,"p"),e._uU(368,"Now, to read the handler metadata, use the "),e.TgZ(369,"code"),e._uU(370,"get()"),e.qZA(),e._uU(371," method."),e.qZA(),e.TgZ(372,"pre")(373,"code",13),e._uU(374,"\nconst roles = this.reflector.get<string[]>('roles', context.getHandler());\n"),e.qZA()(),e.TgZ(375,"p"),e._uU(376,"The "),e.TgZ(377,"code"),e._uU(378,"Reflector#get"),e.qZA(),e._uU(379," method allows us to easily access the metadata by passing in two arguments: a metadata "),e.TgZ(380,"strong"),e._uU(381,"key"),e.qZA(),e._uU(382," and a "),e.TgZ(383,"strong"),e._uU(384,"context"),e.qZA(),e._uU(385," (decorator target) to retrieve the metadata from. In this example, the specified "),e.TgZ(386,"strong"),e._uU(387,"key"),e.qZA(),e._uU(388," is "),e.TgZ(389,"code"),e._uU(390,"'roles'"),e.qZA(),e._uU(391," (refer back to the "),e.TgZ(392,"code"),e._uU(393,"roles.decorator.ts"),e.qZA(),e._uU(394," file above and the "),e.TgZ(395,"code"),e._uU(396,"SetMetadata()"),e.qZA(),e._uU(397," call made there). The context is provided by the call to "),e.TgZ(398,"code"),e._uU(399,"context.getHandler()"),e.qZA(),e._uU(400,", which results in extracting the metadata for the currently processed route handler. Remember, "),e.TgZ(401,"code"),e._uU(402,"getHandler()"),e.qZA(),e._uU(403," gives us a "),e.TgZ(404,"strong"),e._uU(405,"reference"),e.qZA(),e._uU(406," to the route handler function."),e.qZA(),e.TgZ(407,"p"),e._uU(408,"Alternatively, we may organize our controller by applying metadata at the controller level, applying to all routes in the controller class."),e.qZA(),e.TgZ(409,"span",20),e._uU(410),e.ALo(411,"extension"),e._UZ(412,"app-tabs",null,25),e.qZA(),e.TgZ(414,"pre")(415,"code",13),e._uU(416,"\n@Roles('admin')\n@Controller('cats')\nexport class CatsController {}\n"),e.qZA()(),e.TgZ(417,"pre")(418,"code",13),e._uU(419,"\n@Roles('admin')\n@Controller('cats')\nexport class CatsController {}\n"),e.qZA()(),e.TgZ(420,"p"),e._uU(421,"In this case, to extract controller metadata, we pass "),e.TgZ(422,"code"),e._uU(423,"context.getClass()"),e.qZA(),e._uU(424," as the second argument (to provide the controller class as the context for metadata extraction) instead of "),e.TgZ(425,"code"),e._uU(426,"context.getHandler()"),e.qZA(),e._uU(427,":"),e.qZA(),e.TgZ(428,"span",20),e._uU(429),e.ALo(430,"extension"),e._UZ(431,"app-tabs",null,26),e.qZA(),e.TgZ(433,"pre")(434,"code",13),e._uU(435,"\nconst roles = this.reflector.get<string[]>('roles', context.getClass());\n"),e.qZA()(),e.TgZ(436,"pre")(437,"code",13),e._uU(438,"\nconst roles = this.reflector.get('roles', context.getClass());\n"),e.qZA()(),e.TgZ(439,"p"),e._uU(440,"Given the ability to provide metadata at multiple levels, you may need to extract and merge metadata from several contexts. The "),e.TgZ(441,"code"),e._uU(442,"Reflector"),e.qZA(),e._uU(443," class provides two utility methods used to help with this. These methods extract "),e.TgZ(444,"strong"),e._uU(445,"both"),e.qZA(),e._uU(446," controller and method metadata at once, and combine them in different ways."),e.qZA(),e.TgZ(447,"p"),e._uU(448,"Consider the following scenario, where you've supplied "),e.TgZ(449,"code"),e._uU(450,"'roles'"),e.qZA(),e._uU(451," metadata at both levels."),e.qZA(),e.TgZ(452,"span",20),e._uU(453),e.ALo(454,"extension"),e._UZ(455,"app-tabs",null,27),e.qZA(),e.TgZ(457,"pre")(458,"code",13),e._uU(459,"\n@Roles('user')\n@Controller('cats')\nexport class CatsController {\n  @Post()\n  @Roles('admin')\n  async create(@Body() createCatDto: CreateCatDto) {\n    this.catsService.create(createCatDto);\n  }\n}\n"),e.qZA()(),e.TgZ(460,"pre")(461,"code",13),e._uU(462,"\n@Roles('user')\n@Controller('cats')\nexport class CatsController {}\n  @Post()\n  @Roles('admin')\n  @Bind(Body())\n  async create(createCatDto) {\n    this.catsService.create(createCatDto);\n  }\n}\n"),e.qZA()(),e.TgZ(463,"p"),e._uU(464,"If your intent is to specify "),e.TgZ(465,"code"),e._uU(466,"'user'"),e.qZA(),e._uU(467," as the default role, and override it selectively for certain methods, you would probably use the "),e.TgZ(468,"code"),e._uU(469,"getAllAndOverride()"),e.qZA(),e._uU(470," method."),e.qZA(),e.TgZ(471,"pre")(472,"code",13),e._uU(473,"\nconst roles = this.reflector.getAllAndOverride<string[]>('roles', [\n  context.getHandler(),\n  context.getClass(),\n]);\n"),e.qZA()(),e.TgZ(474,"p"),e._uU(475,"A guard with this code, running in the context of the "),e.TgZ(476,"code"),e._uU(477,"create()"),e.qZA(),e._uU(478," method, with the above metadata, would result in "),e.TgZ(479,"code"),e._uU(480,"roles"),e.qZA(),e._uU(481," containing "),e.TgZ(482,"code"),e._uU(483,"['admin']"),e.qZA(),e._uU(484,"."),e.qZA(),e.TgZ(485,"p"),e._uU(486,"To get metadata for both and merge it (this method merges both arrays and objects), use the "),e.TgZ(487,"code"),e._uU(488,"getAllAndMerge()"),e.qZA(),e._uU(489," method:"),e.qZA(),e.TgZ(490,"pre")(491,"code",13),e._uU(492,"\nconst roles = this.reflector.getAllAndMerge<string[]>('roles', [\n  context.getHandler(),\n  context.getClass(),\n]);\n"),e.qZA()(),e.TgZ(493,"p"),e._uU(494,"This would result in "),e.TgZ(495,"code"),e._uU(496,"roles"),e.qZA(),e._uU(497," containing "),e.TgZ(498,"code"),e._uU(499,"['user', 'admin']"),e.qZA(),e._uU(500,"."),e.qZA(),e.TgZ(501,"p"),e._uU(502,"For both of these merge methods, you pass the metadata key as the first argument, and an array of metadata target contexts (i.e., calls to the "),e.TgZ(503,"code"),e._uU(504,"getHandler()"),e.qZA(),e._uU(505," and/or "),e.TgZ(506,"code"),e._uU(507,"getClass())"),e.qZA(),e._uU(508," methods) as the second argument."),e.qZA()()),2&o){const u=e.MAs(271),r=e.MAs(309),a=e.MAs(328),l=e.MAs(350),g=e.MAs(413),m=e.MAs(432),_=e.MAs(456);e.xp6(268),e.hij(" ",e.xi3(269,35,"cats.controller",u.isJsActive),"\n"),e.xp6(4),e.ekj("hide",u.isJsActive),e.xp6(3),e.ekj("hide",!u.isJsActive),e.xp6(31),e.hij(" ",e.xi3(307,38,"roles.decorator",r.isJsActive),"\n"),e.xp6(4),e.ekj("hide",r.isJsActive),e.xp6(3),e.ekj("hide",!r.isJsActive),e.xp6(12),e.hij(" ",e.xi3(326,41,"cats.controller",a.isJsActive),"\n"),e.xp6(4),e.ekj("hide",a.isJsActive),e.xp6(3),e.ekj("hide",!a.isJsActive),e.xp6(15),e.hij(" ",e.xi3(348,44,"roles.guard",l.isJsActive),"\n"),e.xp6(4),e.ekj("hide",l.isJsActive),e.xp6(3),e.ekj("hide",!l.isJsActive),e.xp6(56),e.hij(" ",e.xi3(411,47,"cats.controller",g.isJsActive),"\n"),e.xp6(4),e.ekj("hide",g.isJsActive),e.xp6(3),e.ekj("hide",!g.isJsActive),e.xp6(12),e.hij(" ",e.xi3(430,50,"roles.guard",m.isJsActive),"\n"),e.xp6(4),e.ekj("hide",m.isJsActive),e.xp6(3),e.ekj("hide",!m.isJsActive),e.xp6(17),e.hij(" ",e.xi3(454,53,"cats.controller",_.isJsActive),"\n"),e.xp6(4),e.ekj("hide",_.isJsActive),e.xp6(3),e.ekj("hide",!_.isJsActive)}},dependencies:[U.n,p.U,S.V,Z.rH,A.F],encapsulation:2,changeDetection:0})),n})(),data:{title:"Contexte d'ex\xe9cution"}},{path:"lifecycle-events",component:C,data:{title:"\xc9v\xe9nements du cycle de vie"}},{path:"circular-dependency",component:b,data:{title:"D\xe9pendance circulaire"}}];let w=(()=>{class n{}return(0,i.Z)(n,"\u0275fac",function(o){return new(o||n)}),(0,i.Z)(n,"\u0275mod",e.oAB({type:n})),(0,i.Z)(n,"\u0275inj",e.cJS({imports:[h.ez,E.m,Z.Bz.forChild(M)]})),n})()}}]);